(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.nf = factory());
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */


    function __awaiter$3(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    /**
     * Get the type of a JSON value.
     * Distinguishes between array, null and object.
     */
    function typeofJsonValue(value) {
        let t = typeof value;
        if (t == "object") {
            if (Array.isArray(value))
                return "array";
            if (value === null)
                return "null";
        }
        return t;
    }
    /**
     * Is this a JSON object (instead of an array or null)?
     */
    function isJsonObject(value) {
        return value !== null && typeof value == "object" && !Array.isArray(value);
    }

    // lookup table from base64 character to byte
    let encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
    // lookup table from base64 character *code* to byte because lookup by number is fast
    let decTable = [];
    for (let i = 0; i < encTable.length; i++)
        decTable[encTable[i].charCodeAt(0)] = i;
    // support base64url variants
    decTable["-".charCodeAt(0)] = encTable.indexOf("+");
    decTable["_".charCodeAt(0)] = encTable.indexOf("/");
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    function base64decode(base64Str) {
        // estimate byte size, not accounting for inner padding and whitespace
        let es = base64Str.length * 3 / 4;
        // if (es % 3 !== 0)
        // throw new Error('invalid base64 string');
        if (base64Str[base64Str.length - 2] == '=')
            es -= 2;
        else if (base64Str[base64Str.length - 1] == '=')
            es -= 1;
        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array
        groupPos = 0, // position in base64 group
        b, // current byte
        p = 0 // previous byte
        ;
        for (let i = 0; i < base64Str.length; i++) {
            b = decTable[base64Str.charCodeAt(i)];
            if (b === undefined) {
                // noinspection FallThroughInSwitchStatementJS
                switch (base64Str[i]) {
                    case '=':
                        groupPos = 0; // reset state when padding found
                    case '\n':
                    case '\r':
                    case '\t':
                    case ' ':
                        continue; // skip white-space, and padding
                    default:
                        throw Error(`invalid base64 string.`);
                }
            }
            switch (groupPos) {
                case 0:
                    p = b;
                    groupPos = 1;
                    break;
                case 1:
                    bytes[bytePos++] = p << 2 | (b & 48) >> 4;
                    p = b;
                    groupPos = 2;
                    break;
                case 2:
                    bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;
                    p = b;
                    groupPos = 3;
                    break;
                case 3:
                    bytes[bytePos++] = (p & 3) << 6 | b;
                    groupPos = 0;
                    break;
            }
        }
        if (groupPos == 1)
            throw Error(`invalid base64 string.`);
        return bytes.subarray(0, bytePos);
    }
    /**
     * Encodes a byte array to a base64 string.
     * Adds padding at the end.
     * Does not insert newlines.
     */
    function base64encode(bytes) {
        let base64 = '', groupPos = 0, // position in base64 group
        b, // current byte
        p = 0; // carry over from previous byte
        for (let i = 0; i < bytes.length; i++) {
            b = bytes[i];
            switch (groupPos) {
                case 0:
                    base64 += encTable[b >> 2];
                    p = (b & 3) << 4;
                    groupPos = 1;
                    break;
                case 1:
                    base64 += encTable[p | b >> 4];
                    p = (b & 15) << 2;
                    groupPos = 2;
                    break;
                case 2:
                    base64 += encTable[p | b >> 6];
                    base64 += encTable[b & 63];
                    groupPos = 0;
                    break;
            }
        }
        // padding required?
        if (groupPos) {
            base64 += encTable[p];
            base64 += '=';
            if (groupPos == 1)
                base64 += '=';
        }
        return base64;
    }

    /**
     * This handler implements the default behaviour for unknown fields.
     * When reading data, unknown fields are stored on the message, in a
     * symbol property.
     * When writing data, the symbol property is queried and unknown fields
     * are serialized into the output again.
     */
    var UnknownFieldHandler;
    (function (UnknownFieldHandler) {
        /**
         * The symbol used to store unknown fields for a message.
         * The property must conform to `UnknownFieldContainer`.
         */
        UnknownFieldHandler.symbol = Symbol.for("protobuf-ts/unknown");
        /**
         * Store an unknown field during binary read directly on the message.
         * This method is compatible with `BinaryReadOptions.readUnknownField`.
         */
        UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {
            let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];
            container.push({ no: fieldNo, wireType, data });
        };
        /**
         * Write unknown fields stored for the message to the writer.
         * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.
         */
        UnknownFieldHandler.onWrite = (typeName, message, writer) => {
            for (let { no, wireType, data } of UnknownFieldHandler.list(message))
                writer.tag(no, wireType).raw(data);
        };
        /**
         * List unknown fields stored for the message.
         * Note that there may be multiples fields with the same number.
         */
        UnknownFieldHandler.list = (message, fieldNo) => {
            if (is(message)) {
                let all = message[UnknownFieldHandler.symbol];
                return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;
            }
            return [];
        };
        /**
         * Returns the last unknown field by field number.
         */
        UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];
        const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);
    })(UnknownFieldHandler || (UnknownFieldHandler = {}));
    /**
     * Merges binary write or read options. Later values override earlier values.
     */
    function mergeBinaryOptions(a, b) {
        return Object.assign(Object.assign({}, a), b);
    }
    /**
     * Protobuf binary format wire types.
     *
     * A wire type provides just enough information to find the length of the
     * following value.
     *
     * See https://developers.google.com/protocol-buffers/docs/encoding#structure
     */
    var WireType;
    (function (WireType) {
        /**
         * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
         */
        WireType[WireType["Varint"] = 0] = "Varint";
        /**
         * Used for fixed64, sfixed64, double.
         * Always 8 bytes with little-endian byte order.
         */
        WireType[WireType["Bit64"] = 1] = "Bit64";
        /**
         * Used for string, bytes, embedded messages, packed repeated fields
         *
         * Only repeated numeric types (types which use the varint, 32-bit,
         * or 64-bit wire types) can be packed. In proto3, such fields are
         * packed by default.
         */
        WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
        /**
         * Used for groups
         * @deprecated
         */
        WireType[WireType["StartGroup"] = 3] = "StartGroup";
        /**
         * Used for groups
         * @deprecated
         */
        WireType[WireType["EndGroup"] = 4] = "EndGroup";
        /**
         * Used for fixed32, sfixed32, float.
         * Always 4 bytes with little-endian byte order.
         */
        WireType[WireType["Bit32"] = 5] = "Bit32";
    })(WireType || (WireType = {}));

    // Copyright 2008 Google Inc.  All rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are
    // met:
    //
    // * Redistributions of source code must retain the above copyright
    // notice, this list of conditions and the following disclaimer.
    // * Redistributions in binary form must reproduce the above
    // copyright notice, this list of conditions and the following disclaimer
    // in the documentation and/or other materials provided with the
    // distribution.
    // * Neither the name of Google Inc. nor the names of its
    // contributors may be used to endorse or promote products derived from
    // this software without specific prior written permission.
    //
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    //
    // Code generated by the Protocol Buffer compiler is owned by the owner
    // of the input file used when generating it.  This code is not
    // standalone and requires a support library to be linked with it.  This
    // support library is itself covered by the above license.
    /**
     * Read a 64 bit varint as two JS numbers.
     *
     * Returns tuple:
     * [0]: low bits
     * [0]: high bits
     *
     * Copyright 2008 Google Inc.  All rights reserved.
     *
     * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
     */
    function varint64read() {
        let lowBits = 0;
        let highBits = 0;
        for (let shift = 0; shift < 28; shift += 7) {
            let b = this.buf[this.pos++];
            lowBits |= (b & 0x7F) << shift;
            if ((b & 0x80) == 0) {
                this.assertBounds();
                return [lowBits, highBits];
            }
        }
        let middleByte = this.buf[this.pos++];
        // last four bits of the first 32 bit number
        lowBits |= (middleByte & 0x0F) << 28;
        // 3 upper bits are part of the next 32 bit number
        highBits = (middleByte & 0x70) >> 4;
        if ((middleByte & 0x80) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
        for (let shift = 3; shift <= 31; shift += 7) {
            let b = this.buf[this.pos++];
            highBits |= (b & 0x7F) << shift;
            if ((b & 0x80) == 0) {
                this.assertBounds();
                return [lowBits, highBits];
            }
        }
        throw new Error('invalid varint');
    }
    /**
     * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
     *
     * Copyright 2008 Google Inc.  All rights reserved.
     *
     * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
     */
    function varint64write(lo, hi, bytes) {
        for (let i = 0; i < 28; i = i + 7) {
            const shift = lo >>> i;
            const hasNext = !((shift >>> 7) == 0 && hi == 0);
            const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;
            bytes.push(byte);
            if (!hasNext) {
                return;
            }
        }
        const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);
        const hasMoreBits = !((hi >> 3) == 0);
        bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);
        if (!hasMoreBits) {
            return;
        }
        for (let i = 3; i < 31; i = i + 7) {
            const shift = hi >>> i;
            const hasNext = !((shift >>> 7) == 0);
            const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;
            bytes.push(byte);
            if (!hasNext) {
                return;
            }
        }
        bytes.push((hi >>> 31) & 0x01);
    }
    // constants for binary math
    const TWO_PWR_32_DBL$1 = (1 << 16) * (1 << 16);
    /**
     * Parse decimal string of 64 bit integer value as two JS numbers.
     *
     * Returns tuple:
     * [0]: minus sign?
     * [1]: low bits
     * [2]: high bits
     *
     * Copyright 2008 Google Inc.
     */
    function int64fromString(dec) {
        // Check for minus sign.
        let minus = dec[0] == '-';
        if (minus)
            dec = dec.slice(1);
        // Work 6 decimal digits at a time, acting like we're converting base 1e6
        // digits to binary. This is safe to do with floating point math because
        // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
        const base = 1e6;
        let lowBits = 0;
        let highBits = 0;
        function add1e6digit(begin, end) {
            // Note: Number('') is 0.
            const digit1e6 = Number(dec.slice(begin, end));
            highBits *= base;
            lowBits = lowBits * base + digit1e6;
            // Carry bits from lowBits to highBits
            if (lowBits >= TWO_PWR_32_DBL$1) {
                highBits = highBits + ((lowBits / TWO_PWR_32_DBL$1) | 0);
                lowBits = lowBits % TWO_PWR_32_DBL$1;
            }
        }
        add1e6digit(-24, -18);
        add1e6digit(-18, -12);
        add1e6digit(-12, -6);
        add1e6digit(-6);
        return [minus, lowBits, highBits];
    }
    /**
     * Format 64 bit integer value (as two JS numbers) to decimal string.
     *
     * Copyright 2008 Google Inc.
     */
    function int64toString(bitsLow, bitsHigh) {
        // Skip the expensive conversion if the number is small enough to use the
        // built-in conversions.
        if ((bitsHigh >>> 0) <= 0x1FFFFF) {
            return '' + (TWO_PWR_32_DBL$1 * bitsHigh + (bitsLow >>> 0));
        }
        // What this code is doing is essentially converting the input number from
        // base-2 to base-1e7, which allows us to represent the 64-bit range with
        // only 3 (very large) digits. Those digits are then trivial to convert to
        // a base-10 string.
        // The magic numbers used here are -
        // 2^24 = 16777216 = (1,6777216) in base-1e7.
        // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
        // Split 32:32 representation into 16:24:24 representation so our
        // intermediate digits don't overflow.
        let low = bitsLow & 0xFFFFFF;
        let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;
        let high = (bitsHigh >> 16) & 0xFFFF;
        // Assemble our three base-1e7 digits, ignoring carries. The maximum
        // value in a digit at this step is representable as a 48-bit integer, which
        // can be stored in a 64-bit floating point number.
        let digitA = low + (mid * 6777216) + (high * 6710656);
        let digitB = mid + (high * 8147497);
        let digitC = (high * 2);
        // Apply carries from A to B and from B to C.
        let base = 10000000;
        if (digitA >= base) {
            digitB += Math.floor(digitA / base);
            digitA %= base;
        }
        if (digitB >= base) {
            digitC += Math.floor(digitB / base);
            digitB %= base;
        }
        // Convert base-1e7 digits to base-10, with optional leading zeroes.
        function decimalFrom1e7(digit1e7, needLeadingZeros) {
            let partial = digit1e7 ? String(digit1e7) : '';
            if (needLeadingZeros) {
                return '0000000'.slice(partial.length) + partial;
            }
            return partial;
        }
        return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +
            decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +
            // If the final 1e7 digit didn't need leading zeros, we would have
            // returned via the trivial code path at the top.
            decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);
    }
    /**
     * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
     *
     * Copyright 2008 Google Inc.  All rights reserved.
     *
     * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
     */
    function varint32write(value, bytes) {
        if (value >= 0) {
            // write value as varint 32
            while (value > 0x7f) {
                bytes.push((value & 0x7f) | 0x80);
                value = value >>> 7;
            }
            bytes.push(value);
        }
        else {
            for (let i = 0; i < 9; i++) {
                bytes.push(value & 127 | 128);
                value = value >> 7;
            }
            bytes.push(1);
        }
    }
    /**
     * Read an unsigned 32 bit varint.
     *
     * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
     */
    function varint32read() {
        let b = this.buf[this.pos++];
        let result = b & 0x7F;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return result;
        }
        b = this.buf[this.pos++];
        result |= (b & 0x7F) << 7;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return result;
        }
        b = this.buf[this.pos++];
        result |= (b & 0x7F) << 14;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return result;
        }
        b = this.buf[this.pos++];
        result |= (b & 0x7F) << 21;
        if ((b & 0x80) == 0) {
            this.assertBounds();
            return result;
        }
        // Extract only last 4 bits
        b = this.buf[this.pos++];
        result |= (b & 0x0F) << 28;
        for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)
            b = this.buf[this.pos++];
        if ((b & 0x80) != 0)
            throw new Error('invalid varint');
        this.assertBounds();
        // Result can have 32 bits, convert it to unsigned
        return result >>> 0;
    }

    let BI;
    function detectBi() {
        const dv = new DataView(new ArrayBuffer(8));
        const ok = globalThis.BigInt !== undefined
            && typeof dv.getBigInt64 === "function"
            && typeof dv.getBigUint64 === "function"
            && typeof dv.setBigInt64 === "function"
            && typeof dv.setBigUint64 === "function";
        BI = ok ? {
            MIN: BigInt("-9223372036854775808"),
            MAX: BigInt("9223372036854775807"),
            UMIN: BigInt("0"),
            UMAX: BigInt("18446744073709551615"),
            C: BigInt,
            V: dv,
        } : undefined;
    }
    detectBi();
    function assertBi(bi) {
        if (!bi)
            throw new Error("BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support");
    }
    // used to validate from(string) input (when bigint is unavailable)
    const RE_DECIMAL_STR = /^-?[0-9]+$/;
    // constants for binary math
    const TWO_PWR_32_DBL = 0x100000000;
    const HALF_2_PWR_32 = 0x080000000;
    // base class for PbLong and PbULong provides shared code
    class SharedPbLong {
        /**
         * Create a new instance with the given bits.
         */
        constructor(lo, hi) {
            this.lo = lo | 0;
            this.hi = hi | 0;
        }
        /**
         * Is this instance equal to 0?
         */
        isZero() {
            return this.lo == 0 && this.hi == 0;
        }
        /**
         * Convert to a native number.
         */
        toNumber() {
            let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);
            if (!Number.isSafeInteger(result))
                throw new Error("cannot convert to safe number");
            return result;
        }
    }
    /**
     * 64-bit unsigned integer as two 32-bit values.
     * Converts between `string`, `number` and `bigint` representations.
     */
    class PbULong extends SharedPbLong {
        /**
         * Create instance from a `string`, `number` or `bigint`.
         */
        static from(value) {
            if (BI)
                // noinspection FallThroughInSwitchStatementJS
                switch (typeof value) {
                    case "string":
                        if (value == "0")
                            return this.ZERO;
                        if (value == "")
                            throw new Error('string is no integer');
                        value = BI.C(value);
                    case "number":
                        if (value === 0)
                            return this.ZERO;
                        value = BI.C(value);
                    case "bigint":
                        if (!value)
                            return this.ZERO;
                        if (value < BI.UMIN)
                            throw new Error('signed value for ulong');
                        if (value > BI.UMAX)
                            throw new Error('ulong too large');
                        BI.V.setBigUint64(0, value, true);
                        return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
                }
            else
                switch (typeof value) {
                    case "string":
                        if (value == "0")
                            return this.ZERO;
                        value = value.trim();
                        if (!RE_DECIMAL_STR.test(value))
                            throw new Error('string is no integer');
                        let [minus, lo, hi] = int64fromString(value);
                        if (minus)
                            throw new Error('signed value for ulong');
                        return new PbULong(lo, hi);
                    case "number":
                        if (value == 0)
                            return this.ZERO;
                        if (!Number.isSafeInteger(value))
                            throw new Error('number is no integer');
                        if (value < 0)
                            throw new Error('signed value for ulong');
                        return new PbULong(value, value / TWO_PWR_32_DBL);
                }
            throw new Error('unknown value ' + typeof value);
        }
        /**
         * Convert to decimal string.
         */
        toString() {
            return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);
        }
        /**
         * Convert to native bigint.
         */
        toBigInt() {
            assertBi(BI);
            BI.V.setInt32(0, this.lo, true);
            BI.V.setInt32(4, this.hi, true);
            return BI.V.getBigUint64(0, true);
        }
    }
    /**
     * ulong 0 singleton.
     */
    PbULong.ZERO = new PbULong(0, 0);
    /**
     * 64-bit signed integer as two 32-bit values.
     * Converts between `string`, `number` and `bigint` representations.
     */
    class PbLong extends SharedPbLong {
        /**
         * Create instance from a `string`, `number` or `bigint`.
         */
        static from(value) {
            if (BI)
                // noinspection FallThroughInSwitchStatementJS
                switch (typeof value) {
                    case "string":
                        if (value == "0")
                            return this.ZERO;
                        if (value == "")
                            throw new Error('string is no integer');
                        value = BI.C(value);
                    case "number":
                        if (value === 0)
                            return this.ZERO;
                        value = BI.C(value);
                    case "bigint":
                        if (!value)
                            return this.ZERO;
                        if (value < BI.MIN)
                            throw new Error('signed long too small');
                        if (value > BI.MAX)
                            throw new Error('signed long too large');
                        BI.V.setBigInt64(0, value, true);
                        return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
                }
            else
                switch (typeof value) {
                    case "string":
                        if (value == "0")
                            return this.ZERO;
                        value = value.trim();
                        if (!RE_DECIMAL_STR.test(value))
                            throw new Error('string is no integer');
                        let [minus, lo, hi] = int64fromString(value);
                        if (minus) {
                            if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))
                                throw new Error('signed long too small');
                        }
                        else if (hi >= HALF_2_PWR_32)
                            throw new Error('signed long too large');
                        let pbl = new PbLong(lo, hi);
                        return minus ? pbl.negate() : pbl;
                    case "number":
                        if (value == 0)
                            return this.ZERO;
                        if (!Number.isSafeInteger(value))
                            throw new Error('number is no integer');
                        return value > 0
                            ? new PbLong(value, value / TWO_PWR_32_DBL)
                            : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();
                }
            throw new Error('unknown value ' + typeof value);
        }
        /**
         * Do we have a minus sign?
         */
        isNegative() {
            return (this.hi & HALF_2_PWR_32) !== 0;
        }
        /**
         * Negate two's complement.
         * Invert all the bits and add one to the result.
         */
        negate() {
            let hi = ~this.hi, lo = this.lo;
            if (lo)
                lo = ~lo + 1;
            else
                hi += 1;
            return new PbLong(lo, hi);
        }
        /**
         * Convert to decimal string.
         */
        toString() {
            if (BI)
                return this.toBigInt().toString();
            if (this.isNegative()) {
                let n = this.negate();
                return '-' + int64toString(n.lo, n.hi);
            }
            return int64toString(this.lo, this.hi);
        }
        /**
         * Convert to native bigint.
         */
        toBigInt() {
            assertBi(BI);
            BI.V.setInt32(0, this.lo, true);
            BI.V.setInt32(4, this.hi, true);
            return BI.V.getBigInt64(0, true);
        }
    }
    /**
     * long 0 singleton.
     */
    PbLong.ZERO = new PbLong(0, 0);

    const defaultsRead$1 = {
        readUnknownField: true,
        readerFactory: bytes => new BinaryReader(bytes),
    };
    /**
     * Make options for reading binary data form partial options.
     */
    function binaryReadOptions(options) {
        return options ? Object.assign(Object.assign({}, defaultsRead$1), options) : defaultsRead$1;
    }
    class BinaryReader {
        constructor(buf, textDecoder) {
            this.varint64 = varint64read; // dirty cast for `this`
            /**
             * Read a `uint32` field, an unsigned 32 bit varint.
             */
            this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`
            this.buf = buf;
            this.len = buf.length;
            this.pos = 0;
            this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
            this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder("utf-8", {
                fatal: true,
                ignoreBOM: true,
            });
        }
        /**
         * Reads a tag - field number and wire type.
         */
        tag() {
            let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
            if (fieldNo <= 0 || wireType < 0 || wireType > 5)
                throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
            return [fieldNo, wireType];
        }
        /**
         * Skip one element on the wire and return the skipped data.
         * Supports WireType.StartGroup since v2.0.0-alpha.23.
         */
        skip(wireType) {
            let start = this.pos;
            // noinspection FallThroughInSwitchStatementJS
            switch (wireType) {
                case WireType.Varint:
                    while (this.buf[this.pos++] & 0x80) {
                        // ignore
                    }
                    break;
                case WireType.Bit64:
                    this.pos += 4;
                case WireType.Bit32:
                    this.pos += 4;
                    break;
                case WireType.LengthDelimited:
                    let len = this.uint32();
                    this.pos += len;
                    break;
                case WireType.StartGroup:
                    // From descriptor.proto: Group type is deprecated, not supported in proto3.
                    // But we must still be able to parse and treat as unknown.
                    let t;
                    while ((t = this.tag()[1]) !== WireType.EndGroup) {
                        this.skip(t);
                    }
                    break;
                default:
                    throw new Error("cant skip wire type " + wireType);
            }
            this.assertBounds();
            return this.buf.subarray(start, this.pos);
        }
        /**
         * Throws error if position in byte array is out of range.
         */
        assertBounds() {
            if (this.pos > this.len)
                throw new RangeError("premature EOF");
        }
        /**
         * Read a `int32` field, a signed 32 bit varint.
         */
        int32() {
            return this.uint32() | 0;
        }
        /**
         * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
         */
        sint32() {
            let zze = this.uint32();
            // decode zigzag
            return (zze >>> 1) ^ -(zze & 1);
        }
        /**
         * Read a `int64` field, a signed 64-bit varint.
         */
        int64() {
            return new PbLong(...this.varint64());
        }
        /**
         * Read a `uint64` field, an unsigned 64-bit varint.
         */
        uint64() {
            return new PbULong(...this.varint64());
        }
        /**
         * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
         */
        sint64() {
            let [lo, hi] = this.varint64();
            // decode zig zag
            let s = -(lo & 1);
            lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);
            hi = (hi >>> 1 ^ s);
            return new PbLong(lo, hi);
        }
        /**
         * Read a `bool` field, a variant.
         */
        bool() {
            let [lo, hi] = this.varint64();
            return lo !== 0 || hi !== 0;
        }
        /**
         * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
         */
        fixed32() {
            return this.view.getUint32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
         */
        sfixed32() {
            return this.view.getInt32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
         */
        fixed64() {
            return new PbULong(this.sfixed32(), this.sfixed32());
        }
        /**
         * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
         */
        sfixed64() {
            return new PbLong(this.sfixed32(), this.sfixed32());
        }
        /**
         * Read a `float` field, 32-bit floating point number.
         */
        float() {
            return this.view.getFloat32((this.pos += 4) - 4, true);
        }
        /**
         * Read a `double` field, a 64-bit floating point number.
         */
        double() {
            return this.view.getFloat64((this.pos += 8) - 8, true);
        }
        /**
         * Read a `bytes` field, length-delimited arbitrary data.
         */
        bytes() {
            let len = this.uint32();
            let start = this.pos;
            this.pos += len;
            this.assertBounds();
            return this.buf.subarray(start, start + len);
        }
        /**
         * Read a `string` field, length-delimited data converted to UTF-8 text.
         */
        string() {
            return this.textDecoder.decode(this.bytes());
        }
    }

    /**
     * assert that condition is true or throw error (with message)
     */
    function assert(condition, msg) {
        if (!condition) {
            throw new Error(msg);
        }
    }
    /**
     * assert that value cannot exist = type `never`. throw runtime error if it does.
     */
    function assertNever(value, msg) {
        throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);
    }
    const FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;
    function assertInt32(arg) {
        if (typeof arg !== "number")
            throw new Error('invalid int 32: ' + typeof arg);
        if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
            throw new Error('invalid int 32: ' + arg);
    }
    function assertUInt32(arg) {
        if (typeof arg !== "number")
            throw new Error('invalid uint 32: ' + typeof arg);
        if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
            throw new Error('invalid uint 32: ' + arg);
    }
    function assertFloat32(arg) {
        if (typeof arg !== "number")
            throw new Error('invalid float 32: ' + typeof arg);
        if (!Number.isFinite(arg))
            return;
        if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
            throw new Error('invalid float 32: ' + arg);
    }

    const defaultsWrite$1 = {
        writeUnknownFields: true,
        writerFactory: () => new BinaryWriter(),
    };
    /**
     * Make options for writing binary data form partial options.
     */
    function binaryWriteOptions(options) {
        return options ? Object.assign(Object.assign({}, defaultsWrite$1), options) : defaultsWrite$1;
    }
    class BinaryWriter {
        constructor(textEncoder) {
            /**
             * Previous fork states.
             */
            this.stack = [];
            this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
            this.chunks = [];
            this.buf = [];
        }
        /**
         * Return all bytes written and reset this writer.
         */
        finish() {
            this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
            let len = 0;
            for (let i = 0; i < this.chunks.length; i++)
                len += this.chunks[i].length;
            let bytes = new Uint8Array(len);
            let offset = 0;
            for (let i = 0; i < this.chunks.length; i++) {
                bytes.set(this.chunks[i], offset);
                offset += this.chunks[i].length;
            }
            this.chunks = [];
            return bytes;
        }
        /**
         * Start a new fork for length-delimited data like a message
         * or a packed repeated field.
         *
         * Must be joined later with `join()`.
         */
        fork() {
            this.stack.push({ chunks: this.chunks, buf: this.buf });
            this.chunks = [];
            this.buf = [];
            return this;
        }
        /**
         * Join the last fork. Write its length and bytes, then
         * return to the previous state.
         */
        join() {
            // get chunk of fork
            let chunk = this.finish();
            // restore previous state
            let prev = this.stack.pop();
            if (!prev)
                throw new Error('invalid state, fork stack empty');
            this.chunks = prev.chunks;
            this.buf = prev.buf;
            // write length of chunk as varint
            this.uint32(chunk.byteLength);
            return this.raw(chunk);
        }
        /**
         * Writes a tag (field number and wire type).
         *
         * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
         *
         * Generated code should compute the tag ahead of time and call `uint32()`.
         */
        tag(fieldNo, type) {
            return this.uint32((fieldNo << 3 | type) >>> 0);
        }
        /**
         * Write a chunk of raw bytes.
         */
        raw(chunk) {
            if (this.buf.length) {
                this.chunks.push(new Uint8Array(this.buf));
                this.buf = [];
            }
            this.chunks.push(chunk);
            return this;
        }
        /**
         * Write a `uint32` value, an unsigned 32 bit varint.
         */
        uint32(value) {
            assertUInt32(value);
            // write value as varint 32, inlined for speed
            while (value > 0x7f) {
                this.buf.push((value & 0x7f) | 0x80);
                value = value >>> 7;
            }
            this.buf.push(value);
            return this;
        }
        /**
         * Write a `int32` value, a signed 32 bit varint.
         */
        int32(value) {
            assertInt32(value);
            varint32write(value, this.buf);
            return this;
        }
        /**
         * Write a `bool` value, a variant.
         */
        bool(value) {
            this.buf.push(value ? 1 : 0);
            return this;
        }
        /**
         * Write a `bytes` value, length-delimited arbitrary data.
         */
        bytes(value) {
            this.uint32(value.byteLength); // write length of chunk as varint
            return this.raw(value);
        }
        /**
         * Write a `string` value, length-delimited data converted to UTF-8 text.
         */
        string(value) {
            let chunk = this.textEncoder.encode(value);
            this.uint32(chunk.byteLength); // write length of chunk as varint
            return this.raw(chunk);
        }
        /**
         * Write a `float` value, 32-bit floating point number.
         */
        float(value) {
            assertFloat32(value);
            let chunk = new Uint8Array(4);
            new DataView(chunk.buffer).setFloat32(0, value, true);
            return this.raw(chunk);
        }
        /**
         * Write a `double` value, a 64-bit floating point number.
         */
        double(value) {
            let chunk = new Uint8Array(8);
            new DataView(chunk.buffer).setFloat64(0, value, true);
            return this.raw(chunk);
        }
        /**
         * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
         */
        fixed32(value) {
            assertUInt32(value);
            let chunk = new Uint8Array(4);
            new DataView(chunk.buffer).setUint32(0, value, true);
            return this.raw(chunk);
        }
        /**
         * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
         */
        sfixed32(value) {
            assertInt32(value);
            let chunk = new Uint8Array(4);
            new DataView(chunk.buffer).setInt32(0, value, true);
            return this.raw(chunk);
        }
        /**
         * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
         */
        sint32(value) {
            assertInt32(value);
            // zigzag encode
            value = ((value << 1) ^ (value >> 31)) >>> 0;
            varint32write(value, this.buf);
            return this;
        }
        /**
         * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
         */
        sfixed64(value) {
            let chunk = new Uint8Array(8);
            let view = new DataView(chunk.buffer);
            let long = PbLong.from(value);
            view.setInt32(0, long.lo, true);
            view.setInt32(4, long.hi, true);
            return this.raw(chunk);
        }
        /**
         * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
         */
        fixed64(value) {
            let chunk = new Uint8Array(8);
            let view = new DataView(chunk.buffer);
            let long = PbULong.from(value);
            view.setInt32(0, long.lo, true);
            view.setInt32(4, long.hi, true);
            return this.raw(chunk);
        }
        /**
         * Write a `int64` value, a signed 64-bit varint.
         */
        int64(value) {
            let long = PbLong.from(value);
            varint64write(long.lo, long.hi, this.buf);
            return this;
        }
        /**
         * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
         */
        sint64(value) {
            let long = PbLong.from(value), 
            // zigzag encode
            sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;
            varint64write(lo, hi, this.buf);
            return this;
        }
        /**
         * Write a `uint64` value, an unsigned 64-bit varint.
         */
        uint64(value) {
            let long = PbULong.from(value);
            varint64write(long.lo, long.hi, this.buf);
            return this;
        }
    }

    const defaultsWrite = {
        emitDefaultValues: false,
        enumAsInteger: false,
        useProtoFieldName: false,
        prettySpaces: 0,
    }, defaultsRead = {
        ignoreUnknownFields: false,
    };
    /**
     * Make options for reading JSON data from partial options.
     */
    function jsonReadOptions(options) {
        return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;
    }
    /**
     * Make options for writing JSON data from partial options.
     */
    function jsonWriteOptions(options) {
        return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;
    }
    /**
     * Merges JSON write or read options. Later values override earlier values. Type registries are merged.
     */
    function mergeJsonOptions(a, b) {
        var _a, _b;
        let c = Object.assign(Object.assign({}, a), b);
        c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];
        return c;
    }

    /**
     * The symbol used as a key on message objects to store the message type.
     *
     * Note that this is an experimental feature - it is here to stay, but
     * implementation details may change without notice.
     */
    const MESSAGE_TYPE = Symbol.for("protobuf-ts/message-type");

    /**
     * Converts snake_case to lowerCamelCase.
     *
     * Should behave like protoc:
     * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118
     */
    function lowerCamelCase(snakeCase) {
        let capNext = false;
        const sb = [];
        for (let i = 0; i < snakeCase.length; i++) {
            let next = snakeCase.charAt(i);
            if (next == '_') {
                capNext = true;
            }
            else if (/\d/.test(next)) {
                sb.push(next);
                capNext = true;
            }
            else if (capNext) {
                sb.push(next.toUpperCase());
                capNext = false;
            }
            else if (i == 0) {
                sb.push(next.toLowerCase());
            }
            else {
                sb.push(next);
            }
        }
        return sb.join('');
    }

    /**
     * Scalar value types. This is a subset of field types declared by protobuf
     * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE
     * are omitted, but the numerical values are identical.
     */
    var ScalarType;
    (function (ScalarType) {
        // 0 is reserved for errors.
        // Order is weird for historical reasons.
        ScalarType[ScalarType["DOUBLE"] = 1] = "DOUBLE";
        ScalarType[ScalarType["FLOAT"] = 2] = "FLOAT";
        // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
        // negative values are likely.
        ScalarType[ScalarType["INT64"] = 3] = "INT64";
        ScalarType[ScalarType["UINT64"] = 4] = "UINT64";
        // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
        // negative values are likely.
        ScalarType[ScalarType["INT32"] = 5] = "INT32";
        ScalarType[ScalarType["FIXED64"] = 6] = "FIXED64";
        ScalarType[ScalarType["FIXED32"] = 7] = "FIXED32";
        ScalarType[ScalarType["BOOL"] = 8] = "BOOL";
        ScalarType[ScalarType["STRING"] = 9] = "STRING";
        // Tag-delimited aggregate.
        // Group type is deprecated and not supported in proto3. However, Proto3
        // implementations should still be able to parse the group wire format and
        // treat group fields as unknown fields.
        // TYPE_GROUP = 10,
        // TYPE_MESSAGE = 11,  // Length-delimited aggregate.
        // New in version 2.
        ScalarType[ScalarType["BYTES"] = 12] = "BYTES";
        ScalarType[ScalarType["UINT32"] = 13] = "UINT32";
        // TYPE_ENUM = 14,
        ScalarType[ScalarType["SFIXED32"] = 15] = "SFIXED32";
        ScalarType[ScalarType["SFIXED64"] = 16] = "SFIXED64";
        ScalarType[ScalarType["SINT32"] = 17] = "SINT32";
        ScalarType[ScalarType["SINT64"] = 18] = "SINT64";
    })(ScalarType || (ScalarType = {}));
    /**
     * JavaScript representation of 64 bit integral types. Equivalent to the
     * field option "jstype".
     *
     * By default, protobuf-ts represents 64 bit types as `bigint`.
     *
     * You can change the default behaviour by enabling the plugin parameter
     * `long_type_string`, which will represent 64 bit types as `string`.
     *
     * Alternatively, you can change the behaviour for individual fields
     * with the field option "jstype":
     *
     * ```protobuf
     * uint64 my_field = 1 [jstype = JS_STRING];
     * uint64 other_field = 2 [jstype = JS_NUMBER];
     * ```
     */
    var LongType;
    (function (LongType) {
        /**
         * Use JavaScript `bigint`.
         *
         * Field option `[jstype = JS_NORMAL]`.
         */
        LongType[LongType["BIGINT"] = 0] = "BIGINT";
        /**
         * Use JavaScript `string`.
         *
         * Field option `[jstype = JS_STRING]`.
         */
        LongType[LongType["STRING"] = 1] = "STRING";
        /**
         * Use JavaScript `number`.
         *
         * Large values will loose precision.
         *
         * Field option `[jstype = JS_NUMBER]`.
         */
        LongType[LongType["NUMBER"] = 2] = "NUMBER";
    })(LongType || (LongType = {}));
    /**
     * Protobuf 2.1.0 introduced packed repeated fields.
     * Setting the field option `[packed = true]` enables packing.
     *
     * In proto3, all repeated fields are packed by default.
     * Setting the field option `[packed = false]` disables packing.
     *
     * Packed repeated fields are encoded with a single tag,
     * then a length-delimiter, then the element values.
     *
     * Unpacked repeated fields are encoded with a tag and
     * value for each element.
     *
     * `bytes` and `string` cannot be packed.
     */
    var RepeatType;
    (function (RepeatType) {
        /**
         * The field is not repeated.
         */
        RepeatType[RepeatType["NO"] = 0] = "NO";
        /**
         * The field is repeated and should be packed.
         * Invalid for `bytes` and `string`, they cannot be packed.
         */
        RepeatType[RepeatType["PACKED"] = 1] = "PACKED";
        /**
         * The field is repeated but should not be packed.
         * The only valid repeat type for repeated `bytes` and `string`.
         */
        RepeatType[RepeatType["UNPACKED"] = 2] = "UNPACKED";
    })(RepeatType || (RepeatType = {}));
    /**
     * Turns PartialFieldInfo into FieldInfo.
     */
    function normalizeFieldInfo(field) {
        var _a, _b, _c, _d;
        field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);
        field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);
        field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;
        field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == "message");
        return field;
    }

    /**
     * Is the given value a valid oneof group?
     *
     * We represent protobuf `oneof` as algebraic data types (ADT) in generated
     * code. But when working with messages of unknown type, the ADT does not
     * help us.
     *
     * This type guard checks if the given object adheres to the ADT rules, which
     * are as follows:
     *
     * 1) Must be an object.
     *
     * 2) Must have a "oneofKind" discriminator property.
     *
     * 3) If "oneofKind" is `undefined`, no member field is selected. The object
     * must not have any other properties.
     *
     * 4) If "oneofKind" is a `string`, the member field with this name is
     * selected.
     *
     * 5) If a member field is selected, the object must have a second property
     * with this name. The property must not be `undefined`.
     *
     * 6) No extra properties are allowed. The object has either one property
     * (no selection) or two properties (selection).
     *
     */
    function isOneofGroup(any) {
        if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {
            return false;
        }
        switch (typeof any.oneofKind) {
            case "string":
                if (any[any.oneofKind] === undefined)
                    return false;
                return Object.keys(any).length == 2;
            case "undefined":
                return Object.keys(any).length == 1;
            default:
                return false;
        }
    }

    // noinspection JSMethodCanBeStatic
    class ReflectionTypeCheck {
        constructor(info) {
            var _a;
            this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];
        }
        prepare() {
            if (this.data)
                return;
            const req = [], known = [], oneofs = [];
            for (let field of this.fields) {
                if (field.oneof) {
                    if (!oneofs.includes(field.oneof)) {
                        oneofs.push(field.oneof);
                        req.push(field.oneof);
                        known.push(field.oneof);
                    }
                }
                else {
                    known.push(field.localName);
                    switch (field.kind) {
                        case "scalar":
                        case "enum":
                            if (!field.opt || field.repeat)
                                req.push(field.localName);
                            break;
                        case "message":
                            if (field.repeat)
                                req.push(field.localName);
                            break;
                        case "map":
                            req.push(field.localName);
                            break;
                    }
                }
            }
            this.data = { req, known, oneofs: Object.values(oneofs) };
        }
        /**
         * Is the argument a valid message as specified by the
         * reflection information?
         *
         * Checks all field types recursively. The `depth`
         * specifies how deep into the structure the check will be.
         *
         * With a depth of 0, only the presence of fields
         * is checked.
         *
         * With a depth of 1 or more, the field types are checked.
         *
         * With a depth of 2 or more, the members of map, repeated
         * and message fields are checked.
         *
         * Message fields will be checked recursively with depth - 1.
         *
         * The number of map entries / repeated values being checked
         * is < depth.
         */
        is(message, depth, allowExcessProperties = false) {
            if (depth < 0)
                return true;
            if (message === null || message === undefined || typeof message != 'object')
                return false;
            this.prepare();
            let keys = Object.keys(message), data = this.data;
            // if a required field is missing in arg, this cannot be a T
            if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))
                return false;
            if (!allowExcessProperties) {
                // if the arg contains a key we dont know, this is not a literal T
                if (keys.some(k => !data.known.includes(k)))
                    return false;
            }
            // "With a depth of 0, only the presence and absence of fields is checked."
            // "With a depth of 1 or more, the field types are checked."
            if (depth < 1) {
                return true;
            }
            // check oneof group
            for (const name of data.oneofs) {
                const group = message[name];
                if (!isOneofGroup(group))
                    return false;
                if (group.oneofKind === undefined)
                    continue;
                const field = this.fields.find(f => f.localName === group.oneofKind);
                if (!field)
                    return false; // we found no field, but have a kind, something is wrong
                if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))
                    return false;
            }
            // check types
            for (const field of this.fields) {
                if (field.oneof !== undefined)
                    continue;
                if (!this.field(message[field.localName], field, allowExcessProperties, depth))
                    return false;
            }
            return true;
        }
        field(arg, field, allowExcessProperties, depth) {
            let repeated = field.repeat;
            switch (field.kind) {
                case "scalar":
                    if (arg === undefined)
                        return field.opt;
                    if (repeated)
                        return this.scalars(arg, field.T, depth, field.L);
                    return this.scalar(arg, field.T, field.L);
                case "enum":
                    if (arg === undefined)
                        return field.opt;
                    if (repeated)
                        return this.scalars(arg, ScalarType.INT32, depth);
                    return this.scalar(arg, ScalarType.INT32);
                case "message":
                    if (arg === undefined)
                        return true;
                    if (repeated)
                        return this.messages(arg, field.T(), allowExcessProperties, depth);
                    return this.message(arg, field.T(), allowExcessProperties, depth);
                case "map":
                    if (typeof arg != 'object' || arg === null)
                        return false;
                    if (depth < 2)
                        return true;
                    if (!this.mapKeys(arg, field.K, depth))
                        return false;
                    switch (field.V.kind) {
                        case "scalar":
                            return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);
                        case "enum":
                            return this.scalars(Object.values(arg), ScalarType.INT32, depth);
                        case "message":
                            return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);
                    }
                    break;
            }
            return true;
        }
        message(arg, type, allowExcessProperties, depth) {
            if (allowExcessProperties) {
                return type.isAssignable(arg, depth);
            }
            return type.is(arg, depth);
        }
        messages(arg, type, allowExcessProperties, depth) {
            if (!Array.isArray(arg))
                return false;
            if (depth < 2)
                return true;
            if (allowExcessProperties) {
                for (let i = 0; i < arg.length && i < depth; i++)
                    if (!type.isAssignable(arg[i], depth - 1))
                        return false;
            }
            else {
                for (let i = 0; i < arg.length && i < depth; i++)
                    if (!type.is(arg[i], depth - 1))
                        return false;
            }
            return true;
        }
        scalar(arg, type, longType) {
            let argType = typeof arg;
            switch (type) {
                case ScalarType.UINT64:
                case ScalarType.FIXED64:
                case ScalarType.INT64:
                case ScalarType.SFIXED64:
                case ScalarType.SINT64:
                    switch (longType) {
                        case LongType.BIGINT:
                            return argType == "bigint";
                        case LongType.NUMBER:
                            return argType == "number" && !isNaN(arg);
                        default:
                            return argType == "string";
                    }
                case ScalarType.BOOL:
                    return argType == 'boolean';
                case ScalarType.STRING:
                    return argType == 'string';
                case ScalarType.BYTES:
                    return arg instanceof Uint8Array;
                case ScalarType.DOUBLE:
                case ScalarType.FLOAT:
                    return argType == 'number' && !isNaN(arg);
                default:
                    // case ScalarType.UINT32:
                    // case ScalarType.FIXED32:
                    // case ScalarType.INT32:
                    // case ScalarType.SINT32:
                    // case ScalarType.SFIXED32:
                    return argType == 'number' && Number.isInteger(arg);
            }
        }
        scalars(arg, type, depth, longType) {
            if (!Array.isArray(arg))
                return false;
            if (depth < 2)
                return true;
            if (Array.isArray(arg))
                for (let i = 0; i < arg.length && i < depth; i++)
                    if (!this.scalar(arg[i], type, longType))
                        return false;
            return true;
        }
        mapKeys(map, type, depth) {
            let keys = Object.keys(map);
            switch (type) {
                case ScalarType.INT32:
                case ScalarType.FIXED32:
                case ScalarType.SFIXED32:
                case ScalarType.SINT32:
                case ScalarType.UINT32:
                    return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);
                case ScalarType.BOOL:
                    return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);
                default:
                    return this.scalars(keys, type, depth, LongType.STRING);
            }
        }
    }

    /**
     * Utility method to convert a PbLong or PbUlong to a JavaScript
     * representation during runtime.
     *
     * Works with generated field information, `undefined` is equivalent
     * to `STRING`.
     */
    function reflectionLongConvert(long, type) {
        switch (type) {
            case LongType.BIGINT:
                return long.toBigInt();
            case LongType.NUMBER:
                return long.toNumber();
            default:
                // case undefined:
                // case LongType.STRING:
                return long.toString();
        }
    }

    /**
     * Reads proto3 messages in canonical JSON format using reflection information.
     *
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     */
    class ReflectionJsonReader {
        constructor(info) {
            this.info = info;
        }
        prepare() {
            var _a;
            if (this.fMap === undefined) {
                this.fMap = {};
                const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];
                for (const field of fieldsInput) {
                    this.fMap[field.name] = field;
                    this.fMap[field.jsonName] = field;
                    this.fMap[field.localName] = field;
                }
            }
        }
        // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.
        assert(condition, fieldName, jsonValue) {
            if (!condition) {
                let what = typeofJsonValue(jsonValue);
                if (what == "number" || what == "boolean")
                    what = jsonValue.toString();
                throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);
            }
        }
        /**
         * Reads a message from canonical JSON format into the target message.
         *
         * Repeated fields are appended. Map entries are added, overwriting
         * existing keys.
         *
         * If a message field is already present, it will be merged with the
         * new data.
         */
        read(input, message, options) {
            this.prepare();
            const oneofsHandled = [];
            for (const [jsonKey, jsonValue] of Object.entries(input)) {
                const field = this.fMap[jsonKey];
                if (!field) {
                    if (!options.ignoreUnknownFields)
                        throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);
                    continue;
                }
                const localName = field.localName;
                // handle oneof ADT
                let target; // this will be the target for the field value, whether it is member of a oneof or not
                if (field.oneof) {
                    if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {
                        continue;
                    }
                    // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs
                    if (oneofsHandled.includes(field.oneof))
                        throw new Error(`Multiple members of the oneof group "${field.oneof}" of ${this.info.typeName} are present in JSON.`);
                    oneofsHandled.push(field.oneof);
                    target = message[field.oneof] = {
                        oneofKind: localName
                    };
                }
                else {
                    target = message;
                }
                // we have handled oneof above. we just have read the value into `target`.
                if (field.kind == 'map') {
                    if (jsonValue === null) {
                        continue;
                    }
                    // check input
                    this.assert(isJsonObject(jsonValue), field.name, jsonValue);
                    // our target to put map entries into
                    const fieldObj = target[localName];
                    // read entries
                    for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {
                        this.assert(jsonObjValue !== null, field.name + " map value", null);
                        // read value
                        let val;
                        switch (field.V.kind) {
                            case "message":
                                val = field.V.T().internalJsonRead(jsonObjValue, options);
                                break;
                            case "enum":
                                val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);
                                if (val === false)
                                    continue;
                                break;
                            case "scalar":
                                val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);
                                break;
                        }
                        this.assert(val !== undefined, field.name + " map value", jsonObjValue);
                        // read key
                        let key = jsonObjKey;
                        if (field.K == ScalarType.BOOL)
                            key = key == "true" ? true : key == "false" ? false : key;
                        key = this.scalar(key, field.K, LongType.STRING, field.name).toString();
                        fieldObj[key] = val;
                    }
                }
                else if (field.repeat) {
                    if (jsonValue === null)
                        continue;
                    // check input
                    this.assert(Array.isArray(jsonValue), field.name, jsonValue);
                    // our target to put array entries into
                    const fieldArr = target[localName];
                    // read array entries
                    for (const jsonItem of jsonValue) {
                        this.assert(jsonItem !== null, field.name, null);
                        let val;
                        switch (field.kind) {
                            case "message":
                                val = field.T().internalJsonRead(jsonItem, options);
                                break;
                            case "enum":
                                val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);
                                if (val === false)
                                    continue;
                                break;
                            case "scalar":
                                val = this.scalar(jsonItem, field.T, field.L, field.name);
                                break;
                        }
                        this.assert(val !== undefined, field.name, jsonValue);
                        fieldArr.push(val);
                    }
                }
                else {
                    switch (field.kind) {
                        case "message":
                            if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {
                                this.assert(field.oneof === undefined, field.name + " (oneof member)", null);
                                continue;
                            }
                            target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);
                            break;
                        case "enum":
                            let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);
                            if (val === false)
                                continue;
                            target[localName] = val;
                            break;
                        case "scalar":
                            target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);
                            break;
                    }
                }
            }
        }
        /**
         * Returns `false` for unrecognized string representations.
         *
         * google.protobuf.NullValue accepts only JSON `null` (or the old `"NULL_VALUE"`).
         */
        enum(type, json, fieldName, ignoreUnknownFields) {
            if (type[0] == 'google.protobuf.NullValue')
                assert(json === null || json === "NULL_VALUE", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);
            if (json === null)
                // we require 0 to be default value for all enums
                return 0;
            switch (typeof json) {
                case "number":
                    assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);
                    return json;
                case "string":
                    let localEnumName = json;
                    if (type[2] && json.substring(0, type[2].length) === type[2])
                        // lookup without the shared prefix
                        localEnumName = json.substring(type[2].length);
                    let enumNumber = type[1][localEnumName];
                    if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {
                        return false;
                    }
                    assert(typeof enumNumber == "number", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for "${json}".`);
                    return enumNumber;
            }
            assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}".`);
        }
        scalar(json, type, longType, fieldName) {
            let e;
            try {
                switch (type) {
                    // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
                    // Either numbers or strings are accepted. Exponent notation is also accepted.
                    case ScalarType.DOUBLE:
                    case ScalarType.FLOAT:
                        if (json === null)
                            return .0;
                        if (json === "NaN")
                            return Number.NaN;
                        if (json === "Infinity")
                            return Number.POSITIVE_INFINITY;
                        if (json === "-Infinity")
                            return Number.NEGATIVE_INFINITY;
                        if (json === "") {
                            e = "empty string";
                            break;
                        }
                        if (typeof json == "string" && json.trim().length !== json.length) {
                            e = "extra whitespace";
                            break;
                        }
                        if (typeof json != "string" && typeof json != "number") {
                            break;
                        }
                        let float = Number(json);
                        if (Number.isNaN(float)) {
                            e = "not a number";
                            break;
                        }
                        if (!Number.isFinite(float)) {
                            // infinity and -infinity are handled by string representation above, so this is an error
                            e = "too large or small";
                            break;
                        }
                        if (type == ScalarType.FLOAT)
                            assertFloat32(float);
                        return float;
                    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
                    case ScalarType.INT32:
                    case ScalarType.FIXED32:
                    case ScalarType.SFIXED32:
                    case ScalarType.SINT32:
                    case ScalarType.UINT32:
                        if (json === null)
                            return 0;
                        let int32;
                        if (typeof json == "number")
                            int32 = json;
                        else if (json === "")
                            e = "empty string";
                        else if (typeof json == "string") {
                            if (json.trim().length !== json.length)
                                e = "extra whitespace";
                            else
                                int32 = Number(json);
                        }
                        if (int32 === undefined)
                            break;
                        if (type == ScalarType.UINT32)
                            assertUInt32(int32);
                        else
                            assertInt32(int32);
                        return int32;
                    // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.
                    case ScalarType.INT64:
                    case ScalarType.SFIXED64:
                    case ScalarType.SINT64:
                        if (json === null)
                            return reflectionLongConvert(PbLong.ZERO, longType);
                        if (typeof json != "number" && typeof json != "string")
                            break;
                        return reflectionLongConvert(PbLong.from(json), longType);
                    case ScalarType.FIXED64:
                    case ScalarType.UINT64:
                        if (json === null)
                            return reflectionLongConvert(PbULong.ZERO, longType);
                        if (typeof json != "number" && typeof json != "string")
                            break;
                        return reflectionLongConvert(PbULong.from(json), longType);
                    // bool:
                    case ScalarType.BOOL:
                        if (json === null)
                            return false;
                        if (typeof json !== "boolean")
                            break;
                        return json;
                    // string:
                    case ScalarType.STRING:
                        if (json === null)
                            return "";
                        if (typeof json !== "string") {
                            e = "extra whitespace";
                            break;
                        }
                        try {
                            encodeURIComponent(json);
                        }
                        catch (e) {
                            e = "invalid UTF8";
                            break;
                        }
                        return json;
                    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
                    // Either standard or URL-safe base64 encoding with/without paddings are accepted.
                    case ScalarType.BYTES:
                        if (json === null || json === "")
                            return new Uint8Array(0);
                        if (typeof json !== 'string')
                            break;
                        return base64decode(json);
                }
            }
            catch (error) {
                e = error.message;
            }
            this.assert(false, fieldName + (e ? " - " + e : ""), json);
        }
    }

    /**
     * Writes proto3 messages in canonical JSON format using reflection
     * information.
     *
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     */
    class ReflectionJsonWriter {
        constructor(info) {
            var _a;
            this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];
        }
        /**
         * Converts the message to a JSON object, based on the field descriptors.
         */
        write(message, options) {
            const json = {}, source = message;
            for (const field of this.fields) {
                // field is not part of a oneof, simply write as is
                if (!field.oneof) {
                    let jsonValue = this.field(field, source[field.localName], options);
                    if (jsonValue !== undefined)
                        json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
                    continue;
                }
                // field is part of a oneof
                const group = source[field.oneof];
                if (group.oneofKind !== field.localName)
                    continue; // not selected, skip
                const opt = field.kind == 'scalar' || field.kind == 'enum'
                    ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;
                let jsonValue = this.field(field, group[field.localName], opt);
                assert(jsonValue !== undefined);
                json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
            }
            return json;
        }
        field(field, value, options) {
            let jsonValue = undefined;
            if (field.kind == 'map') {
                assert(typeof value == "object" && value !== null);
                const jsonObj = {};
                switch (field.V.kind) {
                    case "scalar":
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = this.scalar(field.V.T, entryValue, field.name, false, true);
                            assert(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "message":
                        const messageType = field.V.T();
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            const val = this.message(messageType, entryValue, field.name, options);
                            assert(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                    case "enum":
                        const enumInfo = field.V.T();
                        for (const [entryKey, entryValue] of Object.entries(value)) {
                            assert(entryValue === undefined || typeof entryValue == 'number');
                            const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);
                            assert(val !== undefined);
                            jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key
                        }
                        break;
                }
                if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)
                    jsonValue = jsonObj;
            }
            else if (field.repeat) {
                assert(Array.isArray(value));
                const jsonArr = [];
                switch (field.kind) {
                    case "scalar":
                        for (let i = 0; i < value.length; i++) {
                            const val = this.scalar(field.T, value[i], field.name, field.opt, true);
                            assert(val !== undefined);
                            jsonArr.push(val);
                        }
                        break;
                    case "enum":
                        const enumInfo = field.T();
                        for (let i = 0; i < value.length; i++) {
                            assert(value[i] === undefined || typeof value[i] == 'number');
                            const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);
                            assert(val !== undefined);
                            jsonArr.push(val);
                        }
                        break;
                    case "message":
                        const messageType = field.T();
                        for (let i = 0; i < value.length; i++) {
                            const val = this.message(messageType, value[i], field.name, options);
                            assert(val !== undefined);
                            jsonArr.push(val);
                        }
                        break;
                }
                // add converted array to json output
                if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)
                    jsonValue = jsonArr;
            }
            else {
                switch (field.kind) {
                    case "scalar":
                        jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);
                        break;
                    case "enum":
                        jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);
                        break;
                    case "message":
                        jsonValue = this.message(field.T(), value, field.name, options);
                        break;
                }
            }
            return jsonValue;
        }
        /**
         * Returns `null` as the default for google.protobuf.NullValue.
         */
        enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {
            if (type[0] == 'google.protobuf.NullValue')
                return !emitDefaultValues && !optional ? undefined : null;
            if (value === undefined) {
                assert(optional);
                return undefined;
            }
            if (value === 0 && !emitDefaultValues && !optional)
                // we require 0 to be default value for all enums
                return undefined;
            assert(typeof value == 'number');
            assert(Number.isInteger(value));
            if (enumAsInteger || !type[1].hasOwnProperty(value))
                // if we don't now the enum value, just return the number
                return value;
            if (type[2])
                // restore the dropped prefix
                return type[2] + type[1][value];
            return type[1][value];
        }
        message(type, value, fieldName, options) {
            if (value === undefined)
                return options.emitDefaultValues ? null : undefined;
            return type.internalJsonWrite(value, options);
        }
        scalar(type, value, fieldName, optional, emitDefaultValues) {
            if (value === undefined) {
                assert(optional);
                return undefined;
            }
            const ed = emitDefaultValues || optional;
            // noinspection FallThroughInSwitchStatementJS
            switch (type) {
                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
                case ScalarType.INT32:
                case ScalarType.SFIXED32:
                case ScalarType.SINT32:
                    if (value === 0)
                        return ed ? 0 : undefined;
                    assertInt32(value);
                    return value;
                case ScalarType.FIXED32:
                case ScalarType.UINT32:
                    if (value === 0)
                        return ed ? 0 : undefined;
                    assertUInt32(value);
                    return value;
                // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
                // Either numbers or strings are accepted. Exponent notation is also accepted.
                case ScalarType.FLOAT:
                    assertFloat32(value);
                case ScalarType.DOUBLE:
                    if (value === 0)
                        return ed ? 0 : undefined;
                    assert(typeof value == 'number');
                    if (Number.isNaN(value))
                        return 'NaN';
                    if (value === Number.POSITIVE_INFINITY)
                        return 'Infinity';
                    if (value === Number.NEGATIVE_INFINITY)
                        return '-Infinity';
                    return value;
                // string:
                case ScalarType.STRING:
                    if (value === "")
                        return ed ? '' : undefined;
                    assert(typeof value == 'string');
                    return value;
                // bool:
                case ScalarType.BOOL:
                    if (value === false)
                        return ed ? false : undefined;
                    assert(typeof value == 'boolean');
                    return value;
                // JSON value will be a decimal string. Either numbers or strings are accepted.
                case ScalarType.UINT64:
                case ScalarType.FIXED64:
                    assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');
                    let ulong = PbULong.from(value);
                    if (ulong.isZero() && !ed)
                        return undefined;
                    return ulong.toString();
                // JSON value will be a decimal string. Either numbers or strings are accepted.
                case ScalarType.INT64:
                case ScalarType.SFIXED64:
                case ScalarType.SINT64:
                    assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');
                    let long = PbLong.from(value);
                    if (long.isZero() && !ed)
                        return undefined;
                    return long.toString();
                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
                // Either standard or URL-safe base64 encoding with/without paddings are accepted.
                case ScalarType.BYTES:
                    assert(value instanceof Uint8Array);
                    if (!value.byteLength)
                        return ed ? "" : undefined;
                    return base64encode(value);
            }
        }
    }

    /**
     * Creates the default value for a scalar type.
     */
    function reflectionScalarDefault(type, longType = LongType.STRING) {
        switch (type) {
            case ScalarType.BOOL:
                return false;
            case ScalarType.UINT64:
            case ScalarType.FIXED64:
                return reflectionLongConvert(PbULong.ZERO, longType);
            case ScalarType.INT64:
            case ScalarType.SFIXED64:
            case ScalarType.SINT64:
                return reflectionLongConvert(PbLong.ZERO, longType);
            case ScalarType.DOUBLE:
            case ScalarType.FLOAT:
                return 0.0;
            case ScalarType.BYTES:
                return new Uint8Array(0);
            case ScalarType.STRING:
                return "";
            default:
                // case ScalarType.INT32:
                // case ScalarType.UINT32:
                // case ScalarType.SINT32:
                // case ScalarType.FIXED32:
                // case ScalarType.SFIXED32:
                return 0;
        }
    }

    /**
     * Reads proto3 messages in binary format using reflection information.
     *
     * https://developers.google.com/protocol-buffers/docs/encoding
     */
    class ReflectionBinaryReader {
        constructor(info) {
            this.info = info;
        }
        prepare() {
            var _a;
            if (!this.fieldNoToField) {
                const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];
                this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));
            }
        }
        /**
         * Reads a message from binary format into the target message.
         *
         * Repeated fields are appended. Map entries are added, overwriting
         * existing keys.
         *
         * If a message field is already present, it will be merged with the
         * new data.
         */
        read(reader, message, options, length) {
            this.prepare();
            const end = length === undefined ? reader.len : reader.pos + length;
            while (reader.pos < end) {
                // read the tag and find the field
                const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);
                if (!field) {
                    let u = options.readUnknownField;
                    if (u == "throw")
                        throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);
                    continue;
                }
                // target object for the field we are reading
                let target = message, repeated = field.repeat, localName = field.localName;
                // if field is member of oneof ADT, use ADT as target
                if (field.oneof) {
                    target = target[field.oneof];
                    // if other oneof member selected, set new ADT
                    if (target.oneofKind !== localName)
                        target = message[field.oneof] = {
                            oneofKind: localName
                        };
                }
                // we have handled oneof above, we just have read the value into `target[localName]`
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        let T = field.kind == "enum" ? ScalarType.INT32 : field.T;
                        let L = field.kind == "scalar" ? field.L : undefined;
                        if (repeated) {
                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values
                            if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {
                                let e = reader.uint32() + reader.pos;
                                while (reader.pos < e)
                                    arr.push(this.scalar(reader, T, L));
                            }
                            else
                                arr.push(this.scalar(reader, T, L));
                        }
                        else
                            target[localName] = this.scalar(reader, T, L);
                        break;
                    case "message":
                        if (repeated) {
                            let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values
                            let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);
                            arr.push(msg);
                        }
                        else
                            target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);
                        break;
                    case "map":
                        let [mapKey, mapVal] = this.mapEntry(field, reader, options);
                        // safe to assume presence of map object, oneof cannot contain repeated values
                        target[localName][mapKey] = mapVal;
                        break;
                }
            }
        }
        /**
         * Read a map field, expecting key field = 1, value field = 2
         */
        mapEntry(field, reader, options) {
            let length = reader.uint32();
            let end = reader.pos + length;
            let key = undefined; // javascript only allows number or string for object properties
            let val = undefined;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        if (field.K == ScalarType.BOOL)
                            key = reader.bool().toString();
                        else
                            // long types are read as string, number types are okay as number
                            key = this.scalar(reader, field.K, LongType.STRING);
                        break;
                    case 2:
                        switch (field.V.kind) {
                            case "scalar":
                                val = this.scalar(reader, field.V.T, field.V.L);
                                break;
                            case "enum":
                                val = reader.int32();
                                break;
                            case "message":
                                val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);
                                break;
                        }
                        break;
                    default:
                        throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);
                }
            }
            if (key === undefined) {
                let keyRaw = reflectionScalarDefault(field.K);
                key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
            }
            if (val === undefined)
                switch (field.V.kind) {
                    case "scalar":
                        val = reflectionScalarDefault(field.V.T, field.V.L);
                        break;
                    case "enum":
                        val = 0;
                        break;
                    case "message":
                        val = field.V.T().create();
                        break;
                }
            return [key, val];
        }
        scalar(reader, type, longType) {
            switch (type) {
                case ScalarType.INT32:
                    return reader.int32();
                case ScalarType.STRING:
                    return reader.string();
                case ScalarType.BOOL:
                    return reader.bool();
                case ScalarType.DOUBLE:
                    return reader.double();
                case ScalarType.FLOAT:
                    return reader.float();
                case ScalarType.INT64:
                    return reflectionLongConvert(reader.int64(), longType);
                case ScalarType.UINT64:
                    return reflectionLongConvert(reader.uint64(), longType);
                case ScalarType.FIXED64:
                    return reflectionLongConvert(reader.fixed64(), longType);
                case ScalarType.FIXED32:
                    return reader.fixed32();
                case ScalarType.BYTES:
                    return reader.bytes();
                case ScalarType.UINT32:
                    return reader.uint32();
                case ScalarType.SFIXED32:
                    return reader.sfixed32();
                case ScalarType.SFIXED64:
                    return reflectionLongConvert(reader.sfixed64(), longType);
                case ScalarType.SINT32:
                    return reader.sint32();
                case ScalarType.SINT64:
                    return reflectionLongConvert(reader.sint64(), longType);
            }
        }
    }

    /**
     * Writes proto3 messages in binary format using reflection information.
     *
     * https://developers.google.com/protocol-buffers/docs/encoding
     */
    class ReflectionBinaryWriter {
        constructor(info) {
            this.info = info;
        }
        prepare() {
            if (!this.fields) {
                const fieldsInput = this.info.fields ? this.info.fields.concat() : [];
                this.fields = fieldsInput.sort((a, b) => a.no - b.no);
            }
        }
        /**
         * Writes the message to binary format.
         */
        write(message, writer, options) {
            this.prepare();
            for (const field of this.fields) {
                let value, // this will be our field value, whether it is member of a oneof or not
                emitDefault, // whether we emit the default value (only true for oneof members)
                repeated = field.repeat, localName = field.localName;
                // handle oneof ADT
                if (field.oneof) {
                    const group = message[field.oneof];
                    if (group.oneofKind !== localName)
                        continue; // if field is not selected, skip
                    value = group[localName];
                    emitDefault = true;
                }
                else {
                    value = message[localName];
                    emitDefault = false;
                }
                // we have handled oneof above. we just have to honor `emitDefault`.
                switch (field.kind) {
                    case "scalar":
                    case "enum":
                        let T = field.kind == "enum" ? ScalarType.INT32 : field.T;
                        if (repeated) {
                            assert(Array.isArray(value));
                            if (repeated == RepeatType.PACKED)
                                this.packed(writer, T, field.no, value);
                            else
                                for (const item of value)
                                    this.scalar(writer, T, field.no, item, true);
                        }
                        else if (value === undefined)
                            assert(field.opt);
                        else
                            this.scalar(writer, T, field.no, value, emitDefault || field.opt);
                        break;
                    case "message":
                        if (repeated) {
                            assert(Array.isArray(value));
                            for (const item of value)
                                this.message(writer, options, field.T(), field.no, item);
                        }
                        else {
                            this.message(writer, options, field.T(), field.no, value);
                        }
                        break;
                    case "map":
                        assert(typeof value == 'object' && value !== null);
                        for (const [key, val] of Object.entries(value))
                            this.mapEntry(writer, options, field, key, val);
                        break;
                }
            }
            let u = options.writeUnknownFields;
            if (u !== false)
                (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);
        }
        mapEntry(writer, options, field, key, value) {
            writer.tag(field.no, WireType.LengthDelimited);
            writer.fork();
            // javascript only allows number or string for object properties
            // we convert from our representation to the protobuf type
            let keyValue = key;
            switch (field.K) {
                case ScalarType.INT32:
                case ScalarType.FIXED32:
                case ScalarType.UINT32:
                case ScalarType.SFIXED32:
                case ScalarType.SINT32:
                    keyValue = Number.parseInt(key);
                    break;
                case ScalarType.BOOL:
                    assert(key == 'true' || key == 'false');
                    keyValue = key == 'true';
                    break;
            }
            // write key, expecting key field number = 1
            this.scalar(writer, field.K, 1, keyValue, true);
            // write value, expecting value field number = 2
            switch (field.V.kind) {
                case 'scalar':
                    this.scalar(writer, field.V.T, 2, value, true);
                    break;
                case 'enum':
                    this.scalar(writer, ScalarType.INT32, 2, value, true);
                    break;
                case 'message':
                    this.message(writer, options, field.V.T(), 2, value);
                    break;
            }
            writer.join();
        }
        message(writer, options, handler, fieldNo, value) {
            if (value === undefined)
                return;
            handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);
            writer.join();
        }
        /**
         * Write a single scalar value.
         */
        scalar(writer, type, fieldNo, value, emitDefault) {
            let [wireType, method, isDefault] = this.scalarInfo(type, value);
            if (!isDefault || emitDefault) {
                writer.tag(fieldNo, wireType);
                writer[method](value);
            }
        }
        /**
         * Write an array of scalar values in packed format.
         */
        packed(writer, type, fieldNo, value) {
            if (!value.length)
                return;
            assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);
            // write tag
            writer.tag(fieldNo, WireType.LengthDelimited);
            // begin length-delimited
            writer.fork();
            // write values without tags
            let [, method,] = this.scalarInfo(type);
            for (let i = 0; i < value.length; i++)
                writer[method](value[i]);
            // end length delimited
            writer.join();
        }
        /**
         * Get information for writing a scalar value.
         *
         * Returns tuple:
         * [0]: appropriate WireType
         * [1]: name of the appropriate method of IBinaryWriter
         * [2]: whether the given value is a default value
         *
         * If argument `value` is omitted, [2] is always false.
         */
        scalarInfo(type, value) {
            let t = WireType.Varint;
            let m;
            let i = value === undefined;
            let d = value === 0;
            switch (type) {
                case ScalarType.INT32:
                    m = "int32";
                    break;
                case ScalarType.STRING:
                    d = i || !value.length;
                    t = WireType.LengthDelimited;
                    m = "string";
                    break;
                case ScalarType.BOOL:
                    d = value === false;
                    m = "bool";
                    break;
                case ScalarType.UINT32:
                    m = "uint32";
                    break;
                case ScalarType.DOUBLE:
                    t = WireType.Bit64;
                    m = "double";
                    break;
                case ScalarType.FLOAT:
                    t = WireType.Bit32;
                    m = "float";
                    break;
                case ScalarType.INT64:
                    d = i || PbLong.from(value).isZero();
                    m = "int64";
                    break;
                case ScalarType.UINT64:
                    d = i || PbULong.from(value).isZero();
                    m = "uint64";
                    break;
                case ScalarType.FIXED64:
                    d = i || PbULong.from(value).isZero();
                    t = WireType.Bit64;
                    m = "fixed64";
                    break;
                case ScalarType.BYTES:
                    d = i || !value.byteLength;
                    t = WireType.LengthDelimited;
                    m = "bytes";
                    break;
                case ScalarType.FIXED32:
                    t = WireType.Bit32;
                    m = "fixed32";
                    break;
                case ScalarType.SFIXED32:
                    t = WireType.Bit32;
                    m = "sfixed32";
                    break;
                case ScalarType.SFIXED64:
                    d = i || PbLong.from(value).isZero();
                    t = WireType.Bit64;
                    m = "sfixed64";
                    break;
                case ScalarType.SINT32:
                    m = "sint32";
                    break;
                case ScalarType.SINT64:
                    d = i || PbLong.from(value).isZero();
                    m = "sint64";
                    break;
            }
            return [t, m, i || d];
        }
    }

    /**
     * Creates an instance of the generic message, using the field
     * information.
     */
    function reflectionCreate(type) {
        const msg = {};
        Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });
        for (let field of type.fields) {
            let name = field.localName;
            if (field.opt)
                continue;
            if (field.oneof)
                msg[field.oneof] = { oneofKind: undefined };
            else if (field.repeat)
                msg[name] = [];
            else
                switch (field.kind) {
                    case "scalar":
                        msg[name] = reflectionScalarDefault(field.T, field.L);
                        break;
                    case "enum":
                        // we require 0 to be default value for all enums
                        msg[name] = 0;
                        break;
                    case "map":
                        msg[name] = {};
                        break;
                }
        }
        return msg;
    }

    /**
     * Copy partial data into the target message.
     *
     * If a singular scalar or enum field is present in the source, it
     * replaces the field in the target.
     *
     * If a singular message field is present in the source, it is merged
     * with the target field by calling mergePartial() of the responsible
     * message type.
     *
     * If a repeated field is present in the source, its values replace
     * all values in the target array, removing extraneous values.
     * Repeated message fields are copied, not merged.
     *
     * If a map field is present in the source, entries are added to the
     * target map, replacing entries with the same key. Entries that only
     * exist in the target remain. Entries with message values are copied,
     * not merged.
     *
     * Note that this function differs from protobuf merge semantics,
     * which appends repeated fields.
     */
    function reflectionMergePartial(info, target, source) {
        let fieldValue, // the field value we are working with
        input = source, output; // where we want our field value to go
        for (let field of info.fields) {
            let name = field.localName;
            if (field.oneof) {
                const group = input[field.oneof]; // this is the oneof`s group in the source
                if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) { // the user is free to omit
                    continue; // we skip this field, and all other members too
                }
                fieldValue = group[name]; // our value comes from the the oneof group of the source
                output = target[field.oneof]; // and our output is the oneof group of the target
                output.oneofKind = group.oneofKind; // always update discriminator
                if (fieldValue == undefined) {
                    delete output[name]; // remove any existing value
                    continue; // skip further work on field
                }
            }
            else {
                fieldValue = input[name]; // we are using the source directly
                output = target; // we want our field value to go directly into the target
                if (fieldValue == undefined) {
                    continue; // skip further work on field, existing value is used as is
                }
            }
            if (field.repeat)
                output[name].length = fieldValue.length; // resize target array to match source array
            // now we just work with `fieldValue` and `output` to merge the value
            switch (field.kind) {
                case "scalar":
                case "enum":
                    if (field.repeat)
                        for (let i = 0; i < fieldValue.length; i++)
                            output[name][i] = fieldValue[i]; // not a reference type
                    else
                        output[name] = fieldValue; // not a reference type
                    break;
                case "message":
                    let T = field.T();
                    if (field.repeat)
                        for (let i = 0; i < fieldValue.length; i++)
                            output[name][i] = T.create(fieldValue[i]);
                    else if (output[name] === undefined)
                        output[name] = T.create(fieldValue); // nothing to merge with
                    else
                        T.mergePartial(output[name], fieldValue);
                    break;
                case "map":
                    // Map and repeated fields are simply overwritten, not appended or merged
                    switch (field.V.kind) {
                        case "scalar":
                        case "enum":
                            Object.assign(output[name], fieldValue); // elements are not reference types
                            break;
                        case "message":
                            let T = field.V.T();
                            for (let k of Object.keys(fieldValue))
                                output[name][k] = T.create(fieldValue[k]);
                            break;
                    }
                    break;
            }
        }
    }

    /**
     * Determines whether two message of the same type have the same field values.
     * Checks for deep equality, traversing repeated fields, oneof groups, maps
     * and messages recursively.
     * Will also return true if both messages are `undefined`.
     */
    function reflectionEquals(info, a, b) {
        if (a === b)
            return true;
        if (!a || !b)
            return false;
        for (let field of info.fields) {
            let localName = field.localName;
            let val_a = field.oneof ? a[field.oneof][localName] : a[localName];
            let val_b = field.oneof ? b[field.oneof][localName] : b[localName];
            switch (field.kind) {
                case "enum":
                case "scalar":
                    let t = field.kind == "enum" ? ScalarType.INT32 : field.T;
                    if (!(field.repeat
                        ? repeatedPrimitiveEq(t, val_a, val_b)
                        : primitiveEq(t, val_a, val_b)))
                        return false;
                    break;
                case "map":
                    if (!(field.V.kind == "message"
                        ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))
                        : repeatedPrimitiveEq(field.V.kind == "enum" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))
                        return false;
                    break;
                case "message":
                    let T = field.T();
                    if (!(field.repeat
                        ? repeatedMsgEq(T, val_a, val_b)
                        : T.equals(val_a, val_b)))
                        return false;
                    break;
            }
        }
        return true;
    }
    const objectValues = Object.values;
    function primitiveEq(type, a, b) {
        if (a === b)
            return true;
        if (type !== ScalarType.BYTES)
            return false;
        let ba = a;
        let bb = b;
        if (ba.length !== bb.length)
            return false;
        for (let i = 0; i < ba.length; i++)
            if (ba[i] != bb[i])
                return false;
        return true;
    }
    function repeatedPrimitiveEq(type, a, b) {
        if (a.length !== b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!primitiveEq(type, a[i], b[i]))
                return false;
        return true;
    }
    function repeatedMsgEq(type, a, b) {
        if (a.length !== b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!type.equals(a[i], b[i]))
                return false;
        return true;
    }

    /**
     * This standard message type provides reflection-based
     * operations to work with a message.
     */
    class MessageType {
        constructor(name, fields, options) {
            this.defaultCheckDepth = 16;
            this.typeName = name;
            this.fields = fields.map(normalizeFieldInfo);
            this.options = options !== null && options !== void 0 ? options : {};
            this.refTypeCheck = new ReflectionTypeCheck(this);
            this.refJsonReader = new ReflectionJsonReader(this);
            this.refJsonWriter = new ReflectionJsonWriter(this);
            this.refBinReader = new ReflectionBinaryReader(this);
            this.refBinWriter = new ReflectionBinaryWriter(this);
        }
        create(value) {
            let message = reflectionCreate(this);
            if (value !== undefined) {
                reflectionMergePartial(this, message, value);
            }
            return message;
        }
        /**
         * Clone the message.
         *
         * Unknown fields are discarded.
         */
        clone(message) {
            let copy = this.create();
            reflectionMergePartial(this, copy, message);
            return copy;
        }
        /**
         * Determines whether two message of the same type have the same field values.
         * Checks for deep equality, traversing repeated fields, oneof groups, maps
         * and messages recursively.
         * Will also return true if both messages are `undefined`.
         */
        equals(a, b) {
            return reflectionEquals(this, a, b);
        }
        /**
         * Is the given value assignable to our message type
         * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
         */
        is(arg, depth = this.defaultCheckDepth) {
            return this.refTypeCheck.is(arg, depth, false);
        }
        /**
         * Is the given value assignable to our message type,
         * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
         */
        isAssignable(arg, depth = this.defaultCheckDepth) {
            return this.refTypeCheck.is(arg, depth, true);
        }
        /**
         * Copy partial data into the target message.
         */
        mergePartial(target, source) {
            reflectionMergePartial(this, target, source);
        }
        /**
         * Create a new message from binary format.
         */
        fromBinary(data, options) {
            let opt = binaryReadOptions(options);
            return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);
        }
        /**
         * Read a new message from a JSON value.
         */
        fromJson(json, options) {
            return this.internalJsonRead(json, jsonReadOptions(options));
        }
        /**
         * Read a new message from a JSON string.
         * This is equivalent to `T.fromJson(JSON.parse(json))`.
         */
        fromJsonString(json, options) {
            let value = JSON.parse(json);
            return this.fromJson(value, options);
        }
        /**
         * Write the message to canonical JSON value.
         */
        toJson(message, options) {
            return this.internalJsonWrite(message, jsonWriteOptions(options));
        }
        /**
         * Convert the message to canonical JSON string.
         * This is equivalent to `JSON.stringify(T.toJson(t))`
         */
        toJsonString(message, options) {
            var _a;
            let value = this.toJson(message, options);
            return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);
        }
        /**
         * Write the message to binary format.
         */
        toBinary(message, options) {
            let opt = binaryWriteOptions(options);
            return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();
        }
        /**
         * This is an internal method. If you just want to read a message from
         * JSON, use `fromJson()` or `fromJsonString()`.
         *
         * Reads JSON value and merges the fields into the target
         * according to protobuf rules. If the target is omitted,
         * a new instance is created first.
         */
        internalJsonRead(json, options, target) {
            if (json !== null && typeof json == "object" && !Array.isArray(json)) {
                let message = target !== null && target !== void 0 ? target : this.create();
                this.refJsonReader.read(json, message, options);
                return message;
            }
            throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);
        }
        /**
         * This is an internal method. If you just want to write a message
         * to JSON, use `toJson()` or `toJsonString().
         *
         * Writes JSON value and returns it.
         */
        internalJsonWrite(message, options) {
            return this.refJsonWriter.write(message, options);
        }
        /**
         * This is an internal method. If you just want to write a message
         * in binary format, use `toBinary()`.
         *
         * Serializes the message in binary format and appends it to the given
         * writer. Returns passed writer.
         */
        internalBinaryWrite(message, writer, options) {
            this.refBinWriter.write(message, writer, options);
            return writer;
        }
        /**
         * This is an internal method. If you just want to read a message from
         * binary data, use `fromBinary()`.
         *
         * Reads data from binary format and merges the fields into
         * the target according to protobuf rules. If the target is
         * omitted, a new instance is created first.
         */
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create();
            this.refBinReader.read(reader, message, options, length);
            return message;
        }
    }

    /**
     * Turns PartialMethodInfo into MethodInfo.
     */
    function normalizeMethodInfo(method, service) {
        var _a, _b, _c;
        let m = method;
        m.service = service;
        m.localName = (_a = m.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(m.name);
        // noinspection PointlessBooleanExpressionJS
        m.serverStreaming = !!m.serverStreaming;
        // noinspection PointlessBooleanExpressionJS
        m.clientStreaming = !!m.clientStreaming;
        m.options = (_b = m.options) !== null && _b !== void 0 ? _b : {};
        m.idempotency = (_c = m.idempotency) !== null && _c !== void 0 ? _c : undefined;
        return m;
    }

    class ServiceType {
        constructor(typeName, methods, options) {
            this.typeName = typeName;
            this.methods = methods.map(i => normalizeMethodInfo(i, this));
            this.options = options !== null && options !== void 0 ? options : {};
        }
    }

    /**
     * An error that occurred while calling a RPC method.
     */
    class RpcError extends Error {
        constructor(message, code = 'UNKNOWN', meta) {
            super(message);
            this.name = 'RpcError';
            // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example
            Object.setPrototypeOf(this, new.target.prototype);
            this.code = code;
            this.meta = meta !== null && meta !== void 0 ? meta : {};
        }
        toString() {
            const l = [this.name + ': ' + this.message];
            if (this.code) {
                l.push('');
                l.push('Code: ' + this.code);
            }
            if (this.serviceName && this.methodName) {
                l.push('Method: ' + this.serviceName + '/' + this.methodName);
            }
            let m = Object.entries(this.meta);
            if (m.length) {
                l.push('');
                l.push('Meta:');
                for (let [k, v] of m) {
                    l.push(`  ${k}: ${v}`);
                }
            }
            return l.join('\n');
        }
    }

    /**
     * Merges custom RPC options with defaults. Returns a new instance and keeps
     * the "defaults" and the "options" unmodified.
     *
     * Merges `RpcMetadata` "meta", overwriting values from "defaults" with
     * values from "options". Does not append values to existing entries.
     *
     * Merges "jsonOptions", including "jsonOptions.typeRegistry", by creating
     * a new array that contains types from "options.jsonOptions.typeRegistry"
     * first, then types from "defaults.jsonOptions.typeRegistry".
     *
     * Merges "binaryOptions".
     *
     * Merges "interceptors" by creating a new array that contains interceptors
     * from "defaults" first, then interceptors from "options".
     *
     * Works with objects that extend `RpcOptions`, but only if the added
     * properties are of type Date, primitive like string, boolean, or Array
     * of primitives. If you have other property types, you have to merge them
     * yourself.
     */
    function mergeRpcOptions(defaults, options) {
        if (!options)
            return defaults;
        let o = {};
        copy(defaults, o);
        copy(options, o);
        for (let key of Object.keys(options)) {
            let val = options[key];
            switch (key) {
                case "jsonOptions":
                    o.jsonOptions = mergeJsonOptions(defaults.jsonOptions, o.jsonOptions);
                    break;
                case "binaryOptions":
                    o.binaryOptions = mergeBinaryOptions(defaults.binaryOptions, o.binaryOptions);
                    break;
                case "meta":
                    o.meta = {};
                    copy(defaults.meta, o.meta);
                    copy(options.meta, o.meta);
                    break;
                case "interceptors":
                    o.interceptors = defaults.interceptors ? defaults.interceptors.concat(val) : val.concat();
                    break;
            }
        }
        return o;
    }
    function copy(a, into) {
        if (!a)
            return;
        let c = into;
        for (let [k, v] of Object.entries(a)) {
            if (v instanceof Date)
                c[k] = new Date(v.getTime());
            else if (Array.isArray(v))
                c[k] = v.concat();
            else
                c[k] = v;
        }
    }

    var DeferredState;
    (function (DeferredState) {
        DeferredState[DeferredState["PENDING"] = 0] = "PENDING";
        DeferredState[DeferredState["REJECTED"] = 1] = "REJECTED";
        DeferredState[DeferredState["RESOLVED"] = 2] = "RESOLVED";
    })(DeferredState || (DeferredState = {}));
    /**
     * A deferred promise. This is a "controller" for a promise, which lets you
     * pass a promise around and reject or resolve it from the outside.
     *
     * Warning: This class is to be used with care. Using it can make code very
     * difficult to read. It is intended for use in library code that exposes
     * promises, not for regular business logic.
     */
    class Deferred {
        /**
         * @param preventUnhandledRejectionWarning - prevents the warning
         * "Unhandled Promise rejection" by adding a noop rejection handler.
         * Working with calls returned from the runtime-rpc package in an
         * async function usually means awaiting one call property after
         * the other. This means that the "status" is not being awaited when
         * an earlier await for the "headers" is rejected. This causes the
         * "unhandled promise reject" warning. A more correct behaviour for
         * calls might be to become aware whether at least one of the
         * promises is handled and swallow the rejection warning for the
         * others.
         */
        constructor(preventUnhandledRejectionWarning = true) {
            this._state = DeferredState.PENDING;
            this._promise = new Promise((resolve, reject) => {
                this._resolve = resolve;
                this._reject = reject;
            });
            if (preventUnhandledRejectionWarning) {
                this._promise.catch(_ => { });
            }
        }
        /**
         * Get the current state of the promise.
         */
        get state() {
            return this._state;
        }
        /**
         * Get the deferred promise.
         */
        get promise() {
            return this._promise;
        }
        /**
         * Resolve the promise. Throws if the promise is already resolved or rejected.
         */
        resolve(value) {
            if (this.state !== DeferredState.PENDING)
                throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);
            this._resolve(value);
            this._state = DeferredState.RESOLVED;
        }
        /**
         * Reject the promise. Throws if the promise is already resolved or rejected.
         */
        reject(reason) {
            if (this.state !== DeferredState.PENDING)
                throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);
            this._reject(reason);
            this._state = DeferredState.REJECTED;
        }
        /**
         * Resolve the promise. Ignore if not pending.
         */
        resolvePending(val) {
            if (this._state === DeferredState.PENDING)
                this.resolve(val);
        }
        /**
         * Reject the promise. Ignore if not pending.
         */
        rejectPending(reason) {
            if (this._state === DeferredState.PENDING)
                this.reject(reason);
        }
    }

    /**
     * A `RpcOutputStream` that you control.
     */
    class RpcOutputStreamController {
        constructor() {
            this._lis = {
                nxt: [],
                msg: [],
                err: [],
                cmp: [],
            };
            this._closed = false;
        }
        // --- RpcOutputStream callback API
        onNext(callback) {
            return this.addLis(callback, this._lis.nxt);
        }
        onMessage(callback) {
            return this.addLis(callback, this._lis.msg);
        }
        onError(callback) {
            return this.addLis(callback, this._lis.err);
        }
        onComplete(callback) {
            return this.addLis(callback, this._lis.cmp);
        }
        addLis(callback, list) {
            list.push(callback);
            return () => {
                let i = list.indexOf(callback);
                if (i >= 0)
                    list.splice(i, 1);
            };
        }
        // remove all listeners
        clearLis() {
            for (let l of Object.values(this._lis))
                l.splice(0, l.length);
        }
        // --- Controller API
        /**
         * Is this stream already closed by a completion or error?
         */
        get closed() {
            return this._closed !== false;
        }
        /**
         * Emit message, close with error, or close successfully, but only one
         * at a time.
         * Can be used to wrap a stream by using the other stream's `onNext`.
         */
        notifyNext(message, error, complete) {
            assert((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, 'only one emission at a time');
            if (message)
                this.notifyMessage(message);
            if (error)
                this.notifyError(error);
            if (complete)
                this.notifyComplete();
        }
        /**
         * Emits a new message. Throws if stream is closed.
         *
         * Triggers onNext and onMessage callbacks.
         */
        notifyMessage(message) {
            assert(!this.closed, 'stream is closed');
            this.pushIt({ value: message, done: false });
            this._lis.msg.forEach(l => l(message));
            this._lis.nxt.forEach(l => l(message, undefined, false));
        }
        /**
         * Closes the stream with an error. Throws if stream is closed.
         *
         * Triggers onNext and onError callbacks.
         */
        notifyError(error) {
            assert(!this.closed, 'stream is closed');
            this._closed = error;
            this.pushIt(error);
            this._lis.err.forEach(l => l(error));
            this._lis.nxt.forEach(l => l(undefined, error, false));
            this.clearLis();
        }
        /**
         * Closes the stream successfully. Throws if stream is closed.
         *
         * Triggers onNext and onComplete callbacks.
         */
        notifyComplete() {
            assert(!this.closed, 'stream is closed');
            this._closed = true;
            this.pushIt({ value: null, done: true });
            this._lis.cmp.forEach(l => l());
            this._lis.nxt.forEach(l => l(undefined, undefined, true));
            this.clearLis();
        }
        /**
         * Creates an async iterator (that can be used with `for await {...}`)
         * to consume the stream.
         *
         * Some things to note:
         * - If an error occurs, the `for await` will throw it.
         * - If an error occurred before the `for await` was started, `for await`
         *   will re-throw it.
         * - If the stream is already complete, the `for await` will be empty.
         * - If your `for await` consumes slower than the stream produces,
         *   for example because you are relaying messages in a slow operation,
         *   messages are queued.
         */
        [Symbol.asyncIterator]() {
            // init the iterator state, enabling pushIt()
            if (!this._itState) {
                this._itState = { q: [] };
            }
            // if we are closed, we are definitely not receiving any more messages.
            // but we can't let the iterator get stuck. we want to either:
            // a) finish the new iterator immediately, because we are completed
            // b) reject the new iterator, because we errored
            if (this._closed === true)
                this.pushIt({ value: null, done: true });
            else if (this._closed !== false)
                this.pushIt(this._closed);
            // the async iterator
            return {
                next: () => {
                    let state = this._itState;
                    assert(state, "bad state"); // if we don't have a state here, code is broken
                    // there should be no pending result.
                    // did the consumer call next() before we resolved our previous result promise?
                    assert(!state.p, "iterator contract broken");
                    // did we produce faster than the iterator consumed?
                    // return the oldest result from the queue.
                    let first = state.q.shift();
                    if (first)
                        return ("value" in first) ? Promise.resolve(first) : Promise.reject(first);
                    // we have no result ATM, but we promise one.
                    // as soon as we have a result, we must resolve promise.
                    state.p = new Deferred();
                    return state.p.promise;
                },
            };
        }
        // "push" a new iterator result.
        // this either resolves a pending promise, or enqueues the result.
        pushIt(result) {
            let state = this._itState;
            if (!state)
                return;
            // is the consumer waiting for us?
            if (state.p) {
                // yes, consumer is waiting for this promise.
                const p = state.p;
                assert(p.state == DeferredState.PENDING, "iterator contract broken");
                // resolve the promise
                ("value" in result) ? p.resolve(result) : p.reject(result);
                // must cleanup, otherwise iterator.next() would pick it up again.
                delete state.p;
            }
            else {
                // we are producing faster than the iterator consumes.
                // push result onto queue.
                state.q.push(result);
            }
        }
    }

    var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * A unary RPC call. Unary means there is exactly one input message and
     * exactly one output message unless an error occurred.
     */
    class UnaryCall {
        constructor(method, requestHeaders, request, headers, response, status, trailers) {
            this.method = method;
            this.requestHeaders = requestHeaders;
            this.request = request;
            this.headers = headers;
            this.response = response;
            this.status = status;
            this.trailers = trailers;
        }
        /**
         * If you are only interested in the final outcome of this call,
         * you can await it to receive a `FinishedUnaryCall`.
         */
        then(onfulfilled, onrejected) {
            return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
        }
        promiseFinished() {
            return __awaiter$2(this, void 0, void 0, function* () {
                let [headers, response, status, trailers] = yield Promise.all([this.headers, this.response, this.status, this.trailers]);
                return {
                    method: this.method,
                    requestHeaders: this.requestHeaders,
                    request: this.request,
                    headers,
                    response,
                    status,
                    trailers
                };
            });
        }
    }

    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * A server streaming RPC call. The client provides exactly one input message
     * but the server may respond with 0, 1, or more messages.
     */
    class ServerStreamingCall {
        constructor(method, requestHeaders, request, headers, response, status, trailers) {
            this.method = method;
            this.requestHeaders = requestHeaders;
            this.request = request;
            this.headers = headers;
            this.responses = response;
            this.status = status;
            this.trailers = trailers;
        }
        /**
         * Instead of awaiting the response status and trailers, you can
         * just as well await this call itself to receive the server outcome.
         * You should first setup some listeners to the `request` to
         * see the actual messages the server replied with.
         */
        then(onfulfilled, onrejected) {
            return this.promiseFinished().then(value => onfulfilled ? Promise.resolve(onfulfilled(value)) : value, reason => onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason));
        }
        promiseFinished() {
            return __awaiter$1(this, void 0, void 0, function* () {
                let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);
                return {
                    method: this.method,
                    requestHeaders: this.requestHeaders,
                    request: this.request,
                    headers,
                    status,
                    trailers,
                };
            });
        }
    }

    /**
     * Creates a "stack" of of all interceptors specified in the given `RpcOptions`.
     * Used by generated client implementations.
     * @internal
     */
    function stackIntercept(kind, transport, method, options, input) {
        var _a, _b, _c, _d;
        if (kind == "unary") {
            let tail = (mtd, inp, opt) => transport.unary(mtd, inp, opt);
            for (const curr of ((_a = options.interceptors) !== null && _a !== void 0 ? _a : []).filter(i => i.interceptUnary).reverse()) {
                const next = tail;
                tail = (mtd, inp, opt) => curr.interceptUnary(next, mtd, inp, opt);
            }
            return tail(method, input, options);
        }
        if (kind == "serverStreaming") {
            let tail = (mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt);
            for (const curr of ((_b = options.interceptors) !== null && _b !== void 0 ? _b : []).filter(i => i.interceptServerStreaming).reverse()) {
                const next = tail;
                tail = (mtd, inp, opt) => curr.interceptServerStreaming(next, mtd, inp, opt);
            }
            return tail(method, input, options);
        }
        if (kind == "clientStreaming") {
            let tail = (mtd, opt) => transport.clientStreaming(mtd, opt);
            for (const curr of ((_c = options.interceptors) !== null && _c !== void 0 ? _c : []).filter(i => i.interceptClientStreaming).reverse()) {
                const next = tail;
                tail = (mtd, opt) => curr.interceptClientStreaming(next, mtd, opt);
            }
            return tail(method, options);
        }
        if (kind == "duplex") {
            let tail = (mtd, opt) => transport.duplex(mtd, opt);
            for (const curr of ((_d = options.interceptors) !== null && _d !== void 0 ? _d : []).filter(i => i.interceptDuplex).reverse()) {
                const next = tail;
                tail = (mtd, opt) => curr.interceptDuplex(next, mtd, opt);
            }
            return tail(method, options);
        }
        assertNever(kind);
    }

    // @generated message type with reflection information, may provide speed optimized methods
    class Duration$Type extends MessageType {
        constructor() {
            super("google.protobuf.Duration", [
                { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "nanos", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
            ]);
        }
        /**
         * Encode `Duration` to JSON string like "3.000001s".
         */
        internalJsonWrite(message, options) {
            let s = PbLong.from(message.seconds).toNumber();
            if (s > 315576000000 || s < -315576000000)
                throw new Error("Duration value out of range.");
            let text = message.seconds.toString();
            if (message.nanos !== 0) {
                let nanosStr = Math.abs(message.nanos).toString();
                nanosStr = "0".repeat(9 - nanosStr.length) + nanosStr;
                if (nanosStr.substring(3) === "000000")
                    nanosStr = nanosStr.substring(0, 3);
                else if (nanosStr.substring(6) === "000")
                    nanosStr = nanosStr.substring(0, 6);
                text += "." + nanosStr;
            }
            return text + "s";
        }
        /**
         * Decode `Duration` from JSON string like "3.000001s"
         */
        internalJsonRead(json, options, target) {
            if (typeof json !== "string")
                throw new Error("Unable to parse Duration from JSON " + typeofJsonValue(json) + ". Expected string.");
            let match = json.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
            if (match === null)
                throw new Error("Unable to parse Duration from JSON string. Invalid format.");
            if (!target)
                target = this.create();
            let longSeconds = PbLong.from(match[1]);
            if (longSeconds.toNumber() > 315576000000 || longSeconds.toNumber() < -315576000000)
                throw new Error("Unable to parse Duration from JSON string. Value out of range.");
            target.seconds = longSeconds.toNumber();
            if (typeof match[2] == "string") {
                let nanosStr = match[2] + "0".repeat(9 - match[2].length);
                target.nanos = parseInt(nanosStr);
                if (longSeconds.isNegative()) {
                    target.nanos = -target.nanos;
                }
            }
            return target;
        }
        create(value) {
            const message = { seconds: 0, nanos: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* int64 seconds */ 1:
                        message.seconds = reader.int64().toNumber();
                        break;
                    case /* int32 nanos */ 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* int64 seconds = 1; */
            if (message.seconds !== 0)
                writer.tag(1, WireType.Varint).int64(message.seconds);
            /* int32 nanos = 2; */
            if (message.nanos !== 0)
                writer.tag(2, WireType.Varint).int32(message.nanos);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message google.protobuf.Duration
     */
    const Duration = new Duration$Type();

    /**
     * @generated from protobuf enum normalgw.hpl.v1.ResampleOptions.ResampleMethod
     */
    var ResampleOptions_ResampleMethod;
    (function (ResampleOptions_ResampleMethod) {
        /**
         * @generated from protobuf enum value: NONE = 0;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["NONE"] = 0] = "NONE";
        /**
         * @generated from protobuf enum value: MIN = 1;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["MIN"] = 1] = "MIN";
        /**
         * @generated from protobuf enum value: MAX = 2;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["MAX"] = 2] = "MAX";
        /**
         * @generated from protobuf enum value: AVERAGE = 3;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["AVERAGE"] = 3] = "AVERAGE";
        /**
         * @generated from protobuf enum value: SUM = 4;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["SUM"] = 4] = "SUM";
        /**
         * @generated from protobuf enum value: FIRST = 5;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["FIRST"] = 5] = "FIRST";
        /**
         * @generated from protobuf enum value: LAST = 6;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["LAST"] = 6] = "LAST";
        /**
         * @generated from protobuf enum value: COUNT = 7;
         */
        ResampleOptions_ResampleMethod[ResampleOptions_ResampleMethod["COUNT"] = 7] = "COUNT";
    })(ResampleOptions_ResampleMethod || (ResampleOptions_ResampleMethod = {}));
    // @generated message type with reflection information, may provide speed optimized methods
    class ResampleOptions$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ResampleOptions", [
                { no: 1, name: "method", kind: "enum", T: () => ["normalgw.hpl.v1.ResampleOptions.ResampleMethod", ResampleOptions_ResampleMethod] },
                { no: 2, name: "window", kind: "message", T: () => Duration }
            ]);
        }
        create(value) {
            const message = { method: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.hpl.v1.ResampleOptions.ResampleMethod method */ 1:
                        message.method = reader.int32();
                        break;
                    case /* google.protobuf.Duration window */ 2:
                        message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.hpl.v1.ResampleOptions.ResampleMethod method = 1; */
            if (message.method !== 0)
                writer.tag(1, WireType.Varint).int32(message.method);
            /* google.protobuf.Duration window = 2; */
            if (message.window)
                Duration.internalBinaryWrite(message.window, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ResampleOptions
     */
    const ResampleOptions = new ResampleOptions$Type();

    // @generated message type with reflection information, may provide speed optimized methods
    class Timestamp$Type extends MessageType {
        constructor() {
            super("google.protobuf.Timestamp", [
                { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "nanos", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
            ]);
        }
        /**
         * Creates a new `Timestamp` for the current time.
         */
        now() {
            const msg = this.create();
            const ms = Date.now();
            msg.seconds = PbLong.from(Math.floor(ms / 1000)).toNumber();
            msg.nanos = (ms % 1000) * 1000000;
            return msg;
        }
        /**
         * Converts a `Timestamp` to a JavaScript Date.
         */
        toDate(message) {
            return new Date(PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));
        }
        /**
         * Converts a JavaScript Date to a `Timestamp`.
         */
        fromDate(date) {
            const msg = this.create();
            const ms = date.getTime();
            msg.seconds = PbLong.from(Math.floor(ms / 1000)).toNumber();
            msg.nanos = (ms % 1000) * 1000000;
            return msg;
        }
        /**
         * In JSON format, the `Timestamp` type is encoded as a string
         * in the RFC 3339 format.
         */
        internalJsonWrite(message, options) {
            let ms = PbLong.from(message.seconds).toNumber() * 1000;
            if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z"))
                throw new Error("Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
            if (message.nanos < 0)
                throw new Error("Unable to encode invalid Timestamp to JSON. Nanos must not be negative.");
            let z = "Z";
            if (message.nanos > 0) {
                let nanosStr = (message.nanos + 1000000000).toString().substring(1);
                if (nanosStr.substring(3) === "000000")
                    z = "." + nanosStr.substring(0, 3) + "Z";
                else if (nanosStr.substring(6) === "000")
                    z = "." + nanosStr.substring(0, 6) + "Z";
                else
                    z = "." + nanosStr + "Z";
            }
            return new Date(ms).toISOString().replace(".000Z", z);
        }
        /**
         * In JSON format, the `Timestamp` type is encoded as a string
         * in the RFC 3339 format.
         */
        internalJsonRead(json, options, target) {
            if (typeof json !== "string")
                throw new Error("Unable to parse Timestamp from JSON " + typeofJsonValue(json) + ".");
            let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
            if (!matches)
                throw new Error("Unable to parse Timestamp from JSON. Invalid format.");
            let ms = Date.parse(matches[1] + "-" + matches[2] + "-" + matches[3] + "T" + matches[4] + ":" + matches[5] + ":" + matches[6] + (matches[8] ? matches[8] : "Z"));
            if (Number.isNaN(ms))
                throw new Error("Unable to parse Timestamp from JSON. Invalid value.");
            if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z"))
                throw new globalThis.Error("Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
            if (!target)
                target = this.create();
            target.seconds = PbLong.from(ms / 1000).toNumber();
            target.nanos = 0;
            if (matches[7])
                target.nanos = (parseInt("1" + matches[7] + "0".repeat(9 - matches[7].length)) - 1000000000);
            return target;
        }
        create(value) {
            const message = { seconds: 0, nanos: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* int64 seconds */ 1:
                        message.seconds = reader.int64().toNumber();
                        break;
                    case /* int32 nanos */ 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* int64 seconds = 1; */
            if (message.seconds !== 0)
                writer.tag(1, WireType.Varint).int64(message.seconds);
            /* int32 nanos = 2; */
            if (message.nanos !== 0)
                writer.tag(2, WireType.Varint).int32(message.nanos);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message google.protobuf.Timestamp
     */
    const Timestamp = new Timestamp$Type();

    // @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_number,server_grpc1
    // @generated from protobuf file "normalgw/hpl/v1/unit.proto" (package "normalgw.hpl.v1", syntax proto3)
    // tslint:disable
    /**
     * @generated from protobuf enum normalgw.hpl.v1.Units
     */
    var Units;
    (function (Units) {
        /**
         * @generated from protobuf enum value: UNITS_UNKNOWN = 0;
         */
        Units[Units["UNITS_UNKNOWN"] = 0] = "UNITS_UNKNOWN";
        /**
         * @generated from protobuf enum value: SQUARE_METERS = 255;
         */
        Units[Units["SQUARE_METERS"] = 255] = "SQUARE_METERS";
        /**
         * @generated from protobuf enum value: SQUARE_FEET = 1;
         */
        Units[Units["SQUARE_FEET"] = 1] = "SQUARE_FEET";
        /**
         * @generated from protobuf enum value: MILLIAMPERES = 2;
         */
        Units[Units["MILLIAMPERES"] = 2] = "MILLIAMPERES";
        /**
         * @generated from protobuf enum value: AMPERES = 3;
         */
        Units[Units["AMPERES"] = 3] = "AMPERES";
        /**
         * @generated from protobuf enum value: OHMS = 4;
         */
        Units[Units["OHMS"] = 4] = "OHMS";
        /**
         * @generated from protobuf enum value: VOLTS = 5;
         */
        Units[Units["VOLTS"] = 5] = "VOLTS";
        /**
         * @generated from protobuf enum value: KILOVOLTS = 6;
         */
        Units[Units["KILOVOLTS"] = 6] = "KILOVOLTS";
        /**
         * @generated from protobuf enum value: MEGAVOLTS = 7;
         */
        Units[Units["MEGAVOLTS"] = 7] = "MEGAVOLTS";
        /**
         * @generated from protobuf enum value: VOLT_AMPERES = 8;
         */
        Units[Units["VOLT_AMPERES"] = 8] = "VOLT_AMPERES";
        /**
         * @generated from protobuf enum value: KILOVOLT_AMPERES = 9;
         */
        Units[Units["KILOVOLT_AMPERES"] = 9] = "KILOVOLT_AMPERES";
        /**
         * @generated from protobuf enum value: MEGAVOLT_AMPERES = 10;
         */
        Units[Units["MEGAVOLT_AMPERES"] = 10] = "MEGAVOLT_AMPERES";
        /**
         * @generated from protobuf enum value: VOLT_AMPERES_REACTIVE = 11;
         */
        Units[Units["VOLT_AMPERES_REACTIVE"] = 11] = "VOLT_AMPERES_REACTIVE";
        /**
         * @generated from protobuf enum value: KILOVOLT_AMPERES_REACTIVE = 12;
         */
        Units[Units["KILOVOLT_AMPERES_REACTIVE"] = 12] = "KILOVOLT_AMPERES_REACTIVE";
        /**
         * @generated from protobuf enum value: MEGAVOLT_AMPERES_REACTIVE = 13;
         */
        Units[Units["MEGAVOLT_AMPERES_REACTIVE"] = 13] = "MEGAVOLT_AMPERES_REACTIVE";
        /**
         * @generated from protobuf enum value: DEGREES_PHASE = 14;
         */
        Units[Units["DEGREES_PHASE"] = 14] = "DEGREES_PHASE";
        /**
         * @generated from protobuf enum value: POWER_FACTOR = 15;
         */
        Units[Units["POWER_FACTOR"] = 15] = "POWER_FACTOR";
        /**
         * @generated from protobuf enum value: JOULES = 16;
         */
        Units[Units["JOULES"] = 16] = "JOULES";
        /**
         * @generated from protobuf enum value: KILOJOULES = 17;
         */
        Units[Units["KILOJOULES"] = 17] = "KILOJOULES";
        /**
         * @generated from protobuf enum value: WATT_HOURS = 18;
         */
        Units[Units["WATT_HOURS"] = 18] = "WATT_HOURS";
        /**
         * @generated from protobuf enum value: KILOWATT_HOURS = 19;
         */
        Units[Units["KILOWATT_HOURS"] = 19] = "KILOWATT_HOURS";
        /**
         * @generated from protobuf enum value: BTUS = 20;
         */
        Units[Units["BTUS"] = 20] = "BTUS";
        /**
         * @generated from protobuf enum value: THERMS = 21;
         */
        Units[Units["THERMS"] = 21] = "THERMS";
        /**
         * @generated from protobuf enum value: TON_HOURS = 22;
         */
        Units[Units["TON_HOURS"] = 22] = "TON_HOURS";
        /**
         * @generated from protobuf enum value: JOULES_PER_KILOGRAM_DRY_AIR = 23;
         */
        Units[Units["JOULES_PER_KILOGRAM_DRY_AIR"] = 23] = "JOULES_PER_KILOGRAM_DRY_AIR";
        /**
         * @generated from protobuf enum value: BTUS_PER_POUND_DRY_AIR = 24;
         */
        Units[Units["BTUS_PER_POUND_DRY_AIR"] = 24] = "BTUS_PER_POUND_DRY_AIR";
        /**
         * @generated from protobuf enum value: CYCLES_PER_HOUR = 25;
         */
        Units[Units["CYCLES_PER_HOUR"] = 25] = "CYCLES_PER_HOUR";
        /**
         * @generated from protobuf enum value: CYCLES_PER_MINUTE = 26;
         */
        Units[Units["CYCLES_PER_MINUTE"] = 26] = "CYCLES_PER_MINUTE";
        /**
         * @generated from protobuf enum value: HERTZ = 27;
         */
        Units[Units["HERTZ"] = 27] = "HERTZ";
        /**
         * @generated from protobuf enum value: GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR = 28;
         */
        Units[Units["GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR"] = 28] = "GRAMS_OF_WATER_PER_KILOGRAM_DRY_AIR";
        /**
         * @generated from protobuf enum value: PERCENT_RELATIVE_HUMIDITY = 29;
         */
        Units[Units["PERCENT_RELATIVE_HUMIDITY"] = 29] = "PERCENT_RELATIVE_HUMIDITY";
        /**
         * @generated from protobuf enum value: MILLIMETERS = 30;
         */
        Units[Units["MILLIMETERS"] = 30] = "MILLIMETERS";
        /**
         * @generated from protobuf enum value: METERS = 31;
         */
        Units[Units["METERS"] = 31] = "METERS";
        /**
         * @generated from protobuf enum value: INCHES = 32;
         */
        Units[Units["INCHES"] = 32] = "INCHES";
        /**
         * @generated from protobuf enum value: FEET = 33;
         */
        Units[Units["FEET"] = 33] = "FEET";
        /**
         * @generated from protobuf enum value: WATTS_PER_SQUARE_FOOT = 34;
         */
        Units[Units["WATTS_PER_SQUARE_FOOT"] = 34] = "WATTS_PER_SQUARE_FOOT";
        /**
         * @generated from protobuf enum value: WATTS_PER_SQUARE_METER = 35;
         */
        Units[Units["WATTS_PER_SQUARE_METER"] = 35] = "WATTS_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: LUMENS = 36;
         */
        Units[Units["LUMENS"] = 36] = "LUMENS";
        /**
         * @generated from protobuf enum value: LUXES = 37;
         */
        Units[Units["LUXES"] = 37] = "LUXES";
        /**
         * @generated from protobuf enum value: FOOT_CANDLES = 38;
         */
        Units[Units["FOOT_CANDLES"] = 38] = "FOOT_CANDLES";
        /**
         * @generated from protobuf enum value: KILOGRAMS = 39;
         */
        Units[Units["KILOGRAMS"] = 39] = "KILOGRAMS";
        /**
         * @generated from protobuf enum value: POUNDS_MASS = 40;
         */
        Units[Units["POUNDS_MASS"] = 40] = "POUNDS_MASS";
        /**
         * @generated from protobuf enum value: TONS = 41;
         */
        Units[Units["TONS"] = 41] = "TONS";
        /**
         * @generated from protobuf enum value: KILOGRAMS_PER_SECOND = 42;
         */
        Units[Units["KILOGRAMS_PER_SECOND"] = 42] = "KILOGRAMS_PER_SECOND";
        /**
         * @generated from protobuf enum value: KILOGRAMS_PER_MINUTE = 43;
         */
        Units[Units["KILOGRAMS_PER_MINUTE"] = 43] = "KILOGRAMS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: KILOGRAMS_PER_HOUR = 44;
         */
        Units[Units["KILOGRAMS_PER_HOUR"] = 44] = "KILOGRAMS_PER_HOUR";
        /**
         * @generated from protobuf enum value: POUNDS_MASS_PER_MINUTE = 45;
         */
        Units[Units["POUNDS_MASS_PER_MINUTE"] = 45] = "POUNDS_MASS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: POUNDS_MASS_PER_HOUR = 46;
         */
        Units[Units["POUNDS_MASS_PER_HOUR"] = 46] = "POUNDS_MASS_PER_HOUR";
        /**
         * @generated from protobuf enum value: WATTS = 47;
         */
        Units[Units["WATTS"] = 47] = "WATTS";
        /**
         * @generated from protobuf enum value: KILOWATTS = 48;
         */
        Units[Units["KILOWATTS"] = 48] = "KILOWATTS";
        /**
         * @generated from protobuf enum value: MEGAWATTS = 49;
         */
        Units[Units["MEGAWATTS"] = 49] = "MEGAWATTS";
        /**
         * @generated from protobuf enum value: BTUS_PER_HOUR = 50;
         */
        Units[Units["BTUS_PER_HOUR"] = 50] = "BTUS_PER_HOUR";
        /**
         * @generated from protobuf enum value: HORSEPOWER = 51;
         */
        Units[Units["HORSEPOWER"] = 51] = "HORSEPOWER";
        /**
         * @generated from protobuf enum value: TONS_REFRIGERATION = 52;
         */
        Units[Units["TONS_REFRIGERATION"] = 52] = "TONS_REFRIGERATION";
        /**
         * @generated from protobuf enum value: PASCALS = 53;
         */
        Units[Units["PASCALS"] = 53] = "PASCALS";
        /**
         * @generated from protobuf enum value: KILOPASCALS = 54;
         */
        Units[Units["KILOPASCALS"] = 54] = "KILOPASCALS";
        /**
         * @generated from protobuf enum value: BARS = 55;
         */
        Units[Units["BARS"] = 55] = "BARS";
        /**
         * @generated from protobuf enum value: POUNDS_FORCE_PER_SQUARE_INCH = 56;
         */
        Units[Units["POUNDS_FORCE_PER_SQUARE_INCH"] = 56] = "POUNDS_FORCE_PER_SQUARE_INCH";
        /**
         * @generated from protobuf enum value: CENTIMETERS_OF_WATER = 57;
         */
        Units[Units["CENTIMETERS_OF_WATER"] = 57] = "CENTIMETERS_OF_WATER";
        /**
         * @generated from protobuf enum value: INCHES_OF_WATER = 58;
         */
        Units[Units["INCHES_OF_WATER"] = 58] = "INCHES_OF_WATER";
        /**
         * @generated from protobuf enum value: MILLIMETERS_OF_MERCURY = 59;
         */
        Units[Units["MILLIMETERS_OF_MERCURY"] = 59] = "MILLIMETERS_OF_MERCURY";
        /**
         * @generated from protobuf enum value: CENTIMETERS_OF_MERCURY = 60;
         */
        Units[Units["CENTIMETERS_OF_MERCURY"] = 60] = "CENTIMETERS_OF_MERCURY";
        /**
         * @generated from protobuf enum value: INCHES_OF_MERCURY = 61;
         */
        Units[Units["INCHES_OF_MERCURY"] = 61] = "INCHES_OF_MERCURY";
        /**
         * @generated from protobuf enum value: DEGREES_CELSIUS = 62;
         */
        Units[Units["DEGREES_CELSIUS"] = 62] = "DEGREES_CELSIUS";
        /**
         * @generated from protobuf enum value: DEGREES_KELVIN = 63;
         */
        Units[Units["DEGREES_KELVIN"] = 63] = "DEGREES_KELVIN";
        /**
         * @generated from protobuf enum value: DEGREES_FAHRENHEIT = 64;
         */
        Units[Units["DEGREES_FAHRENHEIT"] = 64] = "DEGREES_FAHRENHEIT";
        /**
         * @generated from protobuf enum value: DEGREE_DAYS_CELSIUS = 65;
         */
        Units[Units["DEGREE_DAYS_CELSIUS"] = 65] = "DEGREE_DAYS_CELSIUS";
        /**
         * @generated from protobuf enum value: DEGREE_DAYS_FAHRENHEIT = 66;
         */
        Units[Units["DEGREE_DAYS_FAHRENHEIT"] = 66] = "DEGREE_DAYS_FAHRENHEIT";
        /**
         * @generated from protobuf enum value: YEARS = 67;
         */
        Units[Units["YEARS"] = 67] = "YEARS";
        /**
         * @generated from protobuf enum value: MONTHS = 68;
         */
        Units[Units["MONTHS"] = 68] = "MONTHS";
        /**
         * @generated from protobuf enum value: WEEKS = 69;
         */
        Units[Units["WEEKS"] = 69] = "WEEKS";
        /**
         * @generated from protobuf enum value: DAYS = 70;
         */
        Units[Units["DAYS"] = 70] = "DAYS";
        /**
         * @generated from protobuf enum value: HOURS = 71;
         */
        Units[Units["HOURS"] = 71] = "HOURS";
        /**
         * @generated from protobuf enum value: MINUTES = 72;
         */
        Units[Units["MINUTES"] = 72] = "MINUTES";
        /**
         * @generated from protobuf enum value: SECONDS = 73;
         */
        Units[Units["SECONDS"] = 73] = "SECONDS";
        /**
         * @generated from protobuf enum value: METERS_PER_SECOND = 74;
         */
        Units[Units["METERS_PER_SECOND"] = 74] = "METERS_PER_SECOND";
        /**
         * @generated from protobuf enum value: KILOMETERS_PER_HOUR = 75;
         */
        Units[Units["KILOMETERS_PER_HOUR"] = 75] = "KILOMETERS_PER_HOUR";
        /**
         * @generated from protobuf enum value: FEET_PER_SECOND = 76;
         */
        Units[Units["FEET_PER_SECOND"] = 76] = "FEET_PER_SECOND";
        /**
         * @generated from protobuf enum value: FEET_PER_MINUTE = 77;
         */
        Units[Units["FEET_PER_MINUTE"] = 77] = "FEET_PER_MINUTE";
        /**
         * @generated from protobuf enum value: MILES_PER_HOUR = 78;
         */
        Units[Units["MILES_PER_HOUR"] = 78] = "MILES_PER_HOUR";
        /**
         * @generated from protobuf enum value: CUBIC_FEET = 79;
         */
        Units[Units["CUBIC_FEET"] = 79] = "CUBIC_FEET";
        /**
         * @generated from protobuf enum value: CUBIC_METERS = 80;
         */
        Units[Units["CUBIC_METERS"] = 80] = "CUBIC_METERS";
        /**
         * @generated from protobuf enum value: IMPERIAL_GALLONS = 81;
         */
        Units[Units["IMPERIAL_GALLONS"] = 81] = "IMPERIAL_GALLONS";
        /**
         * @generated from protobuf enum value: LITERS = 82;
         */
        Units[Units["LITERS"] = 82] = "LITERS";
        /**
         * @generated from protobuf enum value: US_GALLONS = 83;
         */
        Units[Units["US_GALLONS"] = 83] = "US_GALLONS";
        /**
         * @generated from protobuf enum value: CUBIC_FEET_PER_MINUTE = 84;
         */
        Units[Units["CUBIC_FEET_PER_MINUTE"] = 84] = "CUBIC_FEET_PER_MINUTE";
        /**
         * @generated from protobuf enum value: CUBIC_METERS_PER_SECOND = 85;
         */
        Units[Units["CUBIC_METERS_PER_SECOND"] = 85] = "CUBIC_METERS_PER_SECOND";
        /**
         * @generated from protobuf enum value: IMPERIAL_GALLONS_PER_MINUTE = 86;
         */
        Units[Units["IMPERIAL_GALLONS_PER_MINUTE"] = 86] = "IMPERIAL_GALLONS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: LITERS_PER_SECOND = 87;
         */
        Units[Units["LITERS_PER_SECOND"] = 87] = "LITERS_PER_SECOND";
        /**
         * @generated from protobuf enum value: LITERS_PER_MINUTE = 88;
         */
        Units[Units["LITERS_PER_MINUTE"] = 88] = "LITERS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: US_GALLONS_PER_MINUTE = 89;
         */
        Units[Units["US_GALLONS_PER_MINUTE"] = 89] = "US_GALLONS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: DEGREES_ANGULAR = 90;
         */
        Units[Units["DEGREES_ANGULAR"] = 90] = "DEGREES_ANGULAR";
        /**
         * @generated from protobuf enum value: DEGREES_CELSIUS_PER_HOUR = 91;
         */
        Units[Units["DEGREES_CELSIUS_PER_HOUR"] = 91] = "DEGREES_CELSIUS_PER_HOUR";
        /**
         * @generated from protobuf enum value: DEGREES_CELSIUS_PER_MINUTE = 92;
         */
        Units[Units["DEGREES_CELSIUS_PER_MINUTE"] = 92] = "DEGREES_CELSIUS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: DEGREES_FAHRENHEIT_PER_HOUR = 93;
         */
        Units[Units["DEGREES_FAHRENHEIT_PER_HOUR"] = 93] = "DEGREES_FAHRENHEIT_PER_HOUR";
        /**
         * @generated from protobuf enum value: DEGREES_FAHRENHEIT_PER_MINUTE = 94;
         */
        Units[Units["DEGREES_FAHRENHEIT_PER_MINUTE"] = 94] = "DEGREES_FAHRENHEIT_PER_MINUTE";
        /**
         * @generated from protobuf enum value: NO_UNITS = 95;
         */
        Units[Units["NO_UNITS"] = 95] = "NO_UNITS";
        /**
         * @generated from protobuf enum value: PARTS_PER_MILLION = 96;
         */
        Units[Units["PARTS_PER_MILLION"] = 96] = "PARTS_PER_MILLION";
        /**
         * @generated from protobuf enum value: PARTS_PER_BILLION = 97;
         */
        Units[Units["PARTS_PER_BILLION"] = 97] = "PARTS_PER_BILLION";
        /**
         * @generated from protobuf enum value: PERCENT = 98;
         */
        Units[Units["PERCENT"] = 98] = "PERCENT";
        /**
         * @generated from protobuf enum value: PERCENT_PER_SECOND = 99;
         */
        Units[Units["PERCENT_PER_SECOND"] = 99] = "PERCENT_PER_SECOND";
        /**
         * @generated from protobuf enum value: PER_MINUTE = 100;
         */
        Units[Units["PER_MINUTE"] = 100] = "PER_MINUTE";
        /**
         * @generated from protobuf enum value: PER_SECOND = 101;
         */
        Units[Units["PER_SECOND"] = 101] = "PER_SECOND";
        /**
         * @generated from protobuf enum value: PSI_PER_DEGREE_FAHRENHEIT = 102;
         */
        Units[Units["PSI_PER_DEGREE_FAHRENHEIT"] = 102] = "PSI_PER_DEGREE_FAHRENHEIT";
        /**
         * @generated from protobuf enum value: RADIANS = 103;
         */
        Units[Units["RADIANS"] = 103] = "RADIANS";
        /**
         * @generated from protobuf enum value: REVOLUTIONS_PER_MINUTE = 104;
         */
        Units[Units["REVOLUTIONS_PER_MINUTE"] = 104] = "REVOLUTIONS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: CURRENCY1 = 105;
         */
        Units[Units["CURRENCY1"] = 105] = "CURRENCY1";
        /**
         * @generated from protobuf enum value: CURRENCY2 = 106;
         */
        Units[Units["CURRENCY2"] = 106] = "CURRENCY2";
        /**
         * @generated from protobuf enum value: CURRENCY3 = 107;
         */
        Units[Units["CURRENCY3"] = 107] = "CURRENCY3";
        /**
         * @generated from protobuf enum value: CURRENCY4 = 108;
         */
        Units[Units["CURRENCY4"] = 108] = "CURRENCY4";
        /**
         * @generated from protobuf enum value: CURRENCY5 = 109;
         */
        Units[Units["CURRENCY5"] = 109] = "CURRENCY5";
        /**
         * @generated from protobuf enum value: CURRENCY6 = 110;
         */
        Units[Units["CURRENCY6"] = 110] = "CURRENCY6";
        /**
         * @generated from protobuf enum value: CURRENCY7 = 111;
         */
        Units[Units["CURRENCY7"] = 111] = "CURRENCY7";
        /**
         * @generated from protobuf enum value: CURRENCY8 = 112;
         */
        Units[Units["CURRENCY8"] = 112] = "CURRENCY8";
        /**
         * @generated from protobuf enum value: CURRENCY9 = 113;
         */
        Units[Units["CURRENCY9"] = 113] = "CURRENCY9";
        /**
         * @generated from protobuf enum value: CURRENCY10 = 114;
         */
        Units[Units["CURRENCY10"] = 114] = "CURRENCY10";
        /**
         * @generated from protobuf enum value: SQUARE_INCHES = 115;
         */
        Units[Units["SQUARE_INCHES"] = 115] = "SQUARE_INCHES";
        /**
         * @generated from protobuf enum value: SQUARE_CENTIMETERS = 116;
         */
        Units[Units["SQUARE_CENTIMETERS"] = 116] = "SQUARE_CENTIMETERS";
        /**
         * @generated from protobuf enum value: BTUS_PER_POUND = 117;
         */
        Units[Units["BTUS_PER_POUND"] = 117] = "BTUS_PER_POUND";
        /**
         * @generated from protobuf enum value: CENTIMETERS = 118;
         */
        Units[Units["CENTIMETERS"] = 118] = "CENTIMETERS";
        /**
         * @generated from protobuf enum value: POUNDS_MASS_PER_SECOND = 119;
         */
        Units[Units["POUNDS_MASS_PER_SECOND"] = 119] = "POUNDS_MASS_PER_SECOND";
        /**
         * @generated from protobuf enum value: DELTA_DEGREES_FAHRENHEIT = 120;
         */
        Units[Units["DELTA_DEGREES_FAHRENHEIT"] = 120] = "DELTA_DEGREES_FAHRENHEIT";
        /**
         * @generated from protobuf enum value: DELTA_DEGREES_KELVIN = 121;
         */
        Units[Units["DELTA_DEGREES_KELVIN"] = 121] = "DELTA_DEGREES_KELVIN";
        /**
         * @generated from protobuf enum value: KILOOHMS = 122;
         */
        Units[Units["KILOOHMS"] = 122] = "KILOOHMS";
        /**
         * @generated from protobuf enum value: MEGAOHMS = 123;
         */
        Units[Units["MEGAOHMS"] = 123] = "MEGAOHMS";
        /**
         * @generated from protobuf enum value: MILLIVOLTS = 124;
         */
        Units[Units["MILLIVOLTS"] = 124] = "MILLIVOLTS";
        /**
         * @generated from protobuf enum value: KILOJOULES_PER_KILOGRAM = 125;
         */
        Units[Units["KILOJOULES_PER_KILOGRAM"] = 125] = "KILOJOULES_PER_KILOGRAM";
        /**
         * @generated from protobuf enum value: MEGAJOULES = 126;
         */
        Units[Units["MEGAJOULES"] = 126] = "MEGAJOULES";
        /**
         * @generated from protobuf enum value: JOULES_PER_DEGREE_KELVIN = 127;
         */
        Units[Units["JOULES_PER_DEGREE_KELVIN"] = 127] = "JOULES_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: JOULES_PER_KILOGRAM_DEGREE_KELVIN = 128;
         */
        Units[Units["JOULES_PER_KILOGRAM_DEGREE_KELVIN"] = 128] = "JOULES_PER_KILOGRAM_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: KILOHERTZ = 129;
         */
        Units[Units["KILOHERTZ"] = 129] = "KILOHERTZ";
        /**
         * @generated from protobuf enum value: MEGAHERTZ = 130;
         */
        Units[Units["MEGAHERTZ"] = 130] = "MEGAHERTZ";
        /**
         * @generated from protobuf enum value: PER_HOUR = 131;
         */
        Units[Units["PER_HOUR"] = 131] = "PER_HOUR";
        /**
         * @generated from protobuf enum value: MILLIWATTS = 132;
         */
        Units[Units["MILLIWATTS"] = 132] = "MILLIWATTS";
        /**
         * @generated from protobuf enum value: HECTOPASCALS = 133;
         */
        Units[Units["HECTOPASCALS"] = 133] = "HECTOPASCALS";
        /**
         * @generated from protobuf enum value: MILLIBARS = 134;
         */
        Units[Units["MILLIBARS"] = 134] = "MILLIBARS";
        /**
         * @generated from protobuf enum value: CUBIC_METERS_PER_HOUR = 135;
         */
        Units[Units["CUBIC_METERS_PER_HOUR"] = 135] = "CUBIC_METERS_PER_HOUR";
        /**
         * @generated from protobuf enum value: LITERS_PER_HOUR = 136;
         */
        Units[Units["LITERS_PER_HOUR"] = 136] = "LITERS_PER_HOUR";
        /**
         * @generated from protobuf enum value: KILOWATT_HOURS_PER_SQUARE_METER = 137;
         */
        Units[Units["KILOWATT_HOURS_PER_SQUARE_METER"] = 137] = "KILOWATT_HOURS_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: KILOWATT_HOURS_PER_SQUARE_FOOT = 138;
         */
        Units[Units["KILOWATT_HOURS_PER_SQUARE_FOOT"] = 138] = "KILOWATT_HOURS_PER_SQUARE_FOOT";
        /**
         * @generated from protobuf enum value: MEGAJOULES_PER_SQUARE_METER = 139;
         */
        Units[Units["MEGAJOULES_PER_SQUARE_METER"] = 139] = "MEGAJOULES_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: MEGAJOULES_PER_SQUARE_FOOT = 140;
         */
        Units[Units["MEGAJOULES_PER_SQUARE_FOOT"] = 140] = "MEGAJOULES_PER_SQUARE_FOOT";
        /**
         * @generated from protobuf enum value: WATTS_PER_SQUARE_METER_DEGREE_KELVIN = 141;
         */
        Units[Units["WATTS_PER_SQUARE_METER_DEGREE_KELVIN"] = 141] = "WATTS_PER_SQUARE_METER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: CUBIC_FEET_PER_SECOND = 142;
         */
        Units[Units["CUBIC_FEET_PER_SECOND"] = 142] = "CUBIC_FEET_PER_SECOND";
        /**
         * @generated from protobuf enum value: PERCENT_OBSCURATION_PER_FOOT = 143;
         */
        Units[Units["PERCENT_OBSCURATION_PER_FOOT"] = 143] = "PERCENT_OBSCURATION_PER_FOOT";
        /**
         * @generated from protobuf enum value: PERCENT_OBSCURATION_PER_METER = 144;
         */
        Units[Units["PERCENT_OBSCURATION_PER_METER"] = 144] = "PERCENT_OBSCURATION_PER_METER";
        /**
         * @generated from protobuf enum value: MILLIOHMS = 145;
         */
        Units[Units["MILLIOHMS"] = 145] = "MILLIOHMS";
        /**
         * @generated from protobuf enum value: MEGAWATT_HOURS = 146;
         */
        Units[Units["MEGAWATT_HOURS"] = 146] = "MEGAWATT_HOURS";
        /**
         * @generated from protobuf enum value: KILO_BTUS = 147;
         */
        Units[Units["KILO_BTUS"] = 147] = "KILO_BTUS";
        /**
         * @generated from protobuf enum value: MEGA_BTUS = 148;
         */
        Units[Units["MEGA_BTUS"] = 148] = "MEGA_BTUS";
        /**
         * @generated from protobuf enum value: KILOJOULES_PER_KILOGRAM_DRY_AIR = 149;
         */
        Units[Units["KILOJOULES_PER_KILOGRAM_DRY_AIR"] = 149] = "KILOJOULES_PER_KILOGRAM_DRY_AIR";
        /**
         * @generated from protobuf enum value: MEGAJOULES_PER_KILOGRAM_DRY_AIR = 150;
         */
        Units[Units["MEGAJOULES_PER_KILOGRAM_DRY_AIR"] = 150] = "MEGAJOULES_PER_KILOGRAM_DRY_AIR";
        /**
         * @generated from protobuf enum value: KILOJOULES_PER_DEGREE_KELVIN = 151;
         */
        Units[Units["KILOJOULES_PER_DEGREE_KELVIN"] = 151] = "KILOJOULES_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: MEGAJOULES_PER_DEGREE_KELVIN = 152;
         */
        Units[Units["MEGAJOULES_PER_DEGREE_KELVIN"] = 152] = "MEGAJOULES_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: NEWTON = 153;
         */
        Units[Units["NEWTON"] = 153] = "NEWTON";
        /**
         * @generated from protobuf enum value: GRAMS_PER_SECOND = 154;
         */
        Units[Units["GRAMS_PER_SECOND"] = 154] = "GRAMS_PER_SECOND";
        /**
         * @generated from protobuf enum value: GRAMS_PER_MINUTE = 155;
         */
        Units[Units["GRAMS_PER_MINUTE"] = 155] = "GRAMS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: TONS_PER_HOUR = 156;
         */
        Units[Units["TONS_PER_HOUR"] = 156] = "TONS_PER_HOUR";
        /**
         * @generated from protobuf enum value: KILO_BTUS_PER_HOUR = 157;
         */
        Units[Units["KILO_BTUS_PER_HOUR"] = 157] = "KILO_BTUS_PER_HOUR";
        /**
         * @generated from protobuf enum value: HUNDREDTHS_SECONDS = 158;
         */
        Units[Units["HUNDREDTHS_SECONDS"] = 158] = "HUNDREDTHS_SECONDS";
        /**
         * @generated from protobuf enum value: MILLISECONDS = 159;
         */
        Units[Units["MILLISECONDS"] = 159] = "MILLISECONDS";
        /**
         * @generated from protobuf enum value: NEWTON_METERS = 160;
         */
        Units[Units["NEWTON_METERS"] = 160] = "NEWTON_METERS";
        /**
         * @generated from protobuf enum value: MILLIMETERS_PER_SECOND = 161;
         */
        Units[Units["MILLIMETERS_PER_SECOND"] = 161] = "MILLIMETERS_PER_SECOND";
        /**
         * @generated from protobuf enum value: MILLIMETERS_PER_MINUTE = 162;
         */
        Units[Units["MILLIMETERS_PER_MINUTE"] = 162] = "MILLIMETERS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: METERS_PER_MINUTE = 163;
         */
        Units[Units["METERS_PER_MINUTE"] = 163] = "METERS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: METERS_PER_HOUR = 164;
         */
        Units[Units["METERS_PER_HOUR"] = 164] = "METERS_PER_HOUR";
        /**
         * @generated from protobuf enum value: CUBIC_METERS_PER_MINUTE = 165;
         */
        Units[Units["CUBIC_METERS_PER_MINUTE"] = 165] = "CUBIC_METERS_PER_MINUTE";
        /**
         * @generated from protobuf enum value: METERS_PER_SECOND_PER_SECOND = 166;
         */
        Units[Units["METERS_PER_SECOND_PER_SECOND"] = 166] = "METERS_PER_SECOND_PER_SECOND";
        /**
         * @generated from protobuf enum value: AMPERES_PER_METER = 167;
         */
        Units[Units["AMPERES_PER_METER"] = 167] = "AMPERES_PER_METER";
        /**
         * @generated from protobuf enum value: AMPERES_PER_SQUARE_METER = 168;
         */
        Units[Units["AMPERES_PER_SQUARE_METER"] = 168] = "AMPERES_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: AMPERE_SQUARE_METERS = 169;
         */
        Units[Units["AMPERE_SQUARE_METERS"] = 169] = "AMPERE_SQUARE_METERS";
        /**
         * @generated from protobuf enum value: FARADS = 170;
         */
        Units[Units["FARADS"] = 170] = "FARADS";
        /**
         * @generated from protobuf enum value: HENRYS = 171;
         */
        Units[Units["HENRYS"] = 171] = "HENRYS";
        /**
         * @generated from protobuf enum value: OHM_METERS = 172;
         */
        Units[Units["OHM_METERS"] = 172] = "OHM_METERS";
        /**
         * @generated from protobuf enum value: SIEMENS = 173;
         */
        Units[Units["SIEMENS"] = 173] = "SIEMENS";
        /**
         * @generated from protobuf enum value: SIEMENS_PER_METER = 174;
         */
        Units[Units["SIEMENS_PER_METER"] = 174] = "SIEMENS_PER_METER";
        /**
         * @generated from protobuf enum value: TESLAS = 175;
         */
        Units[Units["TESLAS"] = 175] = "TESLAS";
        /**
         * @generated from protobuf enum value: VOLTS_PER_DEGREE_KELVIN = 176;
         */
        Units[Units["VOLTS_PER_DEGREE_KELVIN"] = 176] = "VOLTS_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: VOLTS_PER_METER = 177;
         */
        Units[Units["VOLTS_PER_METER"] = 177] = "VOLTS_PER_METER";
        /**
         * @generated from protobuf enum value: WEBERS = 178;
         */
        Units[Units["WEBERS"] = 178] = "WEBERS";
        /**
         * @generated from protobuf enum value: CANDELAS = 179;
         */
        Units[Units["CANDELAS"] = 179] = "CANDELAS";
        /**
         * @generated from protobuf enum value: CANDELAS_PER_SQUARE_METER = 180;
         */
        Units[Units["CANDELAS_PER_SQUARE_METER"] = 180] = "CANDELAS_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: DEGREES_KELVIN_PER_HOUR = 181;
         */
        Units[Units["DEGREES_KELVIN_PER_HOUR"] = 181] = "DEGREES_KELVIN_PER_HOUR";
        /**
         * @generated from protobuf enum value: DEGREES_KELVIN_PER_MINUTE = 182;
         */
        Units[Units["DEGREES_KELVIN_PER_MINUTE"] = 182] = "DEGREES_KELVIN_PER_MINUTE";
        /**
         * @generated from protobuf enum value: JOULE_SECONDS = 183;
         */
        Units[Units["JOULE_SECONDS"] = 183] = "JOULE_SECONDS";
        /**
         * @generated from protobuf enum value: RADIANS_PER_SECOND = 184;
         */
        Units[Units["RADIANS_PER_SECOND"] = 184] = "RADIANS_PER_SECOND";
        /**
         * @generated from protobuf enum value: SQUARE_METERS_PER_NEWTON = 185;
         */
        Units[Units["SQUARE_METERS_PER_NEWTON"] = 185] = "SQUARE_METERS_PER_NEWTON";
        /**
         * @generated from protobuf enum value: KILOGRAMS_PER_CUBIC_METER = 186;
         */
        Units[Units["KILOGRAMS_PER_CUBIC_METER"] = 186] = "KILOGRAMS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: NEWTON_SECONDS = 187;
         */
        Units[Units["NEWTON_SECONDS"] = 187] = "NEWTON_SECONDS";
        /**
         * @generated from protobuf enum value: NEWTONS_PER_METER = 188;
         */
        Units[Units["NEWTONS_PER_METER"] = 188] = "NEWTONS_PER_METER";
        /**
         * @generated from protobuf enum value: WATTS_PER_METER_PER_DEGREE_KELVIN = 189;
         */
        Units[Units["WATTS_PER_METER_PER_DEGREE_KELVIN"] = 189] = "WATTS_PER_METER_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: MICROSIEMENS = 190;
         */
        Units[Units["MICROSIEMENS"] = 190] = "MICROSIEMENS";
        /**
         * @generated from protobuf enum value: CUBIC_FEET_PER_HOUR = 191;
         */
        Units[Units["CUBIC_FEET_PER_HOUR"] = 191] = "CUBIC_FEET_PER_HOUR";
        /**
         * @generated from protobuf enum value: US_GALLONS_PER_HOUR = 192;
         */
        Units[Units["US_GALLONS_PER_HOUR"] = 192] = "US_GALLONS_PER_HOUR";
        /**
         * @generated from protobuf enum value: KILOMETERS = 193;
         */
        Units[Units["KILOMETERS"] = 193] = "KILOMETERS";
        /**
         * @generated from protobuf enum value: MICROMETERS = 194;
         */
        Units[Units["MICROMETERS"] = 194] = "MICROMETERS";
        /**
         * @generated from protobuf enum value: GRAMS = 195;
         */
        Units[Units["GRAMS"] = 195] = "GRAMS";
        /**
         * @generated from protobuf enum value: MILLIGRAMS = 196;
         */
        Units[Units["MILLIGRAMS"] = 196] = "MILLIGRAMS";
        /**
         * @generated from protobuf enum value: MILLILITERS = 197;
         */
        Units[Units["MILLILITERS"] = 197] = "MILLILITERS";
        /**
         * @generated from protobuf enum value: MILLILITERS_PER_SECOND = 198;
         */
        Units[Units["MILLILITERS_PER_SECOND"] = 198] = "MILLILITERS_PER_SECOND";
        /**
         * @generated from protobuf enum value: DECIBELS = 199;
         */
        Units[Units["DECIBELS"] = 199] = "DECIBELS";
        /**
         * @generated from protobuf enum value: DECIBELS_MILLIVOLT = 200;
         */
        Units[Units["DECIBELS_MILLIVOLT"] = 200] = "DECIBELS_MILLIVOLT";
        /**
         * @generated from protobuf enum value: DECIBELS_VOLT = 201;
         */
        Units[Units["DECIBELS_VOLT"] = 201] = "DECIBELS_VOLT";
        /**
         * @generated from protobuf enum value: MILLISIEMENS = 202;
         */
        Units[Units["MILLISIEMENS"] = 202] = "MILLISIEMENS";
        /**
         * @generated from protobuf enum value: WATT_HOURS_REACTIVE = 203;
         */
        Units[Units["WATT_HOURS_REACTIVE"] = 203] = "WATT_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: KILOWATT_HOURS_REACTIVE = 204;
         */
        Units[Units["KILOWATT_HOURS_REACTIVE"] = 204] = "KILOWATT_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: MEGAWATT_HOURS_REACTIVE = 205;
         */
        Units[Units["MEGAWATT_HOURS_REACTIVE"] = 205] = "MEGAWATT_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: MILLIMETERS_OF_WATER = 206;
         */
        Units[Units["MILLIMETERS_OF_WATER"] = 206] = "MILLIMETERS_OF_WATER";
        /**
         * @generated from protobuf enum value: PER_MILLE = 207;
         */
        Units[Units["PER_MILLE"] = 207] = "PER_MILLE";
        /**
         * @generated from protobuf enum value: GRAMS_PER_GRAM = 208;
         */
        Units[Units["GRAMS_PER_GRAM"] = 208] = "GRAMS_PER_GRAM";
        /**
         * @generated from protobuf enum value: KILOGRAMS_PER_KILOGRAM = 209;
         */
        Units[Units["KILOGRAMS_PER_KILOGRAM"] = 209] = "KILOGRAMS_PER_KILOGRAM";
        /**
         * @generated from protobuf enum value: GRAMS_PER_KILOGRAM = 210;
         */
        Units[Units["GRAMS_PER_KILOGRAM"] = 210] = "GRAMS_PER_KILOGRAM";
        /**
         * @generated from protobuf enum value: MILLIGRAMS_PER_GRAM = 211;
         */
        Units[Units["MILLIGRAMS_PER_GRAM"] = 211] = "MILLIGRAMS_PER_GRAM";
        /**
         * @generated from protobuf enum value: MILLIGRAMS_PER_KILOGRAM = 212;
         */
        Units[Units["MILLIGRAMS_PER_KILOGRAM"] = 212] = "MILLIGRAMS_PER_KILOGRAM";
        /**
         * @generated from protobuf enum value: GRAMS_PER_MILLILITER = 213;
         */
        Units[Units["GRAMS_PER_MILLILITER"] = 213] = "GRAMS_PER_MILLILITER";
        /**
         * @generated from protobuf enum value: GRAMS_PER_LITER = 214;
         */
        Units[Units["GRAMS_PER_LITER"] = 214] = "GRAMS_PER_LITER";
        /**
         * @generated from protobuf enum value: MILLIGRAMS_PER_LITER = 215;
         */
        Units[Units["MILLIGRAMS_PER_LITER"] = 215] = "MILLIGRAMS_PER_LITER";
        /**
         * @generated from protobuf enum value: MICROGRAMS_PER_LITER = 216;
         */
        Units[Units["MICROGRAMS_PER_LITER"] = 216] = "MICROGRAMS_PER_LITER";
        /**
         * @generated from protobuf enum value: GRAMS_PER_CUBIC_METER = 217;
         */
        Units[Units["GRAMS_PER_CUBIC_METER"] = 217] = "GRAMS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: MILLIGRAMS_PER_CUBIC_METER = 218;
         */
        Units[Units["MILLIGRAMS_PER_CUBIC_METER"] = 218] = "MILLIGRAMS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: MICROGRAMS_PER_CUBIC_METER = 219;
         */
        Units[Units["MICROGRAMS_PER_CUBIC_METER"] = 219] = "MICROGRAMS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: NANOGRAMS_PER_CUBIC_METER = 220;
         */
        Units[Units["NANOGRAMS_PER_CUBIC_METER"] = 220] = "NANOGRAMS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: GRAMS_PER_CUBIC_CENTIMETER = 221;
         */
        Units[Units["GRAMS_PER_CUBIC_CENTIMETER"] = 221] = "GRAMS_PER_CUBIC_CENTIMETER";
        /**
         * @generated from protobuf enum value: BECQUERELS = 222;
         */
        Units[Units["BECQUERELS"] = 222] = "BECQUERELS";
        /**
         * @generated from protobuf enum value: KILOBECQUERELS = 223;
         */
        Units[Units["KILOBECQUERELS"] = 223] = "KILOBECQUERELS";
        /**
         * @generated from protobuf enum value: MEGABECQUERELS = 224;
         */
        Units[Units["MEGABECQUERELS"] = 224] = "MEGABECQUERELS";
        /**
         * @generated from protobuf enum value: GRAY = 225;
         */
        Units[Units["GRAY"] = 225] = "GRAY";
        /**
         * @generated from protobuf enum value: MILLIGRAY = 226;
         */
        Units[Units["MILLIGRAY"] = 226] = "MILLIGRAY";
        /**
         * @generated from protobuf enum value: MICROGRAY = 227;
         */
        Units[Units["MICROGRAY"] = 227] = "MICROGRAY";
        /**
         * @generated from protobuf enum value: SIEVERTS = 228;
         */
        Units[Units["SIEVERTS"] = 228] = "SIEVERTS";
        /**
         * @generated from protobuf enum value: MILLISIEVERTS = 229;
         */
        Units[Units["MILLISIEVERTS"] = 229] = "MILLISIEVERTS";
        /**
         * @generated from protobuf enum value: MICROSIEVERTS = 230;
         */
        Units[Units["MICROSIEVERTS"] = 230] = "MICROSIEVERTS";
        /**
         * @generated from protobuf enum value: MICROSIEVERTS_PER_HOUR = 231;
         */
        Units[Units["MICROSIEVERTS_PER_HOUR"] = 231] = "MICROSIEVERTS_PER_HOUR";
        /**
         * @generated from protobuf enum value: DECIBELS_A = 232;
         */
        Units[Units["DECIBELS_A"] = 232] = "DECIBELS_A";
        /**
         * @generated from protobuf enum value: NEPHELOMETRIC_TURBIDITY_UNIT = 233;
         */
        Units[Units["NEPHELOMETRIC_TURBIDITY_UNIT"] = 233] = "NEPHELOMETRIC_TURBIDITY_UNIT";
        /**
         * @generated from protobuf enum value: PH = 234;
         */
        Units[Units["PH"] = 234] = "PH";
        /**
         * @generated from protobuf enum value: GRAMS_PER_SQUARE_METER = 235;
         */
        Units[Units["GRAMS_PER_SQUARE_METER"] = 235] = "GRAMS_PER_SQUARE_METER";
        /**
         * @generated from protobuf enum value: MINUTES_PER_DEGREE_KELVIN = 236;
         */
        Units[Units["MINUTES_PER_DEGREE_KELVIN"] = 236] = "MINUTES_PER_DEGREE_KELVIN";
        /**
         * @generated from protobuf enum value: OHM_METER_SQUARED_PER_METER = 237;
         */
        Units[Units["OHM_METER_SQUARED_PER_METER"] = 237] = "OHM_METER_SQUARED_PER_METER";
        /**
         * @generated from protobuf enum value: AMPERE_SECONDS = 238;
         */
        Units[Units["AMPERE_SECONDS"] = 238] = "AMPERE_SECONDS";
        /**
         * @generated from protobuf enum value: VOLT_AMPERE_HOURS = 239;
         */
        Units[Units["VOLT_AMPERE_HOURS"] = 239] = "VOLT_AMPERE_HOURS";
        /**
         * @generated from protobuf enum value: KILOVOLT_AMPERE_HOURS = 240;
         */
        Units[Units["KILOVOLT_AMPERE_HOURS"] = 240] = "KILOVOLT_AMPERE_HOURS";
        /**
         * @generated from protobuf enum value: MEGAVOLT_AMPERE_HOURS = 241;
         */
        Units[Units["MEGAVOLT_AMPERE_HOURS"] = 241] = "MEGAVOLT_AMPERE_HOURS";
        /**
         * @generated from protobuf enum value: VOLT_AMPERE_HOURS_REACTIVE = 242;
         */
        Units[Units["VOLT_AMPERE_HOURS_REACTIVE"] = 242] = "VOLT_AMPERE_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: KILOVOLT_AMPERE_HOURS_REACTIVE = 243;
         */
        Units[Units["KILOVOLT_AMPERE_HOURS_REACTIVE"] = 243] = "KILOVOLT_AMPERE_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: MEGAVOLT_AMPERE_HOURS_REACTIVE = 244;
         */
        Units[Units["MEGAVOLT_AMPERE_HOURS_REACTIVE"] = 244] = "MEGAVOLT_AMPERE_HOURS_REACTIVE";
        /**
         * @generated from protobuf enum value: VOLT_SQUARE_HOURS = 245;
         */
        Units[Units["VOLT_SQUARE_HOURS"] = 245] = "VOLT_SQUARE_HOURS";
        /**
         * @generated from protobuf enum value: AMPERE_SQUARE_HOURS = 246;
         */
        Units[Units["AMPERE_SQUARE_HOURS"] = 246] = "AMPERE_SQUARE_HOURS";
        /**
         * @generated from protobuf enum value: JOULE_PER_HOURS = 247;
         */
        Units[Units["JOULE_PER_HOURS"] = 247] = "JOULE_PER_HOURS";
        /**
         * @generated from protobuf enum value: CUBIC_FEET_PER_DAY = 248;
         */
        Units[Units["CUBIC_FEET_PER_DAY"] = 248] = "CUBIC_FEET_PER_DAY";
        /**
         * @generated from protobuf enum value: CUBIC_METERS_PER_DAY = 249;
         */
        Units[Units["CUBIC_METERS_PER_DAY"] = 249] = "CUBIC_METERS_PER_DAY";
        /**
         * @generated from protobuf enum value: WATT_HOURS_PER_CUBIC_METER = 250;
         */
        Units[Units["WATT_HOURS_PER_CUBIC_METER"] = 250] = "WATT_HOURS_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: JOULES_PER_CUBIC_METER = 251;
         */
        Units[Units["JOULES_PER_CUBIC_METER"] = 251] = "JOULES_PER_CUBIC_METER";
        /**
         * @generated from protobuf enum value: MOLE_PERCENT = 252;
         */
        Units[Units["MOLE_PERCENT"] = 252] = "MOLE_PERCENT";
        /**
         * @generated from protobuf enum value: PASCAL_SECONDS = 253;
         */
        Units[Units["PASCAL_SECONDS"] = 253] = "PASCAL_SECONDS";
        /**
         * @generated from protobuf enum value: MILLION_STANDARD_CUBIC_FEET_PER_MINUTE = 254;
         */
        Units[Units["MILLION_STANDARD_CUBIC_FEET_PER_MINUTE"] = 254] = "MILLION_STANDARD_CUBIC_FEET_PER_MINUTE";
        /**
         * @generated from protobuf enum value: STANDARD_CUBIC_FEET_PER_DAY = 47808;
         */
        Units[Units["STANDARD_CUBIC_FEET_PER_DAY"] = 47808] = "STANDARD_CUBIC_FEET_PER_DAY";
        /**
         * @generated from protobuf enum value: MILLION_STANDARD_CUBIC_FEET_PER_DAY = 47809;
         */
        Units[Units["MILLION_STANDARD_CUBIC_FEET_PER_DAY"] = 47809] = "MILLION_STANDARD_CUBIC_FEET_PER_DAY";
        /**
         * @generated from protobuf enum value: THOUSAND_CUBIC_FEET_PER_DAY = 47810;
         */
        Units[Units["THOUSAND_CUBIC_FEET_PER_DAY"] = 47810] = "THOUSAND_CUBIC_FEET_PER_DAY";
        /**
         * @generated from protobuf enum value: THOUSAND_STANDARD_CUBIC_FEET_PER_DAY = 47811;
         */
        Units[Units["THOUSAND_STANDARD_CUBIC_FEET_PER_DAY"] = 47811] = "THOUSAND_STANDARD_CUBIC_FEET_PER_DAY";
        /**
         * @generated from protobuf enum value: POUNDS_MASS_PER_DAY = 47812;
         */
        Units[Units["POUNDS_MASS_PER_DAY"] = 47812] = "POUNDS_MASS_PER_DAY";
        /**
         * @generated from protobuf enum value: MILLIREMS = 47814;
         */
        Units[Units["MILLIREMS"] = 47814] = "MILLIREMS";
        /**
         * @generated from protobuf enum value: MILLIREMS_PER_HOUR = 47815;
         */
        Units[Units["MILLIREMS_PER_HOUR"] = 47815] = "MILLIREMS_PER_HOUR";
        /**
         * @generated from protobuf enum value: DEGREES_LOVIBOND = 47816;
         */
        Units[Units["DEGREES_LOVIBOND"] = 47816] = "DEGREES_LOVIBOND";
        /**
         * @generated from protobuf enum value: ALCOHOL_BY_VOLUME = 47817;
         */
        Units[Units["ALCOHOL_BY_VOLUME"] = 47817] = "ALCOHOL_BY_VOLUME";
        /**
         * @generated from protobuf enum value: INTERNATIONAL_BITTERING_UNITS = 47818;
         */
        Units[Units["INTERNATIONAL_BITTERING_UNITS"] = 47818] = "INTERNATIONAL_BITTERING_UNITS";
        /**
         * @generated from protobuf enum value: EUROPEAN_BITTERNESS_UNITS = 47819;
         */
        Units[Units["EUROPEAN_BITTERNESS_UNITS"] = 47819] = "EUROPEAN_BITTERNESS_UNITS";
        /**
         * @generated from protobuf enum value: DEGREES_PLATO = 47820;
         */
        Units[Units["DEGREES_PLATO"] = 47820] = "DEGREES_PLATO";
        /**
         * @generated from protobuf enum value: SPECIFIC_GRAVITY = 47821;
         */
        Units[Units["SPECIFIC_GRAVITY"] = 47821] = "SPECIFIC_GRAVITY";
        /**
         * @generated from protobuf enum value: EUROPEAN_BREWING_CONVENTION = 47822;
         */
        Units[Units["EUROPEAN_BREWING_CONVENTION"] = 47822] = "EUROPEAN_BREWING_CONVENTION";
    })(Units || (Units = {}));

    // @generated message type with reflection information, may provide speed optimized methods
    class Any$Type extends MessageType {
        constructor() {
            super("google.protobuf.Any", [
                { no: 1, name: "type_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
            ]);
        }
        /**
         * Pack the message into a new `Any`.
         *
         * Uses 'type.googleapis.com/full.type.name' as the type URL.
         */
        pack(message, type) {
            return {
                typeUrl: this.typeNameToUrl(type.typeName), value: type.toBinary(message),
            };
        }
        /**
         * Unpack the message from the `Any`.
         */
        unpack(any, type, options) {
            if (!this.contains(any, type))
                throw new Error("Cannot unpack google.protobuf.Any with typeUrl '" + any.typeUrl + "' as " + type.typeName + ".");
            return type.fromBinary(any.value, options);
        }
        /**
         * Does the given `Any` contain a packed message of the given type?
         */
        contains(any, type) {
            if (!any.typeUrl.length)
                return false;
            let wants = typeof type == "string" ? type : type.typeName;
            let has = this.typeUrlToName(any.typeUrl);
            return wants === has;
        }
        /**
         * Convert the message to canonical JSON value.
         *
         * You have to provide the `typeRegistry` option so that the
         * packed message can be converted to JSON.
         *
         * The `typeRegistry` option is also required to read
         * `google.protobuf.Any` from JSON format.
         */
        internalJsonWrite(any, options) {
            var _a;
            if (any.typeUrl === "")
                return {};
            let typeName = this.typeUrlToName(any.typeUrl);
            let opt = jsonWriteOptions(options);
            let type = (_a = opt.typeRegistry) === null || _a === void 0 ? void 0 : _a.find(t => t.typeName === typeName);
            if (!type)
                throw new globalThis.Error("Unable to convert google.protobuf.Any with typeUrl '" + any.typeUrl + "' to JSON. The specified type " + typeName + " is not available in the type registry.");
            let value = type.fromBinary(any.value, { readUnknownField: false });
            let json = type.internalJsonWrite(value, opt);
            if (typeName.startsWith("google.protobuf.") || !isJsonObject(json))
                json = { value: json };
            json["@type"] = any.typeUrl;
            return json;
        }
        internalJsonRead(json, options, target) {
            var _a;
            if (!isJsonObject(json))
                throw new globalThis.Error("Unable to parse google.protobuf.Any from JSON " + typeofJsonValue(json) + ".");
            if (typeof json["@type"] != "string" || json["@type"] == "")
                return this.create();
            let typeName = this.typeUrlToName(json["@type"]);
            let type = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.find(t => t.typeName == typeName);
            if (!type)
                throw new globalThis.Error("Unable to parse google.protobuf.Any from JSON. The specified type " + typeName + " is not available in the type registry.");
            let value;
            if (typeName.startsWith("google.protobuf.") && json.hasOwnProperty("value"))
                value = type.fromJson(json["value"], options);
            else {
                let copy = Object.assign({}, json);
                delete copy["@type"];
                value = type.fromJson(copy, options);
            }
            if (target === undefined)
                target = this.create();
            target.typeUrl = json["@type"];
            target.value = type.toBinary(value);
            return target;
        }
        typeNameToUrl(name) {
            if (!name.length)
                throw new Error("invalid type name: " + name);
            return "type.googleapis.com/" + name;
        }
        typeUrlToName(url) {
            if (!url.length)
                throw new Error("invalid type url: " + url);
            let slash = url.lastIndexOf("/");
            let name = slash > 0 ? url.substring(slash + 1) : url;
            if (!name.length)
                throw new Error("invalid type url: " + url);
            return name;
        }
        create(value) {
            const message = { typeUrl: "", value: new Uint8Array(0) };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string type_url */ 1:
                        message.typeUrl = reader.string();
                        break;
                    case /* bytes value */ 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string type_url = 1; */
            if (message.typeUrl !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.typeUrl);
            /* bytes value = 2; */
            if (message.value.length)
                writer.tag(2, WireType.LengthDelimited).bytes(message.value);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message google.protobuf.Any
     */
    const Any = new Any$Type();

    // @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_number,server_grpc1
    // @generated from protobuf file "normalgw/hpl/v1/point.proto" (package "normalgw.hpl.v1", syntax proto3)
    // tslint:disable
    //
    //
    //  package
    //
    /**
     * @generated from protobuf enum normalgw.hpl.v1.CreateExportRequest.ExportFormat
     */
    var CreateExportRequest_ExportFormat;
    (function (CreateExportRequest_ExportFormat) {
        /**
         * @generated from protobuf enum value: FORMAT_CSV = 0;
         */
        CreateExportRequest_ExportFormat[CreateExportRequest_ExportFormat["FORMAT_CSV"] = 0] = "FORMAT_CSV";
        /**
         * @generated from protobuf enum value: FORMAT_JSONL = 1;
         */
        CreateExportRequest_ExportFormat[CreateExportRequest_ExportFormat["FORMAT_JSONL"] = 1] = "FORMAT_JSONL";
    })(CreateExportRequest_ExportFormat || (CreateExportRequest_ExportFormat = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.ObserveDataUpdatesReply.ChangeType
     */
    var ObserveDataUpdatesReply_ChangeType;
    (function (ObserveDataUpdatesReply_ChangeType) {
        /**
         * @generated from protobuf enum value: VALUE = 0;
         */
        ObserveDataUpdatesReply_ChangeType[ObserveDataUpdatesReply_ChangeType["VALUE"] = 0] = "VALUE";
        /**
         * @generated from protobuf enum value: ADDED = 1;
         */
        ObserveDataUpdatesReply_ChangeType[ObserveDataUpdatesReply_ChangeType["ADDED"] = 1] = "ADDED";
        /**
         * @generated from protobuf enum value: DELETED = 2;
         */
        ObserveDataUpdatesReply_ChangeType[ObserveDataUpdatesReply_ChangeType["DELETED"] = 2] = "DELETED";
    })(ObserveDataUpdatesReply_ChangeType || (ObserveDataUpdatesReply_ChangeType = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.DataSummary.DataType
     */
    var DataSummary_DataType;
    (function (DataSummary_DataType) {
        /**
         * @generated from protobuf enum value: Discrete = 0;
         */
        DataSummary_DataType[DataSummary_DataType["Discrete"] = 0] = "Discrete";
        /**
         * @generated from protobuf enum value: Continuous = 1;
         */
        DataSummary_DataType[DataSummary_DataType["Continuous"] = 1] = "Continuous";
    })(DataSummary_DataType || (DataSummary_DataType = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.PointType
     */
    var PointType;
    (function (PointType) {
        /**
         * @generated from protobuf enum value: UNKNOWN = 0;
         */
        PointType[PointType["UNKNOWN"] = 0] = "UNKNOWN";
        /**
         * @generated from protobuf enum value: POINT = 1;
         */
        PointType[PointType["POINT"] = 1] = "POINT";
        /**
         * @generated from protobuf enum value: DEVICE = 2;
         */
        PointType[PointType["DEVICE"] = 2] = "DEVICE";
        /**
         * @generated from protobuf enum value: VARIABLE = 3;
         */
        PointType[PointType["VARIABLE"] = 3] = "VARIABLE";
        /**
         * @generated from protobuf enum value: EQUIPMENT = 4;
         */
        PointType[PointType["EQUIPMENT"] = 4] = "EQUIPMENT";
    })(PointType || (PointType = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.LayerKind
     */
    var LayerKind;
    (function (LayerKind) {
        /**
         * @generated from protobuf enum value: LAYER_BASE = 0;
         */
        LayerKind[LayerKind["LAYER_BASE"] = 0] = "LAYER_BASE";
        /**
         * @generated from protobuf enum value: LAYER_UNION = 1;
         */
        LayerKind[LayerKind["LAYER_UNION"] = 1] = "LAYER_UNION";
    })(LayerKind || (LayerKind = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.FieldType
     */
    var FieldType;
    (function (FieldType) {
        /**
         * @generated from protobuf enum value: TEXT = 0;
         */
        FieldType[FieldType["TEXT"] = 0] = "TEXT";
        /**
         * @generated from protobuf enum value: NUMERIC = 1;
         */
        FieldType[FieldType["NUMERIC"] = 1] = "NUMERIC";
        /**
         * @generated from protobuf enum value: TAG = 2;
         */
        FieldType[FieldType["TAG"] = 2] = "TAG";
        /**
         * @generated from protobuf enum value: GEO = 3;
         */
        FieldType[FieldType["GEO"] = 3] = "GEO";
        /**
         * @generated from protobuf enum value: REFERENCE = 4;
         */
        FieldType[FieldType["REFERENCE"] = 4] = "REFERENCE";
        /**
         * @generated from protobuf enum value: LAYER = 5;
         */
        FieldType[FieldType["LAYER"] = 5] = "LAYER";
        /**
         * @generated from protobuf enum value: PATH = 6;
         */
        FieldType[FieldType["PATH"] = 6] = "PATH";
    })(FieldType || (FieldType = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.GetPointsResponseFormat
     */
    var GetPointsResponseFormat;
    (function (GetPointsResponseFormat) {
        /**
         * @generated from protobuf enum value: LAYERS_COLLAPSED = 0;
         */
        GetPointsResponseFormat[GetPointsResponseFormat["LAYERS_COLLAPSED"] = 0] = "LAYERS_COLLAPSED";
        /**
         * @generated from protobuf enum value: LAYERS_SPLIT = 1;
         */
        GetPointsResponseFormat[GetPointsResponseFormat["LAYERS_SPLIT"] = 1] = "LAYERS_SPLIT";
    })(GetPointsResponseFormat || (GetPointsResponseFormat = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.PointAggregatorType
     */
    var PointAggregatorType;
    (function (PointAggregatorType) {
        /**
         * Count Points
         *
         * @generated from protobuf enum value: COUNT = 0;
         */
        PointAggregatorType[PointAggregatorType["COUNT"] = 0] = "COUNT";
        /**
         * Count distinct values by `field`
         *
         * @generated from protobuf enum value: COUNT_DISTINCT = 1;
         */
        PointAggregatorType[PointAggregatorType["COUNT_DISTINCT"] = 1] = "COUNT_DISTINCT";
        /**
         * Sum values from `field`
         *
         * @generated from protobuf enum value: SUM = 2;
         */
        PointAggregatorType[PointAggregatorType["SUM"] = 2] = "SUM";
        /**
         * Min value from `field`
         *
         * @generated from protobuf enum value: MIN = 3;
         */
        PointAggregatorType[PointAggregatorType["MIN"] = 3] = "MIN";
        /**
         * Max value from `field`
         *
         * @generated from protobuf enum value: MAX = 4;
         */
        PointAggregatorType[PointAggregatorType["MAX"] = 4] = "MAX";
        /**
         * Avg value from `field`
         *
         * @generated from protobuf enum value: AVG = 5;
         */
        PointAggregatorType[PointAggregatorType["AVG"] = 5] = "AVG";
        /**
         * List values from `field`
         *
         * @generated from protobuf enum value: LIST = 6;
         */
        PointAggregatorType[PointAggregatorType["LIST"] = 6] = "LIST";
    })(PointAggregatorType || (PointAggregatorType = {}));
    // @generated message type with reflection information, may provide speed optimized methods
    class LayeredAttributes$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.LayeredAttributes", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "attrs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
            ]);
        }
        create(value) {
            const message = { layer: "", attrs: {} };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* map<string, string> attrs */ 2:
                        this.binaryReadMap2(message.attrs, reader, options);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap2(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.hpl.v1.LayeredAttributes.attrs");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* map<string, string> attrs = 2; */
            for (let k of Object.keys(message.attrs))
                writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.attrs[k]).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.LayeredAttributes
     */
    const LayeredAttributes = new LayeredAttributes$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Point$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Point", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "normalgw.hpl.v1.not_updatable": true } },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "normalgw.hpl.v1.not_updatable": true } },
                { no: 6, name: "attrs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
                { no: 16, name: "split_attrs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LayeredAttributes, options: { "normalgw.hpl.v1.not_updatable": true } },
                { no: 7, name: "hpldata", kind: "message", T: () => Any },
                { no: 8, name: "period", kind: "message", T: () => Duration },
                { no: 9, name: "cov", kind: "message", T: () => CovSettings },
                { no: 10, name: "latest_value", kind: "message", T: () => Value, options: { "normalgw.hpl.v1.not_updatable": true } },
                { no: 11, name: "display_units", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 19, name: "units", kind: "enum", T: () => ["normalgw.hpl.v1.Units", Units] },
                { no: 12, name: "enum", kind: "message", T: () => PointEnum },
                { no: 13, name: "parent_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 14, name: "protocol_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 15, name: "point_type", kind: "enum", T: () => ["normalgw.hpl.v1.PointType", PointType] },
                { no: 17, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 18, name: "parent_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 20, name: "data_attrs", kind: "message", T: () => Point_DataAttributes, options: { "normalgw.hpl.v1.not_updatable": true } }
            ]);
        }
        create(value) {
            const message = { uuid: "", name: "", layer: "", version: "", attrs: {}, splitAttrs: [], displayUnits: "", units: 0, parentUuid: "", protocolId: "", pointType: 0, description: "", parentName: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* string layer */ 3:
                        message.layer = reader.string();
                        break;
                    case /* string version */ 5:
                        message.version = reader.string();
                        break;
                    case /* map<string, string> attrs */ 6:
                        this.binaryReadMap6(message.attrs, reader, options);
                        break;
                    case /* repeated normalgw.hpl.v1.LayeredAttributes split_attrs */ 16:
                        message.splitAttrs.push(LayeredAttributes.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* google.protobuf.Any hpldata */ 7:
                        message.hpldata = Any.internalBinaryRead(reader, reader.uint32(), options, message.hpldata);
                        break;
                    case /* google.protobuf.Duration period */ 8:
                        message.period = Duration.internalBinaryRead(reader, reader.uint32(), options, message.period);
                        break;
                    case /* normalgw.hpl.v1.CovSettings cov */ 9:
                        message.cov = CovSettings.internalBinaryRead(reader, reader.uint32(), options, message.cov);
                        break;
                    case /* normalgw.hpl.v1.Value latest_value */ 10:
                        message.latestValue = Value.internalBinaryRead(reader, reader.uint32(), options, message.latestValue);
                        break;
                    case /* string display_units */ 11:
                        message.displayUnits = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Units units */ 19:
                        message.units = reader.int32();
                        break;
                    case /* normalgw.hpl.v1.PointEnum enum */ 12:
                        message.enum = PointEnum.internalBinaryRead(reader, reader.uint32(), options, message.enum);
                        break;
                    case /* string parent_uuid */ 13:
                        message.parentUuid = reader.string();
                        break;
                    case /* string protocol_id */ 14:
                        message.protocolId = reader.string();
                        break;
                    case /* normalgw.hpl.v1.PointType point_type */ 15:
                        message.pointType = reader.int32();
                        break;
                    case /* string description */ 17:
                        message.description = reader.string();
                        break;
                    case /* string parent_name */ 18:
                        message.parentName = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Point.DataAttributes data_attrs */ 20:
                        message.dataAttrs = Point_DataAttributes.internalBinaryRead(reader, reader.uint32(), options, message.dataAttrs);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap6(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.hpl.v1.Point.attrs");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* string layer = 3; */
            if (message.layer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.layer);
            /* string version = 5; */
            if (message.version !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.version);
            /* map<string, string> attrs = 6; */
            for (let k of Object.keys(message.attrs))
                writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.attrs[k]).join();
            /* repeated normalgw.hpl.v1.LayeredAttributes split_attrs = 16; */
            for (let i = 0; i < message.splitAttrs.length; i++)
                LayeredAttributes.internalBinaryWrite(message.splitAttrs[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Any hpldata = 7; */
            if (message.hpldata)
                Any.internalBinaryWrite(message.hpldata, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Duration period = 8; */
            if (message.period)
                Duration.internalBinaryWrite(message.period, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.CovSettings cov = 9; */
            if (message.cov)
                CovSettings.internalBinaryWrite(message.cov, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Value latest_value = 10; */
            if (message.latestValue)
                Value.internalBinaryWrite(message.latestValue, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
            /* string display_units = 11; */
            if (message.displayUnits !== "")
                writer.tag(11, WireType.LengthDelimited).string(message.displayUnits);
            /* normalgw.hpl.v1.Units units = 19; */
            if (message.units !== 0)
                writer.tag(19, WireType.Varint).int32(message.units);
            /* normalgw.hpl.v1.PointEnum enum = 12; */
            if (message.enum)
                PointEnum.internalBinaryWrite(message.enum, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
            /* string parent_uuid = 13; */
            if (message.parentUuid !== "")
                writer.tag(13, WireType.LengthDelimited).string(message.parentUuid);
            /* string protocol_id = 14; */
            if (message.protocolId !== "")
                writer.tag(14, WireType.LengthDelimited).string(message.protocolId);
            /* normalgw.hpl.v1.PointType point_type = 15; */
            if (message.pointType !== 0)
                writer.tag(15, WireType.Varint).int32(message.pointType);
            /* string description = 17; */
            if (message.description !== "")
                writer.tag(17, WireType.LengthDelimited).string(message.description);
            /* string parent_name = 18; */
            if (message.parentName !== "")
                writer.tag(18, WireType.LengthDelimited).string(message.parentName);
            /* normalgw.hpl.v1.Point.DataAttributes data_attrs = 20; */
            if (message.dataAttrs)
                Point_DataAttributes.internalBinaryWrite(message.dataAttrs, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Point
     */
    const Point = new Point$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Point_DataAttributes$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Point.DataAttributes", [
                { no: 1, name: "max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 2, name: "min", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 3, name: "median", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
            ]);
        }
        create(value) {
            const message = { max: 0, min: 0, median: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* float max */ 1:
                        message.max = reader.float();
                        break;
                    case /* float min */ 2:
                        message.min = reader.float();
                        break;
                    case /* float median */ 3:
                        message.median = reader.float();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* float max = 1; */
            if (message.max !== 0)
                writer.tag(1, WireType.Bit32).float(message.max);
            /* float min = 2; */
            if (message.min !== 0)
                writer.tag(2, WireType.Bit32).float(message.min);
            /* float median = 3; */
            if (message.median !== 0)
                writer.tag(3, WireType.Bit32).float(message.median);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Point.DataAttributes
     */
    const Point_DataAttributes = new Point_DataAttributes$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class PointEnum$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.PointEnum", [
                { no: 1, name: "values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { values: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string values */ 1:
                        message.values.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string values = 1; */
            for (let i = 0; i < message.values.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.values[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.PointEnum
     */
    const PointEnum = new PointEnum$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CovSettings$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CovSettings", [
                { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 2, name: "threshold", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
            ]);
        }
        create(value) {
            const message = { enabled: false, threshold: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* bool enabled */ 1:
                        message.enabled = reader.bool();
                        break;
                    case /* float threshold */ 2:
                        message.threshold = reader.float();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* bool enabled = 1; */
            if (message.enabled !== false)
                writer.tag(1, WireType.Varint).bool(message.enabled);
            /* float threshold = 2; */
            if (message.threshold !== 0)
                writer.tag(2, WireType.Bit32).float(message.threshold);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CovSettings
     */
    const CovSettings = new CovSettings$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Value$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Value", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "null", kind: "scalar", oneof: "valueType", T: 8 /*ScalarType.BOOL*/ },
                { no: 3, name: "boolean", kind: "scalar", oneof: "valueType", T: 8 /*ScalarType.BOOL*/ },
                { no: 4, name: "unsigned", kind: "scalar", oneof: "valueType", T: 13 /*ScalarType.UINT32*/ },
                { no: 5, name: "signed", kind: "scalar", oneof: "valueType", T: 5 /*ScalarType.INT32*/ },
                { no: 6, name: "real", kind: "scalar", oneof: "valueType", T: 2 /*ScalarType.FLOAT*/ },
                { no: 7, name: "double", kind: "scalar", oneof: "valueType", T: 1 /*ScalarType.DOUBLE*/ },
                { no: 8, name: "octet_string", kind: "scalar", oneof: "valueType", T: 12 /*ScalarType.BYTES*/ },
                { no: 9, name: "character_string", kind: "scalar", oneof: "valueType", T: 9 /*ScalarType.STRING*/ },
                { no: 10, name: "meta", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { valueType: { oneofKind: undefined } };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* bool null */ 2:
                        message.valueType = {
                            oneofKind: "null",
                            null: reader.bool()
                        };
                        break;
                    case /* bool boolean */ 3:
                        message.valueType = {
                            oneofKind: "boolean",
                            boolean: reader.bool()
                        };
                        break;
                    case /* uint32 unsigned */ 4:
                        message.valueType = {
                            oneofKind: "unsigned",
                            unsigned: reader.uint32()
                        };
                        break;
                    case /* int32 signed */ 5:
                        message.valueType = {
                            oneofKind: "signed",
                            signed: reader.int32()
                        };
                        break;
                    case /* float real */ 6:
                        message.valueType = {
                            oneofKind: "real",
                            real: reader.float()
                        };
                        break;
                    case /* double double */ 7:
                        message.valueType = {
                            oneofKind: "double",
                            double: reader.double()
                        };
                        break;
                    case /* bytes octet_string */ 8:
                        message.valueType = {
                            oneofKind: "octetString",
                            octetString: reader.bytes()
                        };
                        break;
                    case /* string character_string */ 9:
                        message.valueType = {
                            oneofKind: "characterString",
                            characterString: reader.string()
                        };
                        break;
                    case /* google.protobuf.Any meta */ 10:
                        message.meta = Any.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* bool null = 2; */
            if (message.valueType.oneofKind === "null")
                writer.tag(2, WireType.Varint).bool(message.valueType.null);
            /* bool boolean = 3; */
            if (message.valueType.oneofKind === "boolean")
                writer.tag(3, WireType.Varint).bool(message.valueType.boolean);
            /* uint32 unsigned = 4; */
            if (message.valueType.oneofKind === "unsigned")
                writer.tag(4, WireType.Varint).uint32(message.valueType.unsigned);
            /* int32 signed = 5; */
            if (message.valueType.oneofKind === "signed")
                writer.tag(5, WireType.Varint).int32(message.valueType.signed);
            /* float real = 6; */
            if (message.valueType.oneofKind === "real")
                writer.tag(6, WireType.Bit32).float(message.valueType.real);
            /* double double = 7; */
            if (message.valueType.oneofKind === "double")
                writer.tag(7, WireType.Bit64).double(message.valueType.double);
            /* bytes octet_string = 8; */
            if (message.valueType.oneofKind === "octetString")
                writer.tag(8, WireType.LengthDelimited).bytes(message.valueType.octetString);
            /* string character_string = 9; */
            if (message.valueType.oneofKind === "characterString")
                writer.tag(9, WireType.LengthDelimited).string(message.valueType.characterString);
            /* google.protobuf.Any meta = 10; */
            if (message.meta)
                Any.internalBinaryWrite(message.meta, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Value
     */
    const Value = new Value$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Error$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Error", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "error", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { message: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* string message */ 2:
                        message.message = reader.string();
                        break;
                    case /* google.protobuf.Any error */ 3:
                        message.error = Any.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* string message = 2; */
            if (message.message !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.message);
            /* google.protobuf.Any error = 3; */
            if (message.error)
                Any.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Error
     */
    const Error$1 = new Error$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Data$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Data", [
                { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Value }
            ]);
        }
        create(value) {
            const message = { data: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Value data */ 1:
                        message.data.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Value data = 1; */
            for (let i = 0; i < message.data.length; i++)
                Value.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Data
     */
    new Data$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class LayerComponent$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.LayerComponent", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "type", kind: "enum", T: () => ["normalgw.hpl.v1.FieldType", FieldType] },
                { no: 3, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { name: "", type: 0, options: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    case /* normalgw.hpl.v1.FieldType type */ 2:
                        message.type = reader.int32();
                        break;
                    case /* repeated string options */ 3:
                        message.options.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            /* normalgw.hpl.v1.FieldType type = 2; */
            if (message.type !== 0)
                writer.tag(2, WireType.Varint).int32(message.type);
            /* repeated string options = 3; */
            for (let i = 0; i < message.options.length; i++)
                writer.tag(3, WireType.LengthDelimited).string(message.options[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.LayerComponent
     */
    const LayerComponent = new LayerComponent$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Layer$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Layer", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "kind", kind: "enum", T: () => ["normalgw.hpl.v1.LayerKind", LayerKind] },
                { no: 4, name: "components", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 8, name: "component_options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 10, name: "component_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["normalgw.hpl.v1.FieldType", FieldType] },
                { no: 5, name: "update_attr_mask", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "configuration", kind: "message", T: () => Any },
                { no: 7, name: "point_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 9, name: "indexed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 11, name: "suggested_extraction_attrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 12, name: "default_display_attrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 13, name: "default_grouping_attrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 14, name: "structured_components", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LayerComponent }
            ]);
        }
        create(value) {
            const message = { name: "", description: "", kind: 0, components: [], componentOptions: [], componentTypes: [], updateAttrMask: [], pointCount: 0, indexed: false, suggestedExtractionAttrs: [], defaultDisplayAttrs: [], defaultGroupingAttrs: [], structuredComponents: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    case /* string description */ 2:
                        message.description = reader.string();
                        break;
                    case /* normalgw.hpl.v1.LayerKind kind */ 3:
                        message.kind = reader.int32();
                        break;
                    case /* repeated string components = 4 [deprecated = true];*/ 4:
                        message.components.push(reader.string());
                        break;
                    case /* repeated string component_options = 8 [deprecated = true];*/ 8:
                        message.componentOptions.push(reader.string());
                        break;
                    case /* repeated normalgw.hpl.v1.FieldType component_types = 10 [deprecated = true];*/ 10:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.componentTypes.push(reader.int32());
                        else
                            message.componentTypes.push(reader.int32());
                        break;
                    case /* repeated string update_attr_mask */ 5:
                        message.updateAttrMask.push(reader.string());
                        break;
                    case /* google.protobuf.Any configuration */ 6:
                        message.configuration = Any.internalBinaryRead(reader, reader.uint32(), options, message.configuration);
                        break;
                    case /* int64 point_count */ 7:
                        message.pointCount = reader.int64().toNumber();
                        break;
                    case /* bool indexed */ 9:
                        message.indexed = reader.bool();
                        break;
                    case /* repeated string suggested_extraction_attrs */ 11:
                        message.suggestedExtractionAttrs.push(reader.string());
                        break;
                    case /* repeated string default_display_attrs */ 12:
                        message.defaultDisplayAttrs.push(reader.string());
                        break;
                    case /* repeated string default_grouping_attrs */ 13:
                        message.defaultGroupingAttrs.push(reader.string());
                        break;
                    case /* repeated normalgw.hpl.v1.LayerComponent structured_components */ 14:
                        message.structuredComponents.push(LayerComponent.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            /* string description = 2; */
            if (message.description !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.description);
            /* normalgw.hpl.v1.LayerKind kind = 3; */
            if (message.kind !== 0)
                writer.tag(3, WireType.Varint).int32(message.kind);
            /* repeated string components = 4 [deprecated = true]; */
            for (let i = 0; i < message.components.length; i++)
                writer.tag(4, WireType.LengthDelimited).string(message.components[i]);
            /* repeated string component_options = 8 [deprecated = true]; */
            for (let i = 0; i < message.componentOptions.length; i++)
                writer.tag(8, WireType.LengthDelimited).string(message.componentOptions[i]);
            /* repeated normalgw.hpl.v1.FieldType component_types = 10 [deprecated = true]; */
            if (message.componentTypes.length) {
                writer.tag(10, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.componentTypes.length; i++)
                    writer.int32(message.componentTypes[i]);
                writer.join();
            }
            /* repeated string update_attr_mask = 5; */
            for (let i = 0; i < message.updateAttrMask.length; i++)
                writer.tag(5, WireType.LengthDelimited).string(message.updateAttrMask[i]);
            /* google.protobuf.Any configuration = 6; */
            if (message.configuration)
                Any.internalBinaryWrite(message.configuration, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* int64 point_count = 7; */
            if (message.pointCount !== 0)
                writer.tag(7, WireType.Varint).int64(message.pointCount);
            /* bool indexed = 9; */
            if (message.indexed !== false)
                writer.tag(9, WireType.Varint).bool(message.indexed);
            /* repeated string suggested_extraction_attrs = 11; */
            for (let i = 0; i < message.suggestedExtractionAttrs.length; i++)
                writer.tag(11, WireType.LengthDelimited).string(message.suggestedExtractionAttrs[i]);
            /* repeated string default_display_attrs = 12; */
            for (let i = 0; i < message.defaultDisplayAttrs.length; i++)
                writer.tag(12, WireType.LengthDelimited).string(message.defaultDisplayAttrs[i]);
            /* repeated string default_grouping_attrs = 13; */
            for (let i = 0; i < message.defaultGroupingAttrs.length; i++)
                writer.tag(13, WireType.LengthDelimited).string(message.defaultGroupingAttrs[i]);
            /* repeated normalgw.hpl.v1.LayerComponent structured_components = 14; */
            for (let i = 0; i < message.structuredComponents.length; i++)
                LayerComponent.internalBinaryWrite(message.structuredComponents[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Layer
     */
    const Layer = new Layer$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetLayersRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetLayersRequest", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { name: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetLayersRequest
     */
    const GetLayersRequest = new GetLayersRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetLayersReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetLayersReply", [
                { no: 1, name: "layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Layer },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { layers: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Layer layers */ 1:
                        message.layers.push(Layer.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Layer layers = 1; */
            for (let i = 0; i < message.layers.length; i++)
                Layer.internalBinaryWrite(message.layers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetLayersReply
     */
    const GetLayersReply = new GetLayersReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateLayerRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CreateLayerRequest", [
                { no: 1, name: "layer", kind: "message", T: () => Layer }
            ]);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.hpl.v1.Layer layer */ 1:
                        message.layer = Layer.internalBinaryRead(reader, reader.uint32(), options, message.layer);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.hpl.v1.Layer layer = 1; */
            if (message.layer)
                Layer.internalBinaryWrite(message.layer, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CreateLayerRequest
     */
    const CreateLayerRequest = new CreateLayerRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateLayerReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CreateLayerReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CreateLayerReply
     */
    const CreateLayerReply = new CreateLayerReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteLayerRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteLayerRequest", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { name: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteLayerRequest
     */
    const DeleteLayerRequest = new DeleteLayerRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteLayerReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteLayerReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteLayerReply
     */
    const DeleteLayerReply = new DeleteLayerReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateLayerRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.UpdateLayerRequest", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.UpdateLayerRequest
     */
    const UpdateLayerRequest = new UpdateLayerRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateLayerReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.UpdateLayerReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.UpdateLayerReply
     */
    const UpdateLayerReply = new UpdateLayerReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class LayerMigration$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.LayerMigration", [
                { no: 1, name: "ensure_layers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Layer },
                { no: 2, name: "delete_layers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { ensureLayers: [], deleteLayers: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Layer ensure_layers */ 1:
                        message.ensureLayers.push(Layer.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated string delete_layers */ 2:
                        message.deleteLayers.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Layer ensure_layers = 1; */
            for (let i = 0; i < message.ensureLayers.length; i++)
                Layer.internalBinaryWrite(message.ensureLayers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* repeated string delete_layers = 2; */
            for (let i = 0; i < message.deleteLayers.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.deleteLayers[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.LayerMigration
     */
    new LayerMigration$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class FieldQuery$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.FieldQuery", [
                { no: 1, name: "property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "numeric", kind: "message", T: () => NumericQuery },
                { no: 4, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "wildcard", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { property: "", text: "", layer: "", wildcard: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string property */ 1:
                        message.property = reader.string();
                        break;
                    case /* string text */ 2:
                        message.text = reader.string();
                        break;
                    case /* normalgw.hpl.v1.NumericQuery numeric */ 3:
                        message.numeric = NumericQuery.internalBinaryRead(reader, reader.uint32(), options, message.numeric);
                        break;
                    case /* string layer */ 4:
                        message.layer = reader.string();
                        break;
                    case /* bool wildcard */ 5:
                        message.wildcard = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string property = 1; */
            if (message.property !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.property);
            /* string text = 2; */
            if (message.text !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.text);
            /* normalgw.hpl.v1.NumericQuery numeric = 3; */
            if (message.numeric)
                NumericQuery.internalBinaryWrite(message.numeric, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* string layer = 4; */
            if (message.layer !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.layer);
            /* bool wildcard = 5; */
            if (message.wildcard !== false)
                writer.tag(5, WireType.Varint).bool(message.wildcard);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.FieldQuery
     */
    const FieldQuery = new FieldQuery$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ReferenceQuery$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ReferenceQuery", [
                { no: 1, name: "property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "target_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { property: "", targetProperty: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string property */ 1:
                        message.property = reader.string();
                        break;
                    case /* string target_property */ 2:
                        message.targetProperty = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query query */ 3:
                        message.query = Query.internalBinaryRead(reader, reader.uint32(), options, message.query);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string property = 1; */
            if (message.property !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.property);
            /* string target_property = 2; */
            if (message.targetProperty !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.targetProperty);
            /* normalgw.hpl.v1.Query query = 3; */
            if (message.query)
                Query.internalBinaryWrite(message.query, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ReferenceQuery
     */
    const ReferenceQuery = new ReferenceQuery$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class NumericQuery$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.NumericQuery", [
                { no: 2, name: "min_value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
                { no: 4, name: "min_infinity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 3, name: "max_value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
                { no: 5, name: "max_infinity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { minValue: 0, minInfinity: false, maxValue: 0, maxInfinity: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* double min_value */ 2:
                        message.minValue = reader.double();
                        break;
                    case /* bool min_infinity */ 4:
                        message.minInfinity = reader.bool();
                        break;
                    case /* double max_value */ 3:
                        message.maxValue = reader.double();
                        break;
                    case /* bool max_infinity */ 5:
                        message.maxInfinity = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* double min_value = 2; */
            if (message.minValue !== 0)
                writer.tag(2, WireType.Bit64).double(message.minValue);
            /* bool min_infinity = 4; */
            if (message.minInfinity !== false)
                writer.tag(4, WireType.Varint).bool(message.minInfinity);
            /* double max_value = 3; */
            if (message.maxValue !== 0)
                writer.tag(3, WireType.Bit64).double(message.maxValue);
            /* bool max_infinity = 5; */
            if (message.maxInfinity !== false)
                writer.tag(5, WireType.Varint).bool(message.maxInfinity);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.NumericQuery
     */
    const NumericQuery = new NumericQuery$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Query$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Query", [
                { no: 1, name: "field", kind: "message", T: () => FieldQuery },
                { no: 2, name: "reference", kind: "message", T: () => ReferenceQuery },
                { no: 3, name: "and", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query },
                { no: 4, name: "or", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Query },
                { no: 5, name: "not", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { and: [], or: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.hpl.v1.FieldQuery field */ 1:
                        message.field = FieldQuery.internalBinaryRead(reader, reader.uint32(), options, message.field);
                        break;
                    case /* normalgw.hpl.v1.ReferenceQuery reference */ 2:
                        message.reference = ReferenceQuery.internalBinaryRead(reader, reader.uint32(), options, message.reference);
                        break;
                    case /* repeated normalgw.hpl.v1.Query and */ 3:
                        message.and.push(Query.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.hpl.v1.Query or */ 4:
                        message.or.push(Query.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.hpl.v1.Query not */ 5:
                        message.not = Query.internalBinaryRead(reader, reader.uint32(), options, message.not);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.hpl.v1.FieldQuery field = 1; */
            if (message.field)
                FieldQuery.internalBinaryWrite(message.field, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.ReferenceQuery reference = 2; */
            if (message.reference)
                ReferenceQuery.internalBinaryWrite(message.reference, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.Query and = 3; */
            for (let i = 0; i < message.and.length; i++)
                Query.internalBinaryWrite(message.and[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.Query or = 4; */
            for (let i = 0; i < message.or.length; i++)
                Query.internalBinaryWrite(message.or[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Query not = 5; */
            if (message.not)
                Query.internalBinaryWrite(message.not, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Query
     */
    const Query = new Query$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AnnotationPathComponent$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AnnotationPathComponent", [
                { no: 1, name: "source_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "target_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "value_property", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { sourceProperty: "", targetProperty: "", valueProperty: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string source_property */ 1:
                        message.sourceProperty = reader.string();
                        break;
                    case /* string target_property */ 2:
                        message.targetProperty = reader.string();
                        break;
                    case /* string value_property */ 3:
                        message.valueProperty = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string source_property = 1; */
            if (message.sourceProperty !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.sourceProperty);
            /* string target_property = 2; */
            if (message.targetProperty !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.targetProperty);
            /* string value_property = 3; */
            if (message.valueProperty !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.valueProperty);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AnnotationPathComponent
     */
    const AnnotationPathComponent = new AnnotationPathComponent$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Annotation$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Annotation", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "field_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnnotationPathComponent }
            ]);
        }
        create(value) {
            const message = { layer: "", fieldName: "", path: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* string field_name */ 2:
                        message.fieldName = reader.string();
                        break;
                    case /* repeated normalgw.hpl.v1.AnnotationPathComponent path */ 3:
                        message.path.push(AnnotationPathComponent.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* string field_name = 2; */
            if (message.fieldName !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.fieldName);
            /* repeated normalgw.hpl.v1.AnnotationPathComponent path = 3; */
            for (let i = 0; i < message.path.length; i++)
                AnnotationPathComponent.internalBinaryWrite(message.path[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Annotation
     */
    const Annotation = new Annotation$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class PointMask$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.PointMask", [
                { no: 1, name: "attr_include_mask", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "attr_exclude_mask", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "field_mask", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "field_exclude_mask", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { attrIncludeMask: [], attrExcludeMask: [], fieldMask: [], fieldExcludeMask: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string attr_include_mask */ 1:
                        message.attrIncludeMask.push(reader.string());
                        break;
                    case /* repeated string attr_exclude_mask */ 2:
                        message.attrExcludeMask.push(reader.string());
                        break;
                    case /* repeated string field_mask */ 3:
                        message.fieldMask.push(reader.string());
                        break;
                    case /* repeated string field_exclude_mask */ 4:
                        message.fieldExcludeMask.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string attr_include_mask = 1; */
            for (let i = 0; i < message.attrIncludeMask.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.attrIncludeMask[i]);
            /* repeated string attr_exclude_mask = 2; */
            for (let i = 0; i < message.attrExcludeMask.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.attrExcludeMask[i]);
            /* repeated string field_mask = 3; */
            for (let i = 0; i < message.fieldMask.length; i++)
                writer.tag(3, WireType.LengthDelimited).string(message.fieldMask[i]);
            /* repeated string field_exclude_mask = 4; */
            for (let i = 0; i < message.fieldExcludeMask.length; i++)
                writer.tag(4, WireType.LengthDelimited).string(message.fieldExcludeMask[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.PointMask
     */
    const PointMask = new PointMask$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetPointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetPointsRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "result_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "structured_query", kind: "message", T: () => Query },
                { no: 7, name: "annotations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Annotation },
                { no: 5, name: "response_format", kind: "enum", T: () => ["normalgw.hpl.v1.GetPointsResponseFormat", GetPointsResponseFormat] },
                { no: 8, name: "masks", kind: "message", T: () => PointMask },
                { no: 10, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 11, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 12, name: "sort_field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 13, name: "sort_order", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 14, name: "sort", kind: "message", T: () => Sort }
            ]);
        }
        create(value) {
            const message = { layer: "", resultLayer: "", query: "", annotations: [], responseFormat: 0, pageOffset: 0, pageSize: 0, sortField: "", sortOrder: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* string result_layer */ 2:
                        message.resultLayer = reader.string();
                        break;
                    case /* string query = 4 [deprecated = true];*/ 4:
                        message.query = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 6:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    case /* repeated normalgw.hpl.v1.Annotation annotations */ 7:
                        message.annotations.push(Annotation.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.hpl.v1.GetPointsResponseFormat response_format */ 5:
                        message.responseFormat = reader.int32();
                        break;
                    case /* normalgw.hpl.v1.PointMask masks */ 8:
                        message.masks = PointMask.internalBinaryRead(reader, reader.uint32(), options, message.masks);
                        break;
                    case /* int64 page_offset */ 10:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    case /* int64 page_size */ 11:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    case /* string sort_field */ 12:
                        message.sortField = reader.string();
                        break;
                    case /* string sort_order */ 13:
                        message.sortOrder = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Sort sort */ 14:
                        message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* string result_layer = 2; */
            if (message.resultLayer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.resultLayer);
            /* string query = 4 [deprecated = true]; */
            if (message.query !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.query);
            /* normalgw.hpl.v1.Query structured_query = 6; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.Annotation annotations = 7; */
            for (let i = 0; i < message.annotations.length; i++)
                Annotation.internalBinaryWrite(message.annotations[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.GetPointsResponseFormat response_format = 5; */
            if (message.responseFormat !== 0)
                writer.tag(5, WireType.Varint).int32(message.responseFormat);
            /* normalgw.hpl.v1.PointMask masks = 8; */
            if (message.masks)
                PointMask.internalBinaryWrite(message.masks, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
            /* int64 page_offset = 10; */
            if (message.pageOffset !== 0)
                writer.tag(10, WireType.Varint).int64(message.pageOffset);
            /* int64 page_size = 11; */
            if (message.pageSize !== 0)
                writer.tag(11, WireType.Varint).int64(message.pageSize);
            /* string sort_field = 12; */
            if (message.sortField !== "")
                writer.tag(12, WireType.LengthDelimited).string(message.sortField);
            /* string sort_order = 13; */
            if (message.sortOrder !== "")
                writer.tag(13, WireType.LengthDelimited).string(message.sortOrder);
            /* normalgw.hpl.v1.Sort sort = 14; */
            if (message.sort)
                Sort.internalBinaryWrite(message.sort, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetPointsRequest
     */
    const GetPointsRequest = new GetPointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Sort$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Sort", [
                { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "order", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { field: "", order: "", layer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string field */ 1:
                        message.field = reader.string();
                        break;
                    case /* string order */ 2:
                        message.order = reader.string();
                        break;
                    case /* string layer */ 3:
                        message.layer = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string field = 1; */
            if (message.field !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.field);
            /* string order = 2; */
            if (message.order !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.order);
            /* string layer = 3; */
            if (message.layer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.layer);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Sort
     */
    const Sort = new Sort$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetPointsByIdRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetPointsByIdRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "response_format", kind: "enum", T: () => ["normalgw.hpl.v1.GetPointsResponseFormat", GetPointsResponseFormat] },
                { no: 4, name: "masks", kind: "message", T: () => PointMask },
                { no: 5, name: "annotations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Annotation }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], responseFormat: 0, annotations: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* normalgw.hpl.v1.GetPointsResponseFormat response_format */ 3:
                        message.responseFormat = reader.int32();
                        break;
                    case /* normalgw.hpl.v1.PointMask masks */ 4:
                        message.masks = PointMask.internalBinaryRead(reader, reader.uint32(), options, message.masks);
                        break;
                    case /* repeated normalgw.hpl.v1.Annotation annotations */ 5:
                        message.annotations.push(Annotation.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* normalgw.hpl.v1.GetPointsResponseFormat response_format = 3; */
            if (message.responseFormat !== 0)
                writer.tag(3, WireType.Varint).int32(message.responseFormat);
            /* normalgw.hpl.v1.PointMask masks = 4; */
            if (message.masks)
                PointMask.internalBinaryWrite(message.masks, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.Annotation annotations = 5; */
            for (let i = 0; i < message.annotations.length; i++)
                Annotation.internalBinaryWrite(message.annotations[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetPointsByIdRequest
     */
    const GetPointsByIdRequest = new GetPointsByIdRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetPointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetPointsReply", [
                { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Point },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { points: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Point points */ 1:
                        message.points.push(Point.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Point points = 1; */
            for (let i = 0; i < message.points.length; i++)
                Point.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetPointsReply
     */
    const GetPointsReply = new GetPointsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDistinctAttrsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDistinctAttrsRequest", [
                { no: 1, name: "attrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "structured_query", kind: "message", T: () => Query },
                { no: 3, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "query_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 7, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { attrs: [], query: "", layer: "", queryLayer: "", pageOffset: 0, pageSize: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string attrs */ 1:
                        message.attrs.push(reader.string());
                        break;
                    case /* string query */ 2:
                        message.query = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 4:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    case /* string layer */ 3:
                        message.layer = reader.string();
                        break;
                    case /* string query_layer */ 5:
                        message.queryLayer = reader.string();
                        break;
                    case /* int64 page_offset */ 6:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    case /* int64 page_size */ 7:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string attrs = 1; */
            for (let i = 0; i < message.attrs.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.attrs[i]);
            /* string query = 2; */
            if (message.query !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.query);
            /* normalgw.hpl.v1.Query structured_query = 4; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* string layer = 3; */
            if (message.layer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.layer);
            /* string query_layer = 5; */
            if (message.queryLayer !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.queryLayer);
            /* int64 page_offset = 6; */
            if (message.pageOffset !== 0)
                writer.tag(6, WireType.Varint).int64(message.pageOffset);
            /* int64 page_size = 7; */
            if (message.pageSize !== 0)
                writer.tag(7, WireType.Varint).int64(message.pageSize);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDistinctAttrsRequest
     */
    const GetDistinctAttrsRequest = new GetDistinctAttrsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDistinctAttrsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDistinctAttrsReply", [
                { no: 1, name: "attrs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GetDistinctAttrsReply_AttrValues }
            ]);
        }
        create(value) {
            const message = { attrs: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.GetDistinctAttrsReply.AttrValues attrs */ 1:
                        message.attrs.push(GetDistinctAttrsReply_AttrValues.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.GetDistinctAttrsReply.AttrValues attrs = 1; */
            for (let i = 0; i < message.attrs.length; i++)
                GetDistinctAttrsReply_AttrValues.internalBinaryWrite(message.attrs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDistinctAttrsReply
     */
    const GetDistinctAttrsReply = new GetDistinctAttrsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDistinctAttrsReply_AttrValues$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDistinctAttrsReply.AttrValues", [
                { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "counts", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
                { no: 4, name: "total_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
            ]);
        }
        create(value) {
            const message = { key: "", values: [], counts: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string key */ 1:
                        message.key = reader.string();
                        break;
                    case /* repeated string values */ 2:
                        message.values.push(reader.string());
                        break;
                    case /* repeated uint32 counts */ 3:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.counts.push(reader.uint32());
                        else
                            message.counts.push(reader.uint32());
                        break;
                    case /* uint32 total_count */ 4:
                        message.totalCount = reader.uint32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string key = 1; */
            if (message.key !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.key);
            /* repeated string values = 2; */
            for (let i = 0; i < message.values.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.values[i]);
            /* repeated uint32 counts = 3; */
            if (message.counts.length) {
                writer.tag(3, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.counts.length; i++)
                    writer.uint32(message.counts[i]);
                writer.join();
            }
            /* uint32 total_count = 4; */
            if (message.totalCount !== 0)
                writer.tag(4, WireType.Varint).uint32(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDistinctAttrsReply.AttrValues
     */
    const GetDistinctAttrsReply_AttrValues = new GetDistinctAttrsReply_AttrValues$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class PointAggregator$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.PointAggregator", [
                { no: 1, name: "type", kind: "enum", T: () => ["normalgw.hpl.v1.PointAggregatorType", PointAggregatorType] },
                { no: 2, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { type: 0, field: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.hpl.v1.PointAggregatorType type */ 1:
                        message.type = reader.int32();
                        break;
                    case /* string field */ 2:
                        message.field = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.hpl.v1.PointAggregatorType type = 1; */
            if (message.type !== 0)
                writer.tag(1, WireType.Varint).int32(message.type);
            /* string field = 2; */
            if (message.field !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.field);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.PointAggregator
     */
    const PointAggregator = new PointAggregator$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AggregatePointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AggregatePointsRequest", [
                { no: 1, name: "attrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "aggregators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PointAggregator },
                { no: 3, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { attrs: [], aggregators: [], layer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string attrs */ 1:
                        message.attrs.push(reader.string());
                        break;
                    case /* repeated normalgw.hpl.v1.PointAggregator aggregators */ 2:
                        message.aggregators.push(PointAggregator.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* string layer */ 3:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query query */ 4:
                        message.query = Query.internalBinaryRead(reader, reader.uint32(), options, message.query);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string attrs = 1; */
            for (let i = 0; i < message.attrs.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.attrs[i]);
            /* repeated normalgw.hpl.v1.PointAggregator aggregators = 2; */
            for (let i = 0; i < message.aggregators.length; i++)
                PointAggregator.internalBinaryWrite(message.aggregators[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* string layer = 3; */
            if (message.layer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.Query query = 4; */
            if (message.query)
                Query.internalBinaryWrite(message.query, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AggregatePointsRequest
     */
    const AggregatePointsRequest = new AggregatePointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AggregationValue$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AggregationValue", [
                { no: 1, name: "null", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
                { no: 2, name: "unsigned", kind: "scalar", oneof: "value", T: 13 /*ScalarType.UINT32*/ },
                { no: 3, name: "signed", kind: "scalar", oneof: "value", T: 5 /*ScalarType.INT32*/ },
                { no: 4, name: "real", kind: "scalar", oneof: "value", T: 2 /*ScalarType.FLOAT*/ },
                { no: 5, name: "character_string", kind: "scalar", oneof: "value", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { value: { oneofKind: undefined }, list: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* bool null */ 1:
                        message.value = {
                            oneofKind: "null",
                            null: reader.bool()
                        };
                        break;
                    case /* uint32 unsigned */ 2:
                        message.value = {
                            oneofKind: "unsigned",
                            unsigned: reader.uint32()
                        };
                        break;
                    case /* int32 signed */ 3:
                        message.value = {
                            oneofKind: "signed",
                            signed: reader.int32()
                        };
                        break;
                    case /* float real */ 4:
                        message.value = {
                            oneofKind: "real",
                            real: reader.float()
                        };
                        break;
                    case /* string character_string */ 5:
                        message.value = {
                            oneofKind: "characterString",
                            characterString: reader.string()
                        };
                        break;
                    case /* repeated string list */ 6:
                        message.list.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* bool null = 1; */
            if (message.value.oneofKind === "null")
                writer.tag(1, WireType.Varint).bool(message.value.null);
            /* uint32 unsigned = 2; */
            if (message.value.oneofKind === "unsigned")
                writer.tag(2, WireType.Varint).uint32(message.value.unsigned);
            /* int32 signed = 3; */
            if (message.value.oneofKind === "signed")
                writer.tag(3, WireType.Varint).int32(message.value.signed);
            /* float real = 4; */
            if (message.value.oneofKind === "real")
                writer.tag(4, WireType.Bit32).float(message.value.real);
            /* string character_string = 5; */
            if (message.value.oneofKind === "characterString")
                writer.tag(5, WireType.LengthDelimited).string(message.value.characterString);
            /* repeated string list = 6; */
            for (let i = 0; i < message.list.length; i++)
                writer.tag(6, WireType.LengthDelimited).string(message.list[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AggregationValue
     */
    const AggregationValue = new AggregationValue$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AggregationAttrValue$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AggregationAttrValue", [
                { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AggregationValue }
            ]);
        }
        create(value) {
            const message = { keys: [], values: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string keys */ 1:
                        message.keys.push(reader.string());
                        break;
                    case /* repeated normalgw.hpl.v1.AggregationValue values */ 2:
                        message.values.push(AggregationValue.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string keys = 1; */
            for (let i = 0; i < message.keys.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
            /* repeated normalgw.hpl.v1.AggregationValue values = 2; */
            for (let i = 0; i < message.values.length; i++)
                AggregationValue.internalBinaryWrite(message.values[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AggregationAttrValue
     */
    const AggregationAttrValue = new AggregationAttrValue$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AggregatePointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AggregatePointsReply", [
                { no: 1, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AggregationAttrValue }
            ]);
        }
        create(value) {
            const message = { values: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.AggregationAttrValue values */ 1:
                        message.values.push(AggregationAttrValue.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.AggregationAttrValue values = 1; */
            for (let i = 0; i < message.values.length; i++)
                AggregationAttrValue.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AggregatePointsReply
     */
    const AggregatePointsReply = new AggregatePointsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdatePointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.UpdatePointsRequest", [
                { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Point }
            ]);
        }
        create(value) {
            const message = { points: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Point points */ 1:
                        message.points.push(Point.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Point points = 1; */
            for (let i = 0; i < message.points.length; i++)
                Point.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.UpdatePointsRequest
     */
    const UpdatePointsRequest = new UpdatePointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdatePointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.UpdatePointsReply", [
                { no: 1, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UpdatePointsReply_UpdateResult }
            ]);
        }
        create(value) {
            const message = { results: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.UpdatePointsReply.UpdateResult results */ 1:
                        message.results.push(UpdatePointsReply_UpdateResult.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.UpdatePointsReply.UpdateResult results = 1; */
            for (let i = 0; i < message.results.length; i++)
                UpdatePointsReply_UpdateResult.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.UpdatePointsReply
     */
    const UpdatePointsReply = new UpdatePointsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdatePointsReply_UpdateResult$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.UpdatePointsReply.UpdateResult", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 3, name: "new_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { uuid: "", success: false, newVersion: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* bool success */ 2:
                        message.success = reader.bool();
                        break;
                    case /* string new_version */ 3:
                        message.newVersion = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* bool success = 2; */
            if (message.success !== false)
                writer.tag(2, WireType.Varint).bool(message.success);
            /* string new_version = 3; */
            if (message.newVersion !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.newVersion);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.UpdatePointsReply.UpdateResult
     */
    const UpdatePointsReply_UpdateResult = new UpdatePointsReply_UpdateResult$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RenamePointRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.RenamePointRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "old_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "new_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { layer: "", oldUuid: "", newUuid: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* string old_uuid */ 2:
                        message.oldUuid = reader.string();
                        break;
                    case /* string new_uuid */ 3:
                        message.newUuid = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* string old_uuid = 2; */
            if (message.oldUuid !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.oldUuid);
            /* string new_uuid = 3; */
            if (message.newUuid !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.newUuid);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.RenamePointRequest
     */
    const RenamePointRequest = new RenamePointRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RenamePointReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.RenamePointReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.RenamePointReply
     */
    const RenamePointReply = new RenamePointReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateExportRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CreateExportRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "structured_query", kind: "message", T: () => Query },
                { no: 3, name: "masks", kind: "message", T: () => PointMask },
                { no: 4, name: "format", kind: "enum", T: () => ["normalgw.hpl.v1.CreateExportRequest.ExportFormat", CreateExportRequest_ExportFormat] }
            ]);
        }
        create(value) {
            const message = { layer: "", format: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 2:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    case /* normalgw.hpl.v1.PointMask masks */ 3:
                        message.masks = PointMask.internalBinaryRead(reader, reader.uint32(), options, message.masks);
                        break;
                    case /* normalgw.hpl.v1.CreateExportRequest.ExportFormat format */ 4:
                        message.format = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.Query structured_query = 2; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.PointMask masks = 3; */
            if (message.masks)
                PointMask.internalBinaryWrite(message.masks, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.CreateExportRequest.ExportFormat format = 4; */
            if (message.format !== 0)
                writer.tag(4, WireType.Varint).int32(message.format);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CreateExportRequest
     */
    const CreateExportRequest = new CreateExportRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateExportReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CreateExportReply", [
                { no: 1, name: "download_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { downloadPath: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string download_path */ 1:
                        message.downloadPath = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string download_path = 1; */
            if (message.downloadPath !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.downloadPath);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CreateExportReply
     */
    const CreateExportReply = new CreateExportReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObservePointsUpdatesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObservePointsUpdatesRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
                { no: 5, name: "wait", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 6, name: "structured_query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], version: "", limit: 0, wait: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* string version */ 3:
                        message.version = reader.string();
                        break;
                    case /* int32 limit */ 4:
                        message.limit = reader.int32();
                        break;
                    case /* bool wait */ 5:
                        message.wait = reader.bool();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 6:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* string version = 3; */
            if (message.version !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.version);
            /* int32 limit = 4; */
            if (message.limit !== 0)
                writer.tag(4, WireType.Varint).int32(message.limit);
            /* bool wait = 5; */
            if (message.wait !== false)
                writer.tag(5, WireType.Varint).bool(message.wait);
            /* normalgw.hpl.v1.Query structured_query = 6; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObservePointsUpdatesRequest
     */
    const ObservePointsUpdatesRequest = new ObservePointsUpdatesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObservePointsUpdatesReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObservePointsUpdatesReply", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "old", kind: "message", T: () => Point },
                { no: 4, name: "new", kind: "message", T: () => Point },
                { no: 5, name: "fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "layers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { version: "", fields: [], layers: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* string version */ 2:
                        message.version = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Point old */ 3:
                        message.old = Point.internalBinaryRead(reader, reader.uint32(), options, message.old);
                        break;
                    case /* normalgw.hpl.v1.Point new */ 4:
                        message.new = Point.internalBinaryRead(reader, reader.uint32(), options, message.new);
                        break;
                    case /* repeated string fields */ 5:
                        message.fields.push(reader.string());
                        break;
                    case /* repeated string layers */ 6:
                        message.layers.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* string version = 2; */
            if (message.version !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.version);
            /* normalgw.hpl.v1.Point old = 3; */
            if (message.old)
                Point.internalBinaryWrite(message.old, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Point new = 4; */
            if (message.new)
                Point.internalBinaryWrite(message.new, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated string fields = 5; */
            for (let i = 0; i < message.fields.length; i++)
                writer.tag(5, WireType.LengthDelimited).string(message.fields[i]);
            /* repeated string layers = 6; */
            for (let i = 0; i < message.layers.length; i++)
                writer.tag(6, WireType.LengthDelimited).string(message.layers[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObservePointsUpdatesReply
     */
    const ObservePointsUpdatesReply = new ObservePointsUpdatesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AddPointsDataRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AddPointsDataRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Value },
                { no: 4, name: "errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Error$1 }
            ]);
        }
        create(value) {
            const message = { layer: "", uuid: "", values: [], errors: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer = 1 [deprecated = true];*/ 1:
                        message.layer = reader.string();
                        break;
                    case /* string uuid */ 2:
                        message.uuid = reader.string();
                        break;
                    case /* repeated normalgw.hpl.v1.Value values */ 3:
                        message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.hpl.v1.Error errors */ 4:
                        message.errors.push(Error$1.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1 [deprecated = true]; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* string uuid = 2; */
            if (message.uuid !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.uuid);
            /* repeated normalgw.hpl.v1.Value values = 3; */
            for (let i = 0; i < message.values.length; i++)
                Value.internalBinaryWrite(message.values[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.Error errors = 4; */
            for (let i = 0; i < message.errors.length; i++)
                Error$1.internalBinaryWrite(message.errors[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AddPointsDataRequest
     */
    const AddPointsDataRequest = new AddPointsDataRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AddPointsDataReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AddPointsDataReply", [
                { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { success: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* bool success */ 1:
                        message.success = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* bool success = 1; */
            if (message.success !== false)
                writer.tag(1, WireType.Varint).bool(message.success);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AddPointsDataReply
     */
    const AddPointsDataReply = new AddPointsDataReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveDataUpdatesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveDataUpdatesRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
                { no: 5, name: "wait", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 6, name: "with_metadata", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 7, name: "structured_query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], version: "", limit: 0, wait: false, withMetadata: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* string version */ 3:
                        message.version = reader.string();
                        break;
                    case /* int32 limit */ 4:
                        message.limit = reader.int32();
                        break;
                    case /* bool wait */ 5:
                        message.wait = reader.bool();
                        break;
                    case /* bool with_metadata */ 6:
                        message.withMetadata = reader.bool();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 7:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* string version = 3; */
            if (message.version !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.version);
            /* int32 limit = 4; */
            if (message.limit !== 0)
                writer.tag(4, WireType.Varint).int32(message.limit);
            /* bool wait = 5; */
            if (message.wait !== false)
                writer.tag(5, WireType.Varint).bool(message.wait);
            /* bool with_metadata = 6; */
            if (message.withMetadata !== false)
                writer.tag(6, WireType.Varint).bool(message.withMetadata);
            /* normalgw.hpl.v1.Query structured_query = 7; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveDataUpdatesRequest
     */
    const ObserveDataUpdatesRequest = new ObserveDataUpdatesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveDataUpdatesReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveDataUpdatesReply", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "value", kind: "message", T: () => Value },
                { no: 4, name: "point", kind: "message", T: () => Point },
                { no: 5, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "type", kind: "enum", T: () => ["normalgw.hpl.v1.ObserveDataUpdatesReply.ChangeType", ObserveDataUpdatesReply_ChangeType] }
            ]);
        }
        create(value) {
            const message = { uuid: "", version: "", layer: "", type: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string version */ 2:
                        message.version = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Value value */ 3:
                        message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    case /* normalgw.hpl.v1.Point point */ 4:
                        message.point = Point.internalBinaryRead(reader, reader.uint32(), options, message.point);
                        break;
                    case /* string layer */ 5:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.ObserveDataUpdatesReply.ChangeType type */ 6:
                        message.type = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string version = 2; */
            if (message.version !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.version);
            /* normalgw.hpl.v1.Value value = 3; */
            if (message.value)
                Value.internalBinaryWrite(message.value, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Point point = 4; */
            if (message.point)
                Point.internalBinaryWrite(message.point, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* string layer = 5; */
            if (message.layer !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.ObserveDataUpdatesReply.ChangeType type = 6; */
            if (message.type !== 0)
                writer.tag(6, WireType.Varint).int32(message.type);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveDataUpdatesReply
     */
    const ObserveDataUpdatesReply = new ObserveDataUpdatesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveErrorUpdatesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveErrorUpdatesRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
                { no: 5, name: "wait", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 6, name: "with_metadata", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 7, name: "structured_query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], version: "", limit: 0, wait: false, withMetadata: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* string version */ 3:
                        message.version = reader.string();
                        break;
                    case /* int32 limit */ 4:
                        message.limit = reader.int32();
                        break;
                    case /* bool wait */ 5:
                        message.wait = reader.bool();
                        break;
                    case /* bool with_metadata */ 6:
                        message.withMetadata = reader.bool();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 7:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* string version = 3; */
            if (message.version !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.version);
            /* int32 limit = 4; */
            if (message.limit !== 0)
                writer.tag(4, WireType.Varint).int32(message.limit);
            /* bool wait = 5; */
            if (message.wait !== false)
                writer.tag(5, WireType.Varint).bool(message.wait);
            /* bool with_metadata = 6; */
            if (message.withMetadata !== false)
                writer.tag(6, WireType.Varint).bool(message.withMetadata);
            /* normalgw.hpl.v1.Query structured_query = 7; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveErrorUpdatesRequest
     */
    const ObserveErrorUpdatesRequest = new ObserveErrorUpdatesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveErrorUpdatesReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveErrorUpdatesReply", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "error", kind: "message", T: () => Error$1 },
                { no: 4, name: "point", kind: "message", T: () => Point },
                { no: 5, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { uuid: "", version: "", layer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string version */ 2:
                        message.version = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Error error */ 3:
                        message.error = Error$1.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    case /* normalgw.hpl.v1.Point point */ 4:
                        message.point = Point.internalBinaryRead(reader, reader.uint32(), options, message.point);
                        break;
                    case /* string layer */ 5:
                        message.layer = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string version = 2; */
            if (message.version !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.version);
            /* normalgw.hpl.v1.Error error = 3; */
            if (message.error)
                Error$1.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Point point = 4; */
            if (message.point)
                Point.internalBinaryWrite(message.point, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* string layer = 5; */
            if (message.layer !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.layer);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveErrorUpdatesReply
     */
    const ObserveErrorUpdatesReply = new ObserveErrorUpdatesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDataRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDataRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "from", kind: "message", T: () => Timestamp },
                { no: 4, name: "to", kind: "message", T: () => Timestamp },
                { no: 5, name: "window", kind: "message", T: () => Duration },
                { no: 6, name: "method", kind: "enum", T: () => ["normalgw.hpl.v1.ResampleOptions.ResampleMethod", ResampleOptions_ResampleMethod] },
                { no: 7, name: "error_data", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 8, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
                { no: 9, name: "reverse", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], method: 0, errorData: false, count: 0, reverse: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer = 1 [deprecated = true];*/ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* google.protobuf.Timestamp from */ 3:
                        message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                        break;
                    case /* google.protobuf.Timestamp to */ 4:
                        message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                        break;
                    case /* google.protobuf.Duration window */ 5:
                        message.window = Duration.internalBinaryRead(reader, reader.uint32(), options, message.window);
                        break;
                    case /* normalgw.hpl.v1.ResampleOptions.ResampleMethod method */ 6:
                        message.method = reader.int32();
                        break;
                    case /* bool error_data */ 7:
                        message.errorData = reader.bool();
                        break;
                    case /* int32 count */ 8:
                        message.count = reader.int32();
                        break;
                    case /* bool reverse */ 9:
                        message.reverse = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1 [deprecated = true]; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* google.protobuf.Timestamp from = 3; */
            if (message.from)
                Timestamp.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp to = 4; */
            if (message.to)
                Timestamp.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Duration window = 5; */
            if (message.window)
                Duration.internalBinaryWrite(message.window, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.ResampleOptions.ResampleMethod method = 6; */
            if (message.method !== 0)
                writer.tag(6, WireType.Varint).int32(message.method);
            /* bool error_data = 7; */
            if (message.errorData !== false)
                writer.tag(7, WireType.Varint).bool(message.errorData);
            /* int32 count = 8; */
            if (message.count !== 0)
                writer.tag(8, WireType.Varint).int32(message.count);
            /* bool reverse = 9; */
            if (message.reverse !== false)
                writer.tag(9, WireType.Varint).bool(message.reverse);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDataRequest
     */
    const GetDataRequest = new GetDataRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DataVector$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DataVector", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Value }
            ]);
        }
        create(value) {
            const message = { uuid: "", values: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* repeated normalgw.hpl.v1.Value values */ 2:
                        message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* repeated normalgw.hpl.v1.Value values = 2; */
            for (let i = 0; i < message.values.length; i++)
                Value.internalBinaryWrite(message.values[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DataVector
     */
    const DataVector = new DataVector$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDataReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDataReply", [
                { no: 1, name: "data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataVector }
            ]);
        }
        create(value) {
            const message = { data: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.DataVector data */ 1:
                        message.data.push(DataVector.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.DataVector data = 1; */
            for (let i = 0; i < message.data.length; i++)
                DataVector.internalBinaryWrite(message.data[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDataReply
     */
    const GetDataReply = new GetDataReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDataSummaryRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDataSummaryRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "from", kind: "message", T: () => Timestamp },
                { no: 4, name: "to", kind: "message", T: () => Timestamp },
                { no: 5, name: "bucket_edges", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
                { no: 6, name: "bucket_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
            ]);
        }
        create(value) {
            const message = { layer: "", uuids: [], bucketEdges: [], bucketCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* google.protobuf.Timestamp from */ 3:
                        message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                        break;
                    case /* google.protobuf.Timestamp to */ 4:
                        message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                        break;
                    case /* repeated float bucket_edges */ 5:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.bucketEdges.push(reader.float());
                        else
                            message.bucketEdges.push(reader.float());
                        break;
                    case /* uint32 bucket_count */ 6:
                        message.bucketCount = reader.uint32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* google.protobuf.Timestamp from = 3; */
            if (message.from)
                Timestamp.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp to = 4; */
            if (message.to)
                Timestamp.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated float bucket_edges = 5; */
            if (message.bucketEdges.length) {
                writer.tag(5, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.bucketEdges.length; i++)
                    writer.float(message.bucketEdges[i]);
                writer.join();
            }
            /* uint32 bucket_count = 6; */
            if (message.bucketCount !== 0)
                writer.tag(6, WireType.Varint).uint32(message.bucketCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDataSummaryRequest
     */
    const GetDataSummaryRequest = new GetDataSummaryRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DataSummary$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DataSummary", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "mean", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 3, name: "min", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 4, name: "max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 5, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 6, name: "bin_edges", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
                { no: 7, name: "bin_counts", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
                { no: 8, name: "first", kind: "message", T: () => Timestamp },
                { no: 9, name: "last", kind: "message", T: () => Timestamp },
                { no: 10, name: "median", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 11, name: "distinct_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 12, name: "data_type", kind: "enum", T: () => ["normalgw.hpl.v1.DataSummary.DataType", DataSummary_DataType] }
            ]);
        }
        create(value) {
            const message = { uuid: "", mean: 0, min: 0, max: 0, count: 0, binEdges: [], binCounts: [], median: 0, distinctCount: 0, dataType: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* float mean */ 2:
                        message.mean = reader.float();
                        break;
                    case /* float min */ 3:
                        message.min = reader.float();
                        break;
                    case /* float max */ 4:
                        message.max = reader.float();
                        break;
                    case /* uint32 count */ 5:
                        message.count = reader.uint32();
                        break;
                    case /* repeated float bin_edges */ 6:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.binEdges.push(reader.float());
                        else
                            message.binEdges.push(reader.float());
                        break;
                    case /* repeated uint32 bin_counts */ 7:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.binCounts.push(reader.uint32());
                        else
                            message.binCounts.push(reader.uint32());
                        break;
                    case /* google.protobuf.Timestamp first */ 8:
                        message.first = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.first);
                        break;
                    case /* google.protobuf.Timestamp last */ 9:
                        message.last = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.last);
                        break;
                    case /* float median */ 10:
                        message.median = reader.float();
                        break;
                    case /* uint32 distinct_count */ 11:
                        message.distinctCount = reader.uint32();
                        break;
                    case /* normalgw.hpl.v1.DataSummary.DataType data_type */ 12:
                        message.dataType = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* float mean = 2; */
            if (message.mean !== 0)
                writer.tag(2, WireType.Bit32).float(message.mean);
            /* float min = 3; */
            if (message.min !== 0)
                writer.tag(3, WireType.Bit32).float(message.min);
            /* float max = 4; */
            if (message.max !== 0)
                writer.tag(4, WireType.Bit32).float(message.max);
            /* uint32 count = 5; */
            if (message.count !== 0)
                writer.tag(5, WireType.Varint).uint32(message.count);
            /* repeated float bin_edges = 6; */
            if (message.binEdges.length) {
                writer.tag(6, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.binEdges.length; i++)
                    writer.float(message.binEdges[i]);
                writer.join();
            }
            /* repeated uint32 bin_counts = 7; */
            if (message.binCounts.length) {
                writer.tag(7, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.binCounts.length; i++)
                    writer.uint32(message.binCounts[i]);
                writer.join();
            }
            /* google.protobuf.Timestamp first = 8; */
            if (message.first)
                Timestamp.internalBinaryWrite(message.first, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp last = 9; */
            if (message.last)
                Timestamp.internalBinaryWrite(message.last, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
            /* float median = 10; */
            if (message.median !== 0)
                writer.tag(10, WireType.Bit32).float(message.median);
            /* uint32 distinct_count = 11; */
            if (message.distinctCount !== 0)
                writer.tag(11, WireType.Varint).uint32(message.distinctCount);
            /* normalgw.hpl.v1.DataSummary.DataType data_type = 12; */
            if (message.dataType !== 0)
                writer.tag(12, WireType.Varint).int32(message.dataType);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DataSummary
     */
    const DataSummary = new DataSummary$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetDataSummaryReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetDataSummaryReply", [
                { no: 1, name: "summaries", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DataSummary }
            ]);
        }
        create(value) {
            const message = { summaries: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.DataSummary summaries */ 1:
                        message.summaries.push(DataSummary.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.DataSummary summaries = 1; */
            for (let i = 0; i < message.summaries.length; i++)
                DataSummary.internalBinaryWrite(message.summaries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetDataSummaryReply
     */
    const GetDataSummaryReply = new GetDataSummaryReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeletePointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeletePointsRequest", [
                { no: 1, name: "layers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "index_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "structured_query", kind: "message", T: () => Query }
            ]);
        }
        create(value) {
            const message = { layers: [], uuids: [], indexLayer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string layers = 1 [deprecated = true];*/ 1:
                        message.layers.push(reader.string());
                        break;
                    case /* repeated string uuids */ 2:
                        message.uuids.push(reader.string());
                        break;
                    case /* string index_layer */ 3:
                        message.indexLayer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 4:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string layers = 1 [deprecated = true]; */
            for (let i = 0; i < message.layers.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.layers[i]);
            /* repeated string uuids = 2; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.uuids[i]);
            /* string index_layer = 3; */
            if (message.indexLayer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.indexLayer);
            /* normalgw.hpl.v1.Query structured_query = 4; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeletePointsRequest
     */
    const DeletePointsRequest = new DeletePointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeletePointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeletePointsReply", [
                { no: 1, name: "delete_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { deleteCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* int64 delete_count */ 1:
                        message.deleteCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* int64 delete_count = 1; */
            if (message.deleteCount !== 0)
                writer.tag(1, WireType.Varint).int64(message.deleteCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeletePointsReply
     */
    const DeletePointsReply = new DeletePointsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Tag$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Tag", [
                { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { key: "", tag: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string key */ 1:
                        message.key = reader.string();
                        break;
                    case /* string tag */ 2:
                        message.tag = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string key = 1; */
            if (message.key !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.key);
            /* string tag = 2; */
            if (message.tag !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.tag);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Tag
     */
    const Tag = new Tag$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AddTagsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AddTagsRequest", [
                { no: 1, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag }
            ]);
        }
        create(value) {
            const message = { uuids: [], layer: "", tags: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string uuids */ 1:
                        message.uuids.push(reader.string());
                        break;
                    case /* string layer */ 2:
                        message.layer = reader.string();
                        break;
                    case /* repeated normalgw.hpl.v1.Tag tags */ 3:
                        message.tags.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string uuids = 1; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.uuids[i]);
            /* string layer = 2; */
            if (message.layer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.layer);
            /* repeated normalgw.hpl.v1.Tag tags = 3; */
            for (let i = 0; i < message.tags.length; i++)
                Tag.internalBinaryWrite(message.tags[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AddTagsRequest
     */
    const AddTagsRequest = new AddTagsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class AddTagsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.AddTagsReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.AddTagsReply
     */
    const AddTagsReply = new AddTagsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteTagsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteTagsRequest", [
                { no: 1, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "tags", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag }
            ]);
        }
        create(value) {
            const message = { uuids: [], layer: "", tags: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string uuids */ 1:
                        message.uuids.push(reader.string());
                        break;
                    case /* string layer */ 2:
                        message.layer = reader.string();
                        break;
                    case /* repeated normalgw.hpl.v1.Tag tags */ 3:
                        message.tags.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string uuids = 1; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.uuids[i]);
            /* string layer = 2; */
            if (message.layer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.layer);
            /* repeated normalgw.hpl.v1.Tag tags = 3; */
            for (let i = 0; i < message.tags.length; i++)
                Tag.internalBinaryWrite(message.tags[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteTagsRequest
     */
    const DeleteTagsRequest = new DeleteTagsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteTagsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteTagsReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteTagsReply
     */
    const DeleteTagsReply = new DeleteTagsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CopyAttributesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CopyAttributesRequest", [
                { no: 1, name: "input_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "output_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "index_layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "attributes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "mapped_attributes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "static_attributes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
                { no: 7, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 11, name: "structured_query", kind: "message", T: () => Query },
                { no: 8, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 9, name: "period", kind: "message", T: () => Duration },
                { no: 10, name: "cov", kind: "message", T: () => CovSettings }
            ]);
        }
        create(value) {
            const message = { inputLayer: "", outputLayer: "", indexLayer: "", attributes: [], mappedAttributes: [], staticAttributes: {}, query: "", uuids: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string input_layer */ 1:
                        message.inputLayer = reader.string();
                        break;
                    case /* string output_layer */ 2:
                        message.outputLayer = reader.string();
                        break;
                    case /* string index_layer */ 3:
                        message.indexLayer = reader.string();
                        break;
                    case /* repeated string attributes */ 4:
                        message.attributes.push(reader.string());
                        break;
                    case /* repeated string mapped_attributes */ 5:
                        message.mappedAttributes.push(reader.string());
                        break;
                    case /* map<string, string> static_attributes */ 6:
                        this.binaryReadMap6(message.staticAttributes, reader, options);
                        break;
                    case /* string query */ 7:
                        message.query = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query structured_query */ 11:
                        message.structuredQuery = Query.internalBinaryRead(reader, reader.uint32(), options, message.structuredQuery);
                        break;
                    case /* repeated string uuids */ 8:
                        message.uuids.push(reader.string());
                        break;
                    case /* google.protobuf.Duration period */ 9:
                        message.period = Duration.internalBinaryRead(reader, reader.uint32(), options, message.period);
                        break;
                    case /* normalgw.hpl.v1.CovSettings cov */ 10:
                        message.cov = CovSettings.internalBinaryRead(reader, reader.uint32(), options, message.cov);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap6(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.hpl.v1.CopyAttributesRequest.static_attributes");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        internalBinaryWrite(message, writer, options) {
            /* string input_layer = 1; */
            if (message.inputLayer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.inputLayer);
            /* string output_layer = 2; */
            if (message.outputLayer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.outputLayer);
            /* string index_layer = 3; */
            if (message.indexLayer !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.indexLayer);
            /* repeated string attributes = 4; */
            for (let i = 0; i < message.attributes.length; i++)
                writer.tag(4, WireType.LengthDelimited).string(message.attributes[i]);
            /* repeated string mapped_attributes = 5; */
            for (let i = 0; i < message.mappedAttributes.length; i++)
                writer.tag(5, WireType.LengthDelimited).string(message.mappedAttributes[i]);
            /* map<string, string> static_attributes = 6; */
            for (let k of Object.keys(message.staticAttributes))
                writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.staticAttributes[k]).join();
            /* string query = 7; */
            if (message.query !== "")
                writer.tag(7, WireType.LengthDelimited).string(message.query);
            /* normalgw.hpl.v1.Query structured_query = 11; */
            if (message.structuredQuery)
                Query.internalBinaryWrite(message.structuredQuery, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
            /* repeated string uuids = 8; */
            for (let i = 0; i < message.uuids.length; i++)
                writer.tag(8, WireType.LengthDelimited).string(message.uuids[i]);
            /* google.protobuf.Duration period = 9; */
            if (message.period)
                Duration.internalBinaryWrite(message.period, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.CovSettings cov = 10; */
            if (message.cov)
                CovSettings.internalBinaryWrite(message.cov, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CopyAttributesRequest
     */
    const CopyAttributesRequest = new CopyAttributesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CopyAttributesReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CopyAttributesReply", [
                { no: 1, name: "update_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
            ]);
        }
        create(value) {
            const message = { updateCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint32 update_count */ 1:
                        message.updateCount = reader.uint32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint32 update_count = 1; */
            if (message.updateCount !== 0)
                writer.tag(1, WireType.Varint).uint32(message.updateCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CopyAttributesReply
     */
    const CopyAttributesReply = new CopyAttributesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetConfigKeysRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetConfigKeysRequest", [
                { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { keys: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string keys */ 1:
                        message.keys.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string keys = 1; */
            for (let i = 0; i < message.keys.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetConfigKeysRequest
     */
    const GetConfigKeysRequest = new GetConfigKeysRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetConfigKeysReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetConfigKeysReply", [
                { no: 1, name: "values", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 12 /*ScalarType.BYTES*/ } }
            ]);
        }
        create(value) {
            const message = { values: {} };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* map<string, bytes> values */ 1:
                        this.binaryReadMap1(message.values, reader, options);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap1(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.bytes();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.hpl.v1.GetConfigKeysReply.values");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : new Uint8Array(0);
        }
        internalBinaryWrite(message, writer, options) {
            /* map<string, bytes> values = 1; */
            for (let k of Object.keys(message.values))
                writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).bytes(message.values[k]).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetConfigKeysReply
     */
    const GetConfigKeysReply = new GetConfigKeysReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class SetConfigKeyRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.SetConfigKeyRequest", [
                { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
            ]);
        }
        create(value) {
            const message = { key: "", value: new Uint8Array(0) };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string key */ 1:
                        message.key = reader.string();
                        break;
                    case /* bytes value */ 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string key = 1; */
            if (message.key !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.key);
            /* bytes value = 2; */
            if (message.value.length)
                writer.tag(2, WireType.LengthDelimited).bytes(message.value);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.SetConfigKeyRequest
     */
    const SetConfigKeyRequest = new SetConfigKeyRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class SetConfigKeyReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.SetConfigKeyReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.SetConfigKeyReply
     */
    const SetConfigKeyReply = new SetConfigKeyReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteConfigKeysRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteConfigKeysRequest", [
                { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { keys: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string keys */ 1:
                        message.keys.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string keys = 1; */
            for (let i = 0; i < message.keys.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteConfigKeysRequest
     */
    const DeleteConfigKeysRequest = new DeleteConfigKeysRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteConfigKeysReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.DeleteConfigKeysReply", [
                { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { keys: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string keys */ 1:
                        message.keys.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string keys = 1; */
            for (let i = 0; i < message.keys.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.DeleteConfigKeysReply
     */
    const DeleteConfigKeysReply = new DeleteConfigKeysReply$Type();
    /**
     * @generated ServiceType for protobuf service normalgw.hpl.v1.PointManager
     */
    const PointManager = new ServiceType("normalgw.hpl.v1.PointManager", [
        { name: "GetPoints", options: { "google.api.http": { get: "/api/v1/point/points", body: "*", additionalBindings: [{ post: "/api/v1/point/query" }] }, "normalgw.annotations.auth": { readonly: true } }, I: GetPointsRequest, O: GetPointsReply },
        { name: "GetLayers", options: { "google.api.http": { get: "/api/v1/point/layers", additionalBindings: [{ get: "/api/v1/point/layers/{name}" }] }, "normalgw.annotations.auth": { readonly: true } }, I: GetLayersRequest, O: GetLayersReply },
        { name: "CreateLayer", options: { "google.api.http": { post: "/api/v1/point/layers", body: "*" } }, I: CreateLayerRequest, O: CreateLayerReply },
        { name: "UpdateLayer", options: {}, I: UpdateLayerRequest, O: UpdateLayerReply },
        { name: "DeleteLayer", options: { "google.api.http": { delete: "/api/v1/point/layers/{name}" } }, I: DeleteLayerRequest, O: DeleteLayerReply },
        { name: "GetPointsById", options: { "google.api.http": { get: "/api/v1/point/points-id" }, "normalgw.annotations.auth": { readonly: true } }, I: GetPointsByIdRequest, O: GetPointsReply },
        { name: "GetDistinctAttrs", options: { "google.api.http": { get: "/api/v1/point/attributes" }, "normalgw.annotations.auth": { readonly: true } }, I: GetDistinctAttrsRequest, O: GetDistinctAttrsReply },
        { name: "GetDistinctAttrKeys", options: { "google.api.http": { get: "/api/v1/point/keys" }, "normalgw.annotations.auth": { readonly: true } }, I: GetDistinctAttrsRequest, O: GetDistinctAttrsReply },
        { name: "GetData", options: { "google.api.http": { get: "/api/v1/point/data" }, "normalgw.annotations.auth": { readonly: true } }, I: GetDataRequest, O: GetDataReply },
        { name: "AddPointsData", options: { "google.api.http": { post: "/api/v1/point/data", body: "*" } }, I: AddPointsDataRequest, O: AddPointsDataReply },
        { name: "GetDataSummary", options: { "google.api.http": { get: "/api/v1/point/summary" }, "normalgw.annotations.auth": { readonly: true } }, I: GetDataSummaryRequest, O: GetDataSummaryReply },
        { name: "UpdatePoints", options: { "google.api.http": { post: "/api/v1/point/points", body: "*" } }, I: UpdatePointsRequest, O: UpdatePointsReply },
        { name: "RenamePoint", options: { "google.api.http": { post: "/api/v1/point/rename", body: "*" } }, I: RenamePointRequest, O: RenamePointReply },
        { name: "CopyAttributes", options: { "google.api.http": { post: "/api/v1/point/copy", body: "*" } }, I: CopyAttributesRequest, O: CopyAttributesReply },
        { name: "DeletePoints", options: { "google.api.http": { delete: "/api/v1/point/points" } }, I: DeletePointsRequest, O: DeletePointsReply },
        { name: "AddTags", options: { "google.api.http": { post: "/api/v1/point/tags", body: "*" } }, I: AddTagsRequest, O: AddTagsReply },
        { name: "DeleteTags", options: { "google.api.http": { delete: "/api/v1/point/tags", body: "*" } }, I: DeleteTagsRequest, O: DeleteTagsReply },
        { name: "GetConfigKeys", options: { "google.api.http": { get: "/api/v1/point/configkeys" }, "normalgw.annotations.auth": { readonly: true } }, I: GetConfigKeysRequest, O: GetConfigKeysReply },
        { name: "SetConfigKey", options: { "google.api.http": { post: "/api/v1/point/configkeys", body: "*" } }, I: SetConfigKeyRequest, O: SetConfigKeyReply },
        { name: "DeleteConfigKeys", options: { "google.api.http": { delete: "/api/v1/point/configkeys" } }, I: DeleteConfigKeysRequest, O: DeleteConfigKeysReply },
        { name: "CreateExport", options: { "google.api.http": { post: "/api/v1/point/export" } }, I: CreateExportRequest, O: CreateExportReply },
        { name: "ObservePointsUpdates", serverStreaming: true, options: { "google.api.http": { get: "/api/v1/point/updates/points" }, "normalgw.annotations.auth": { readonly: true } }, I: ObservePointsUpdatesRequest, O: ObservePointsUpdatesReply },
        { name: "ObserveDataUpdates", serverStreaming: true, options: { "google.api.http": { get: "/api/v1/point/updates/data" }, "normalgw.annotations.auth": { readonly: true } }, I: ObserveDataUpdatesRequest, O: ObserveDataUpdatesReply },
        { name: "ObserveErrorUpdates", serverStreaming: true, options: { "google.api.http": { get: "/api/v1/point/updates/errors" }, "normalgw.annotations.auth": { readonly: true } }, I: ObserveErrorUpdatesRequest, O: ObserveErrorUpdatesReply },
        { name: "AggregatePoints", options: { "google.api.http": { post: "/api/v1/point/aggregate", body: "*" }, "normalgw.annotations.auth": { readonly: true } }, I: AggregatePointsRequest, O: AggregatePointsReply }
    ]);

    /**
     *
     * Point Service
     *
     * The point service is the main interface into the configuration
     * state stored on the device.  It provides:
     *
     *  * Efficient full-text search of all objects on the device
     *  *
     *
     * @generated from protobuf service normalgw.hpl.v1.PointManager
     */
    class PointManagerClient {
        constructor(_transport) {
            this._transport = _transport;
            this.typeName = PointManager.typeName;
            this.methods = PointManager.methods;
            this.options = PointManager.options;
        }
        /**
         *
         * GetPoints
         *
         * Perform a search for points using the full-text search.  In
         * order to be in the search index, the layer must configure the
         * index.  You may retrieve these using `GetLayers`.
         * For instance, the BACnet layer `hpl:bacnet:1` indexes the
         * following fields:
         *
         *  * `uuid`
         *  * `attr_device_id` BACnet device id
         *  * `attr_type` BACnet object type
         *  * `attr_instance` BACnet object instance
         *  * `attr_prop_units` BACnet units (numeric enum value)
         *  * `attr_prop_object_name` BACnet object name
         *  * `attr_prop_description` BACnet description
         *  * `period` polling rate, in seconds
         *
         * @generated from protobuf rpc: GetPoints(normalgw.hpl.v1.GetPointsRequest) returns (normalgw.hpl.v1.GetPointsReply);
         */
        getPoints(input, options) {
            const method = this.methods[0], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetLayers
         *
         * Return the list of available layers.
         *
         *
         * @generated from protobuf rpc: GetLayers(normalgw.hpl.v1.GetLayersRequest) returns (normalgw.hpl.v1.GetLayersReply);
         */
        getLayers(input, options) {
            const method = this.methods[1], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * CreateLayer
         *
         * Create a new layer of either kind (`BASE` or `UNION`).  The layer
         * request should be complete with the name and kind of the layer,
         * if it should be indexed, and the names of any component fields or sublayers.
         *
         * @generated from protobuf rpc: CreateLayer(normalgw.hpl.v1.CreateLayerRequest) returns (normalgw.hpl.v1.CreateLayerReply);
         */
        createLayer(input, options) {
            const method = this.methods[2], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: UpdateLayer(normalgw.hpl.v1.UpdateLayerRequest) returns (normalgw.hpl.v1.UpdateLayerReply);
         */
        updateLayer(input, options) {
            const method = this.methods[3], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * DeleteLayer
         *
         * Delete a layer from the system.  If `delete_points` is false,
         * only the name of the layer and associated indexes will be
         * removed; however any underlying points and timeseries will be
         * left.  If `delete_points` is true, any point metadata and
         * timeseries associated with the layer will also be removed, and
         * the count of deleted points returned to the client.
         *
         * @generated from protobuf rpc: DeleteLayer(normalgw.hpl.v1.DeleteLayerRequest) returns (normalgw.hpl.v1.DeleteLayerReply);
         */
        deleteLayer(input, options) {
            const method = this.methods[4], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetPointsById
         *
         * Lookup points by UUID.  The reply format is the same as
         * GetPoints, but pagination and sorting are not supported.
         *
         *
         * @generated from protobuf rpc: GetPointsById(normalgw.hpl.v1.GetPointsByIdRequest) returns (normalgw.hpl.v1.GetPointsReply);
         */
        getPointsById(input, options) {
            const method = this.methods[5], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetDistinctAttrs
         *
         * Return a list of distinct values and counts for the given list of attributes.  For
         * instance, you can use this to generate a list of filters, or find
         * all of the different object names, vendors, or software
         * revisions.  The attributes do not need to be indexed in the layer.
         *
         * If a `query` is provided, perform a database scan to compute
         * attribute counts instead of using the precomputed values.  This
         * may be slow but allows more advanced use cases.
         *
         *
         * @generated from protobuf rpc: GetDistinctAttrs(normalgw.hpl.v1.GetDistinctAttrsRequest) returns (normalgw.hpl.v1.GetDistinctAttrsReply);
         */
        getDistinctAttrs(input, options) {
            const method = this.methods[6], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetDistinctAttrKeys
         *
         * Return a list of distinct attribute keys, and the number of points which have each
         * attribute set to a non-blank value in the given layer.
         *
         * If the attribute list is passed, counts are only returned for the requested key names.
         *
         *
         * @generated from protobuf rpc: GetDistinctAttrKeys(normalgw.hpl.v1.GetDistinctAttrsRequest) returns (normalgw.hpl.v1.GetDistinctAttrsReply);
         */
        getDistinctAttrKeys(input, options) {
            const method = this.methods[7], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetData
         *
         * GetData queries the time series data available on the device.
         * Note the default retention period for in-memory data is one week.
         *
         * @generated from protobuf rpc: GetData(normalgw.hpl.v1.GetDataRequest) returns (normalgw.hpl.v1.GetDataReply);
         */
        getData(input, options) {
            const method = this.methods[8], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * AddPointsData
         *
         * This endpoint adds timeseries and error data to the stream.
         *
         * @generated from protobuf rpc: AddPointsData(normalgw.hpl.v1.AddPointsDataRequest) returns (normalgw.hpl.v1.AddPointsDataReply);
         */
        addPointsData(input, options) {
            const method = this.methods[9], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * GetDataSummary
         *
         * Look up statistics about the data storted for a point.
         *
         * @generated from protobuf rpc: GetDataSummary(normalgw.hpl.v1.GetDataSummaryRequest) returns (normalgw.hpl.v1.GetDataSummaryReply);
         */
        getDataSummary(input, options) {
            const method = this.methods[10], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * UpdatePoints
         *
         * Create or update points objects.  If verion is nil, will be
         * treated as a create and will fail if the uuid already exists.  if the
         * version is not nil, will succeed only if the database version matches
         * the version provided.
         *
         * One common use case of this is to configure polling, by editing
         * the "period" field.
         *
         * @generated from protobuf rpc: UpdatePoints(normalgw.hpl.v1.UpdatePointsRequest) returns (normalgw.hpl.v1.UpdatePointsReply);
         */
        updatePoints(input, options) {
            const method = this.methods[11], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * RenamePoint
         *
         * Change the UUID of a point, preserving all time series data.
         * ObservePointsUpdate will send consumers an update record with
         * the old and new UUIDs; however, Not all consumers may expect
         * this so this can be what disruptive.
         *
         *
         * @generated from protobuf rpc: RenamePoint(normalgw.hpl.v1.RenamePointRequest) returns (normalgw.hpl.v1.RenamePointReply);
         */
        renamePoint(input, options) {
            const method = this.methods[12], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: CopyAttributes(normalgw.hpl.v1.CopyAttributesRequest) returns (normalgw.hpl.v1.CopyAttributesReply);
         */
        copyAttributes(input, options) {
            const method = this.methods[13], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * DeletePoints
         *
         * Remove the point object and any underlying data from the system.
         * This does not remove data from the update log.
         *
         * @generated from protobuf rpc: DeletePoints(normalgw.hpl.v1.DeletePointsRequest) returns (normalgw.hpl.v1.DeletePointsReply);
         */
        deletePoints(input, options) {
            const method = this.methods[14], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * AddTags
         *
         *
         * Add tags allows you to edit tag fields without implementing the
         * read-modify-write update on the client.  A tag field is any key
         * which holds a comma-separated list of tag values.  For instance,
         * you can have a field named "haystack" with the value
         * "air,sensor".  When set as a tag field, NF will interpret that
         * field as having tags "air" and "sensor", instead of as one value.
         *
         * Using AddTags to update this field allow you to maniulate these
         * tags directly, to avoid adding duplicate copies of tag values.
         *
         * @generated from protobuf rpc: AddTags(normalgw.hpl.v1.AddTagsRequest) returns (normalgw.hpl.v1.AddTagsReply);
         */
        addTags(input, options) {
            const method = this.methods[15], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: DeleteTags(normalgw.hpl.v1.DeleteTagsRequest) returns (normalgw.hpl.v1.DeleteTagsReply);
         */
        deleteTags(input, options) {
            const method = this.methods[16], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: GetConfigKeys(normalgw.hpl.v1.GetConfigKeysRequest) returns (normalgw.hpl.v1.GetConfigKeysReply);
         */
        getConfigKeys(input, options) {
            const method = this.methods[17], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: SetConfigKey(normalgw.hpl.v1.SetConfigKeyRequest) returns (normalgw.hpl.v1.SetConfigKeyReply);
         */
        setConfigKey(input, options) {
            const method = this.methods[18], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: DeleteConfigKeys(normalgw.hpl.v1.DeleteConfigKeysRequest) returns (normalgw.hpl.v1.DeleteConfigKeysReply);
         */
        deleteConfigKeys(input, options) {
            const method = this.methods[19], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: CreateExport(normalgw.hpl.v1.CreateExportRequest) returns (normalgw.hpl.v1.CreateExportReply);
         */
        createExport(input, options) {
            const method = this.methods[20], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * ObservePointsUpdates
         *
         * Streaming method for obtaining a stream of changes to the object
         * database.  Each record contains the old and new version of the
         * object, which can be compared.  For new objects, the "old" field
         * is nil; while for deleted objects, the "new" field is nil.
         *
         * When used with the REST API, the version, limit, and wait
         * parameters can be used to read chunks of the change log.  The
         * first version is always `0-0`, and so the log can be read back in
         * chunks by starting with this version and then providing the last
         * version received until no more records are obtained.  By default
         * the method returns records starting at the current head of the
         * log.
         *
         *  * `version` the version number to begin reading at
         *  * `layer` only return data from this layer
         *  * `limit` how many changes to write to the stream before closing the connection.
         *  * `wait` if the consumer should wait for new records once the head of the log is encountered.  Not recommended for use with the REST api.
         *
         *
         * @generated from protobuf rpc: ObservePointsUpdates(normalgw.hpl.v1.ObservePointsUpdatesRequest) returns (stream normalgw.hpl.v1.ObservePointsUpdatesReply);
         */
        observePointsUpdates(input, options) {
            const method = this.methods[21], opt = this._transport.mergeOptions(options);
            return stackIntercept("serverStreaming", this._transport, method, opt, input);
        }
        /**
         *
         * ObserveDataUpdates
         *
         * Streaming method for obtaining values.  This can be used either
         * for real-time use or for reliably archiving readings.
         *
         * Although it is possible to construct a timeseries from this data,
         * this interface is primarily designed to stream all data to another
         * database.  The default retention period for this interface is one
         * month, and data are stored sequentially on disk.
         *
         * If `withMetadata` is set, each data point will also include the
         * point object's metadata.  An important detail is that the
         * metadata is not logged at the time of data collection, but
         * retrieved when the value is sent to the consumer; so metadata
         * changes may not be accurately reflected.  If this will cause a
         * problem, consumers should also consume `ObservePointsUpdates` to
         * identify when metadata has changed.
         *
         *
         * @generated from protobuf rpc: ObserveDataUpdates(normalgw.hpl.v1.ObserveDataUpdatesRequest) returns (stream normalgw.hpl.v1.ObserveDataUpdatesReply);
         */
        observeDataUpdates(input, options) {
            const method = this.methods[22], opt = this._transport.mergeOptions(options);
            return stackIntercept("serverStreaming", this._transport, method, opt, input);
        }
        /**
         *
         * ObserveErrorUpdates
         *
         * Streaming method for reading back errors encountered during polling.  Errors are stored sequentially on disk, and the default retention period is one month.
         *
         *
         * @generated from protobuf rpc: ObserveErrorUpdates(normalgw.hpl.v1.ObserveErrorUpdatesRequest) returns (stream normalgw.hpl.v1.ObserveErrorUpdatesReply);
         */
        observeErrorUpdates(input, options) {
            const method = this.methods[23], opt = this._transport.mergeOptions(options);
            return stackIntercept("serverStreaming", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: AggregatePoints(normalgw.hpl.v1.AggregatePointsRequest) returns (normalgw.hpl.v1.AggregatePointsReply);
         */
        aggregatePoints(input, options) {
            const method = this.methods[24], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
    }

    /**
     * @generated from protobuf enum normalgw.platform.v1.ConfigurationOptionType
     */
    var ConfigurationOptionType;
    (function (ConfigurationOptionType) {
        /**
         * @generated from protobuf enum value: TYPE_BOOLEAN = 0;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_BOOLEAN"] = 0] = "TYPE_BOOLEAN";
        /**
         * @generated from protobuf enum value: TYPE_SIGNED = 1;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_SIGNED"] = 1] = "TYPE_SIGNED";
        /**
         * @generated from protobuf enum value: TYPE_REAL = 2;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_REAL"] = 2] = "TYPE_REAL";
        /**
         * @generated from protobuf enum value: TYPE_BYTES = 3;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_BYTES"] = 3] = "TYPE_BYTES";
        /**
         * @generated from protobuf enum value: TYPE_STRING = 4;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_STRING"] = 4] = "TYPE_STRING";
        /**
         * @generated from protobuf enum value: TYPE_DURATION = 5;
         */
        ConfigurationOptionType[ConfigurationOptionType["TYPE_DURATION"] = 5] = "TYPE_DURATION";
    })(ConfigurationOptionType || (ConfigurationOptionType = {}));
    // @generated message type with reflection information, may provide speed optimized methods
    class ConfigurationOption$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.ConfigurationOption", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "option_type", kind: "enum", T: () => ["normalgw.platform.v1.ConfigurationOptionType", ConfigurationOptionType] },
                { no: 4, name: "choices", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConfigurationValue },
                { no: 5, name: "validators", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConfigurationValidator },
                { no: 6, name: "default_value", kind: "message", T: () => ConfigurationValue },
                { no: 7, name: "value", kind: "message", T: () => ConfigurationValue },
                { no: 8, name: "secret", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 9, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { name: "", description: "", optionType: 0, choices: [], validators: [], secret: false, required: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    case /* string description */ 2:
                        message.description = reader.string();
                        break;
                    case /* normalgw.platform.v1.ConfigurationOptionType option_type */ 3:
                        message.optionType = reader.int32();
                        break;
                    case /* repeated normalgw.platform.v1.ConfigurationValue choices */ 4:
                        message.choices.push(ConfigurationValue.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.platform.v1.ConfigurationValidator validators */ 5:
                        message.validators.push(ConfigurationValidator.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.platform.v1.ConfigurationValue default_value */ 6:
                        message.defaultValue = ConfigurationValue.internalBinaryRead(reader, reader.uint32(), options, message.defaultValue);
                        break;
                    case /* normalgw.platform.v1.ConfigurationValue value */ 7:
                        message.value = ConfigurationValue.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    case /* bool secret */ 8:
                        message.secret = reader.bool();
                        break;
                    case /* bool required */ 9:
                        message.required = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            /* string description = 2; */
            if (message.description !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.description);
            /* normalgw.platform.v1.ConfigurationOptionType option_type = 3; */
            if (message.optionType !== 0)
                writer.tag(3, WireType.Varint).int32(message.optionType);
            /* repeated normalgw.platform.v1.ConfigurationValue choices = 4; */
            for (let i = 0; i < message.choices.length; i++)
                ConfigurationValue.internalBinaryWrite(message.choices[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.platform.v1.ConfigurationValidator validators = 5; */
            for (let i = 0; i < message.validators.length; i++)
                ConfigurationValidator.internalBinaryWrite(message.validators[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.platform.v1.ConfigurationValue default_value = 6; */
            if (message.defaultValue)
                ConfigurationValue.internalBinaryWrite(message.defaultValue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.platform.v1.ConfigurationValue value = 7; */
            if (message.value)
                ConfigurationValue.internalBinaryWrite(message.value, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* bool secret = 8; */
            if (message.secret !== false)
                writer.tag(8, WireType.Varint).bool(message.secret);
            /* bool required = 9; */
            if (message.required !== false)
                writer.tag(9, WireType.Varint).bool(message.required);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.ConfigurationOption
     */
    const ConfigurationOption = new ConfigurationOption$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ConfigurationValue$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.ConfigurationValue", [
                { no: 3, name: "boolean", kind: "scalar", oneof: "valueType", T: 8 /*ScalarType.BOOL*/ },
                { no: 5, name: "signed", kind: "scalar", oneof: "valueType", T: 5 /*ScalarType.INT32*/ },
                { no: 6, name: "real", kind: "scalar", oneof: "valueType", T: 2 /*ScalarType.FLOAT*/ },
                { no: 8, name: "bytes", kind: "scalar", oneof: "valueType", T: 12 /*ScalarType.BYTES*/ },
                { no: 9, name: "string", kind: "scalar", oneof: "valueType", T: 9 /*ScalarType.STRING*/ },
                { no: 12, name: "duration", kind: "message", oneof: "valueType", T: () => Duration }
            ]);
        }
        create(value) {
            const message = { valueType: { oneofKind: undefined } };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* bool boolean */ 3:
                        message.valueType = {
                            oneofKind: "boolean",
                            boolean: reader.bool()
                        };
                        break;
                    case /* int32 signed */ 5:
                        message.valueType = {
                            oneofKind: "signed",
                            signed: reader.int32()
                        };
                        break;
                    case /* float real */ 6:
                        message.valueType = {
                            oneofKind: "real",
                            real: reader.float()
                        };
                        break;
                    case /* bytes bytes */ 8:
                        message.valueType = {
                            oneofKind: "bytes",
                            bytes: reader.bytes()
                        };
                        break;
                    case /* string string */ 9:
                        message.valueType = {
                            oneofKind: "string",
                            string: reader.string()
                        };
                        break;
                    case /* google.protobuf.Duration duration */ 12:
                        message.valueType = {
                            oneofKind: "duration",
                            duration: Duration.internalBinaryRead(reader, reader.uint32(), options, message.valueType.duration)
                        };
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* bool boolean = 3; */
            if (message.valueType.oneofKind === "boolean")
                writer.tag(3, WireType.Varint).bool(message.valueType.boolean);
            /* int32 signed = 5; */
            if (message.valueType.oneofKind === "signed")
                writer.tag(5, WireType.Varint).int32(message.valueType.signed);
            /* float real = 6; */
            if (message.valueType.oneofKind === "real")
                writer.tag(6, WireType.Bit32).float(message.valueType.real);
            /* bytes bytes = 8; */
            if (message.valueType.oneofKind === "bytes")
                writer.tag(8, WireType.LengthDelimited).bytes(message.valueType.bytes);
            /* string string = 9; */
            if (message.valueType.oneofKind === "string")
                writer.tag(9, WireType.LengthDelimited).string(message.valueType.string);
            /* google.protobuf.Duration duration = 12; */
            if (message.valueType.oneofKind === "duration")
                Duration.internalBinaryWrite(message.valueType.duration, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.ConfigurationValue
     */
    const ConfigurationValue = new ConfigurationValue$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class SignedRangeValidator$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.SignedRangeValidator", [
                { no: 1, name: "min_value", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
                { no: 2, name: "max_value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
            ]);
        }
        create(value) {
            const message = { minValue: 0, maxValue: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* int32 min_value */ 1:
                        message.minValue = reader.int32();
                        break;
                    case /* int32 max_value */ 2:
                        message.maxValue = reader.int32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* int32 min_value = 1; */
            if (message.minValue !== 0)
                writer.tag(1, WireType.Varint).int32(message.minValue);
            /* int32 max_value = 2; */
            if (message.maxValue !== 0)
                writer.tag(2, WireType.Varint).int32(message.maxValue);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.SignedRangeValidator
     */
    const SignedRangeValidator = new SignedRangeValidator$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RealRangeValidator$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.RealRangeValidator", [
                { no: 1, name: "min_value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
                { no: 2, name: "max_value", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
            ]);
        }
        create(value) {
            const message = { minValue: 0, maxValue: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* float min_value */ 1:
                        message.minValue = reader.float();
                        break;
                    case /* float max_value */ 2:
                        message.maxValue = reader.float();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* float min_value = 1; */
            if (message.minValue !== 0)
                writer.tag(1, WireType.Bit32).float(message.minValue);
            /* float max_value = 2; */
            if (message.maxValue !== 0)
                writer.tag(2, WireType.Bit32).float(message.maxValue);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.RealRangeValidator
     */
    const RealRangeValidator = new RealRangeValidator$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DurationRangeValidator$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.DurationRangeValidator", [
                { no: 1, name: "min_value", kind: "message", T: () => Duration },
                { no: 2, name: "max_value", kind: "message", T: () => Duration }
            ]);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Duration min_value */ 1:
                        message.minValue = Duration.internalBinaryRead(reader, reader.uint32(), options, message.minValue);
                        break;
                    case /* google.protobuf.Duration max_value */ 2:
                        message.maxValue = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxValue);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Duration min_value = 1; */
            if (message.minValue)
                Duration.internalBinaryWrite(message.minValue, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Duration max_value = 2; */
            if (message.maxValue)
                Duration.internalBinaryWrite(message.maxValue, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.DurationRangeValidator
     */
    const DurationRangeValidator = new DurationRangeValidator$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StringRegexpValidator$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.StringRegexpValidator", [
                { no: 1, name: "regexp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { regexp: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string regexp */ 1:
                        message.regexp = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string regexp = 1; */
            if (message.regexp !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.regexp);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.StringRegexpValidator
     */
    const StringRegexpValidator = new StringRegexpValidator$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ConfigurationValidator$Type extends MessageType {
        constructor() {
            super("normalgw.platform.v1.ConfigurationValidator", [
                { no: 1, name: "signed_validator", kind: "message", oneof: "validator", T: () => SignedRangeValidator },
                { no: 2, name: "real_validator", kind: "message", oneof: "validator", T: () => RealRangeValidator },
                { no: 3, name: "duration_validator", kind: "message", oneof: "validator", T: () => DurationRangeValidator },
                { no: 4, name: "string_validator", kind: "message", oneof: "validator", T: () => StringRegexpValidator }
            ]);
        }
        create(value) {
            const message = { validator: { oneofKind: undefined } };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.platform.v1.SignedRangeValidator signed_validator */ 1:
                        message.validator = {
                            oneofKind: "signedValidator",
                            signedValidator: SignedRangeValidator.internalBinaryRead(reader, reader.uint32(), options, message.validator.signedValidator)
                        };
                        break;
                    case /* normalgw.platform.v1.RealRangeValidator real_validator */ 2:
                        message.validator = {
                            oneofKind: "realValidator",
                            realValidator: RealRangeValidator.internalBinaryRead(reader, reader.uint32(), options, message.validator.realValidator)
                        };
                        break;
                    case /* normalgw.platform.v1.DurationRangeValidator duration_validator */ 3:
                        message.validator = {
                            oneofKind: "durationValidator",
                            durationValidator: DurationRangeValidator.internalBinaryRead(reader, reader.uint32(), options, message.validator.durationValidator)
                        };
                        break;
                    case /* normalgw.platform.v1.StringRegexpValidator string_validator */ 4:
                        message.validator = {
                            oneofKind: "stringValidator",
                            stringValidator: StringRegexpValidator.internalBinaryRead(reader, reader.uint32(), options, message.validator.stringValidator)
                        };
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.platform.v1.SignedRangeValidator signed_validator = 1; */
            if (message.validator.oneofKind === "signedValidator")
                SignedRangeValidator.internalBinaryWrite(message.validator.signedValidator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.platform.v1.RealRangeValidator real_validator = 2; */
            if (message.validator.oneofKind === "realValidator")
                RealRangeValidator.internalBinaryWrite(message.validator.realValidator, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.platform.v1.DurationRangeValidator duration_validator = 3; */
            if (message.validator.oneofKind === "durationValidator")
                DurationRangeValidator.internalBinaryWrite(message.validator.durationValidator, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.platform.v1.StringRegexpValidator string_validator = 4; */
            if (message.validator.oneofKind === "stringValidator")
                StringRegexpValidator.internalBinaryWrite(message.validator.stringValidator, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.platform.v1.ConfigurationValidator
     */
    const ConfigurationValidator = new ConfigurationValidator$Type();

    // @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_number,server_grpc1
    // @generated from protobuf file "normalgw/automation/v1/program.proto" (package "normalgw.automation.v1", syntax proto3)
    // tslint:disable
    //
    // -*- c -*-
    // Definitions for the program manager
    //
    // Copyright (c) 2023 Normal Software, Inc.
    // All rights reserved
    //
    /**
     * @generated from protobuf enum normalgw.automation.v1.DuplicateRunPolicy
     */
    var DuplicateRunPolicy;
    (function (DuplicateRunPolicy) {
        /**
         * when a second copy of a program is started, kill the already running one
         *
         * @generated from protobuf enum value: POLICY_RESTART = 0;
         */
        DuplicateRunPolicy[DuplicateRunPolicy["POLICY_RESTART"] = 0] = "POLICY_RESTART";
        /**
         * instead of restarting a running program, call the update handler for that program with the new arguments
         *
         * @generated from protobuf enum value: POLICY_UPDATE = 1;
         */
        DuplicateRunPolicy[DuplicateRunPolicy["POLICY_UPDATE"] = 1] = "POLICY_UPDATE";
        /**
         * return an error instead of altering the existing running program
         *
         * @generated from protobuf enum value: POLICY_FAIL = 2;
         */
        DuplicateRunPolicy[DuplicateRunPolicy["POLICY_FAIL"] = 2] = "POLICY_FAIL";
    })(DuplicateRunPolicy || (DuplicateRunPolicy = {}));
    /**
     * node version, etc.
     *
     * @generated from protobuf enum normalgw.automation.v1.Runtime
     */
    var Runtime;
    (function (Runtime) {
        /**
         * @generated from protobuf enum value: RUNTIME_NODE_JS = 0;
         */
        Runtime[Runtime["NODE_JS"] = 0] = "NODE_JS";
    })(Runtime || (Runtime = {}));
    /**
     * @generated from protobuf enum normalgw.automation.v1.ApplicationStatus
     */
    var ApplicationStatus;
    (function (ApplicationStatus) {
        /**
         * @generated from protobuf enum value: STATUS_INSTALLING = 0;
         */
        ApplicationStatus[ApplicationStatus["STATUS_INSTALLING"] = 0] = "STATUS_INSTALLING";
        /**
         * @generated from protobuf enum value: STATUS_INSTALLED = 1;
         */
        ApplicationStatus[ApplicationStatus["STATUS_INSTALLED"] = 1] = "STATUS_INSTALLED";
        /**
         * @generated from protobuf enum value: STATUS_INSTALL_ERROR = 2;
         */
        ApplicationStatus[ApplicationStatus["STATUS_INSTALL_ERROR"] = 2] = "STATUS_INSTALL_ERROR";
        /**
         * the application was installed but is missing required configuration.
         *
         * @generated from protobuf enum value: STATUS_UNCONFIGURED = 3;
         */
        ApplicationStatus[ApplicationStatus["STATUS_UNCONFIGURED"] = 3] = "STATUS_UNCONFIGURED";
    })(ApplicationStatus || (ApplicationStatus = {}));
    /**
     * @generated from protobuf enum normalgw.automation.v1.HookRunMode
     */
    var HookRunMode;
    (function (HookRunMode) {
        /**
         * don't allow runs, don't track point state in background or
         * prepare runtimes
         *
         * @generated from protobuf enum value: MODE_DISABLED = 0;
         */
        HookRunMode[HookRunMode["MODE_DISABLED"] = 0] = "MODE_DISABLED";
        /**
         * run only when requested (by calling StartHook)
         *
         * @generated from protobuf enum value: MODE_ON_REQUEST = 1;
         */
        HookRunMode[HookRunMode["MODE_ON_REQUEST"] = 1] = "MODE_ON_REQUEST";
        /**
         * run when a new data values are available, at most once per second
         *
         * @generated from protobuf enum value: MODE_ON_DATA = 2;
         */
        HookRunMode[HookRunMode["MODE_ON_DATA"] = 2] = "MODE_ON_DATA";
        /**
         * run on a schedule defined by the Schedule.Rrule
         *
         * @generated from protobuf enum value: MODE_SCHEDULED = 3;
         */
        HookRunMode[HookRunMode["MODE_SCHEDULED"] = 3] = "MODE_SCHEDULED";
    })(HookRunMode || (HookRunMode = {}));
    /**
     * the cause of a hook invocation
     *
     * @generated from protobuf enum normalgw.automation.v1.TriggerReason
     */
    var TriggerReason;
    (function (TriggerReason) {
        /**
         * @generated from protobuf enum value: TRIGGER_REQUEST = 0;
         */
        TriggerReason[TriggerReason["TRIGGER_REQUEST"] = 0] = "TRIGGER_REQUEST";
        /**
         * @generated from protobuf enum value: TRIGGER_SCHEDULE = 1;
         */
        TriggerReason[TriggerReason["TRIGGER_SCHEDULE"] = 1] = "TRIGGER_SCHEDULE";
        /**
         * @generated from protobuf enum value: TRIGGER_ROUTE = 2;
         */
        TriggerReason[TriggerReason["TRIGGER_ROUTE"] = 2] = "TRIGGER_ROUTE";
        /**
         * @generated from protobuf enum value: TRIGGER_DATA = 3;
         */
        TriggerReason[TriggerReason["TRIGGER_DATA"] = 3] = "TRIGGER_DATA";
    })(TriggerReason || (TriggerReason = {}));
    /**
     * HookRunState
     *
     * @generated from protobuf enum normalgw.automation.v1.HookState
     */
    var HookState;
    (function (HookState) {
        /**
         * @generated from protobuf enum value: STATE_UNKNOWN = 0;
         */
        HookState[HookState["STATE_UNKNOWN"] = 0] = "STATE_UNKNOWN";
        /**
         * @generated from protobuf enum value: STATE_RUNNING = 1;
         */
        HookState[HookState["STATE_RUNNING"] = 1] = "STATE_RUNNING";
        /**
         * @generated from protobuf enum value: STATE_STOPPED = 3;
         */
        HookState[HookState["STATE_STOPPED"] = 3] = "STATE_STOPPED";
        /**
         * set when program crashes or exists with an error nf.fatal("foo")
         *
         * @generated from protobuf enum value: STATE_ERROR = 4;
         */
        HookState[HookState["STATE_ERROR"] = 4] = "STATE_ERROR";
        /**
         * when the hook could not be run due to a precondition like a runtime error
         *
         * @generated from protobuf enum value: STATE_ABORTED = 5;
         */
        HookState[HookState["STATE_ABORTED"] = 5] = "STATE_ABORTED";
        /**
         * @generated from protobuf enum value: STATE_SUCCESS = 6;
         */
        HookState[HookState["STATE_SUCCESS"] = 6] = "STATE_SUCCESS";
    })(HookState || (HookState = {}));
    /**
     * @generated from protobuf enum normalgw.automation.v1.HookLogType
     */
    var HookLogType;
    (function (HookLogType) {
        /**
         * @generated from protobuf enum value: INFO = 0;
         */
        HookLogType[HookLogType["INFO"] = 0] = "INFO";
        /**
         * @generated from protobuf enum value: WARNING = 1;
         */
        HookLogType[HookLogType["WARNING"] = 1] = "WARNING";
        /**
         * @generated from protobuf enum value: ERROR = 2;
         */
        HookLogType[HookLogType["ERROR"] = 2] = "ERROR";
        /**
         * @generated from protobuf enum value: DEBUG = 3;
         */
        HookLogType[HookLogType["DEBUG"] = 3] = "DEBUG";
        /**
         * e.g. program is started, stopped
         *
         * @generated from protobuf enum value: STATE_CHANGE = 4;
         */
        HookLogType[HookLogType["STATE_CHANGE"] = 4] = "STATE_CHANGE";
    })(HookLogType || (HookLogType = {}));
    /**
     * @generated from protobuf enum normalgw.automation.v1.LogLevel
     */
    var LogLevel;
    (function (LogLevel) {
        /**
         * @generated from protobuf enum value: LEVEL_STDOUT = 0;
         */
        LogLevel[LogLevel["LEVEL_STDOUT"] = 0] = "LEVEL_STDOUT";
        /**
         * @generated from protobuf enum value: LEVEL_STDERR = 1;
         */
        LogLevel[LogLevel["LEVEL_STDERR"] = 1] = "LEVEL_STDERR";
    })(LogLevel || (LogLevel = {}));
    // @generated message type with reflection information, may provide speed optimized methods
    class File$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.File", [
                { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "mtime", kind: "message", T: () => Timestamp },
                { no: 3, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { path: "", hash: "", size: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string path */ 1:
                        message.path = reader.string();
                        break;
                    case /* google.protobuf.Timestamp mtime */ 2:
                        message.mtime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.mtime);
                        break;
                    case /* string hash */ 3:
                        message.hash = reader.string();
                        break;
                    case /* int64 size */ 4:
                        message.size = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string path = 1; */
            if (message.path !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.path);
            /* google.protobuf.Timestamp mtime = 2; */
            if (message.mtime)
                Timestamp.internalBinaryWrite(message.mtime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* string hash = 3; */
            if (message.hash !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.hash);
            /* int64 size = 4; */
            if (message.size !== 0)
                writer.tag(4, WireType.Varint).int64(message.size);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.File
     */
    const File = new File$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Application$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Application", [
                { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "runtime", kind: "enum", T: () => ["normalgw.automation.v1.Runtime", Runtime, "RUNTIME_"] },
                { no: 5, name: "compatibility_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 7, name: "hooks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hook },
                { no: 8, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => File },
                { no: 10, name: "git_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 12, name: "status", kind: "enum", T: () => ["normalgw.automation.v1.ApplicationStatus", ApplicationStatus] },
                { no: 13, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConfigurationOption },
                { no: 14, name: "layer", kind: "message", T: () => Layer },
                { no: 15, name: "min_nf_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { id: "", name: "", description: "", runtime: 0, compatibilityDate: "", hooks: [], files: [], gitUrl: "", status: 0, options: [], minNfVersion: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string id */ 1:
                        message.id = reader.string();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* string description */ 3:
                        message.description = reader.string();
                        break;
                    case /* normalgw.automation.v1.Runtime runtime */ 4:
                        message.runtime = reader.int32();
                        break;
                    case /* string compatibility_date */ 5:
                        message.compatibilityDate = reader.string();
                        break;
                    case /* repeated normalgw.automation.v1.Hook hooks */ 7:
                        message.hooks.push(Hook.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.automation.v1.File files */ 8:
                        message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* string git_url */ 10:
                        message.gitUrl = reader.string();
                        break;
                    case /* normalgw.automation.v1.ApplicationStatus status */ 12:
                        message.status = reader.int32();
                        break;
                    case /* repeated normalgw.platform.v1.ConfigurationOption options */ 13:
                        message.options.push(ConfigurationOption.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.hpl.v1.Layer layer */ 14:
                        message.layer = Layer.internalBinaryRead(reader, reader.uint32(), options, message.layer);
                        break;
                    case /* string min_nf_version */ 15:
                        message.minNfVersion = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string id = 1; */
            if (message.id !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.id);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* string description = 3; */
            if (message.description !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.description);
            /* normalgw.automation.v1.Runtime runtime = 4; */
            if (message.runtime !== 0)
                writer.tag(4, WireType.Varint).int32(message.runtime);
            /* string compatibility_date = 5; */
            if (message.compatibilityDate !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.compatibilityDate);
            /* repeated normalgw.automation.v1.Hook hooks = 7; */
            for (let i = 0; i < message.hooks.length; i++)
                Hook.internalBinaryWrite(message.hooks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.automation.v1.File files = 8; */
            for (let i = 0; i < message.files.length; i++)
                File.internalBinaryWrite(message.files[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
            /* string git_url = 10; */
            if (message.gitUrl !== "")
                writer.tag(10, WireType.LengthDelimited).string(message.gitUrl);
            /* normalgw.automation.v1.ApplicationStatus status = 12; */
            if (message.status !== 0)
                writer.tag(12, WireType.Varint).int32(message.status);
            /* repeated normalgw.platform.v1.ConfigurationOption options = 13; */
            for (let i = 0; i < message.options.length; i++)
                ConfigurationOption.internalBinaryWrite(message.options[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Layer layer = 14; */
            if (message.layer)
                Layer.internalBinaryWrite(message.layer, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
            /* string min_nf_version = 15; */
            if (message.minNfVersion !== "")
                writer.tag(15, WireType.LengthDelimited).string(message.minNfVersion);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Application
     */
    const Application = new Application$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class PointSelector$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.PointSelector", [
                { no: 7, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 1, name: "query", kind: "message", T: () => Query },
                { no: 9, name: "groups", kind: "message", oneof: "grouping", T: () => Groups },
                { no: 8, name: "group_function", kind: "scalar", oneof: "grouping", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "annotations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Annotation },
                { no: 4, name: "global_variables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Variable },
                { no: 5, name: "group_variables", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Variable },
                { no: 6, name: "label_attribute", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { layer: "", grouping: { oneofKind: undefined }, annotations: [], globalVariables: [], groupVariables: [], labelAttribute: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 7:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Query query */ 1:
                        message.query = Query.internalBinaryRead(reader, reader.uint32(), options, message.query);
                        break;
                    case /* normalgw.automation.v1.Groups groups */ 9:
                        message.grouping = {
                            oneofKind: "groups",
                            groups: Groups.internalBinaryRead(reader, reader.uint32(), options, message.grouping.groups)
                        };
                        break;
                    case /* string group_function */ 8:
                        message.grouping = {
                            oneofKind: "groupFunction",
                            groupFunction: reader.string()
                        };
                        break;
                    case /* repeated normalgw.hpl.v1.Annotation annotations */ 3:
                        message.annotations.push(Annotation.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.automation.v1.Variable global_variables */ 4:
                        message.globalVariables.push(Variable.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.automation.v1.Variable group_variables */ 5:
                        message.groupVariables.push(Variable.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* string label_attribute */ 6:
                        message.labelAttribute = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 7; */
            if (message.layer !== "")
                writer.tag(7, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.Query query = 1; */
            if (message.query)
                Query.internalBinaryWrite(message.query, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.Groups groups = 9; */
            if (message.grouping.oneofKind === "groups")
                Groups.internalBinaryWrite(message.grouping.groups, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
            /* string group_function = 8; */
            if (message.grouping.oneofKind === "groupFunction")
                writer.tag(8, WireType.LengthDelimited).string(message.grouping.groupFunction);
            /* repeated normalgw.hpl.v1.Annotation annotations = 3; */
            for (let i = 0; i < message.annotations.length; i++)
                Annotation.internalBinaryWrite(message.annotations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.automation.v1.Variable global_variables = 4; */
            for (let i = 0; i < message.globalVariables.length; i++)
                Variable.internalBinaryWrite(message.globalVariables[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.automation.v1.Variable group_variables = 5; */
            for (let i = 0; i < message.groupVariables.length; i++)
                Variable.internalBinaryWrite(message.groupVariables[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* string label_attribute = 6; */
            if (message.labelAttribute !== "")
                writer.tag(6, WireType.LengthDelimited).string(message.labelAttribute);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.PointSelector
     */
    const PointSelector = new PointSelector$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Groups$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Groups", [
                { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { keys: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string keys */ 1:
                        message.keys.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string keys = 1; */
            for (let i = 0; i < message.keys.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.keys[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Groups
     */
    const Groups = new Groups$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Variable$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Variable", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "attrs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
                { no: 4, name: "value", kind: "message", T: () => Value },
                { no: 6, name: "default_value", kind: "message", T: () => Value }
            ]);
        }
        create(value) {
            const message = { uuid: "", label: "", attrs: {} };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string label */ 2:
                        message.label = reader.string();
                        break;
                    case /* map<string, string> attrs */ 3:
                        this.binaryReadMap3(message.attrs, reader, options);
                        break;
                    case /* normalgw.hpl.v1.Value value */ 4:
                        message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    case /* normalgw.hpl.v1.Value default_value */ 6:
                        message.defaultValue = Value.internalBinaryRead(reader, reader.uint32(), options, message.defaultValue);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap3(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.Variable.attrs");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string label = 2; */
            if (message.label !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.label);
            /* map<string, string> attrs = 3; */
            for (let k of Object.keys(message.attrs))
                writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.attrs[k]).join();
            /* normalgw.hpl.v1.Value value = 4; */
            if (message.value)
                Value.internalBinaryWrite(message.value, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Value default_value = 6; */
            if (message.defaultValue)
                Value.internalBinaryWrite(message.defaultValue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Variable
     */
    const Variable = new Variable$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Schedule$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Schedule", [
                { no: 2, name: "rrule", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { rrule: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string rrule */ 2:
                        message.rrule = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string rrule = 2; */
            if (message.rrule !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.rrule);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Schedule
     */
    const Schedule = new Schedule$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Label$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Label", [
                { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { label: "", description: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string label */ 1:
                        message.label = reader.string();
                        break;
                    case /* string description */ 2:
                        message.description = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string label = 1; */
            if (message.label !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.label);
            /* string description = 2; */
            if (message.description !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.description);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Label
     */
    const Label = new Label$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Hook$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.Hook", [
                { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "entry_point", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "points", kind: "message", T: () => PointSelector },
                { no: 5, name: "required_labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Label },
                { no: 6, name: "optional_labels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Label },
                { no: 7, name: "schedule", kind: "message", T: () => Schedule },
                { no: 8, name: "mode", kind: "enum", T: () => ["normalgw.automation.v1.HookRunMode", HookRunMode] },
                { no: 10, name: "command_expiration", kind: "message", T: () => Duration },
                { no: 11, name: "last_run", kind: "message", T: () => HookRun },
                { no: 12, name: "invoke_timeout", kind: "message", T: () => Duration },
                { no: 13, name: "state", kind: "enum", T: () => ["normalgw.automation.v1.HookState", HookState] },
                { no: 14, name: "error", kind: "message", T: () => RuntimeError }
            ]);
        }
        create(value) {
            const message = { id: "", name: "", entryPoint: "", requiredLabels: [], optionalLabels: [], mode: 0, state: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string id */ 1:
                        message.id = reader.string();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* string entry_point */ 3:
                        message.entryPoint = reader.string();
                        break;
                    case /* normalgw.automation.v1.PointSelector points */ 4:
                        message.points = PointSelector.internalBinaryRead(reader, reader.uint32(), options, message.points);
                        break;
                    case /* repeated normalgw.automation.v1.Label required_labels */ 5:
                        message.requiredLabels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated normalgw.automation.v1.Label optional_labels */ 6:
                        message.optionalLabels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.automation.v1.Schedule schedule */ 7:
                        message.schedule = Schedule.internalBinaryRead(reader, reader.uint32(), options, message.schedule);
                        break;
                    case /* normalgw.automation.v1.HookRunMode mode */ 8:
                        message.mode = reader.int32();
                        break;
                    case /* google.protobuf.Duration command_expiration */ 10:
                        message.commandExpiration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.commandExpiration);
                        break;
                    case /* normalgw.automation.v1.HookRun last_run */ 11:
                        message.lastRun = HookRun.internalBinaryRead(reader, reader.uint32(), options, message.lastRun);
                        break;
                    case /* google.protobuf.Duration invoke_timeout */ 12:
                        message.invokeTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.invokeTimeout);
                        break;
                    case /* normalgw.automation.v1.HookState state */ 13:
                        message.state = reader.int32();
                        break;
                    case /* normalgw.automation.v1.RuntimeError error */ 14:
                        message.error = RuntimeError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string id = 1; */
            if (message.id !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.id);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* string entry_point = 3; */
            if (message.entryPoint !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.entryPoint);
            /* normalgw.automation.v1.PointSelector points = 4; */
            if (message.points)
                PointSelector.internalBinaryWrite(message.points, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.automation.v1.Label required_labels = 5; */
            for (let i = 0; i < message.requiredLabels.length; i++)
                Label.internalBinaryWrite(message.requiredLabels[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.automation.v1.Label optional_labels = 6; */
            for (let i = 0; i < message.optionalLabels.length; i++)
                Label.internalBinaryWrite(message.optionalLabels[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.Schedule schedule = 7; */
            if (message.schedule)
                Schedule.internalBinaryWrite(message.schedule, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.HookRunMode mode = 8; */
            if (message.mode !== 0)
                writer.tag(8, WireType.Varint).int32(message.mode);
            /* google.protobuf.Duration command_expiration = 10; */
            if (message.commandExpiration)
                Duration.internalBinaryWrite(message.commandExpiration, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.HookRun last_run = 11; */
            if (message.lastRun)
                HookRun.internalBinaryWrite(message.lastRun, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Duration invoke_timeout = 12; */
            if (message.invokeTimeout)
                Duration.internalBinaryWrite(message.invokeTimeout, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.HookState state = 13; */
            if (message.state !== 0)
                writer.tag(13, WireType.Varint).int32(message.state);
            /* normalgw.automation.v1.RuntimeError error = 14; */
            if (message.error)
                RuntimeError.internalBinaryWrite(message.error, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.Hook
     */
    const Hook = new Hook$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookLogEntry$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookLogEntry", [
                { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
                { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { message: "", hookId: "", runId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp timestamp */ 1:
                        message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                        break;
                    case /* string message */ 2:
                        message.message = reader.string();
                        break;
                    case /* string hook_id */ 3:
                        message.hookId = reader.string();
                        break;
                    case /* string run_id */ 4:
                        message.runId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp timestamp = 1; */
            if (message.timestamp)
                Timestamp.internalBinaryWrite(message.timestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* string message = 2; */
            if (message.message !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.message);
            /* string hook_id = 3; */
            if (message.hookId !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.hookId);
            /* string run_id = 4; */
            if (message.runId !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.runId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookLogEntry
     */
    new HookLogEntry$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookEvent$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookEvent", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "data", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { message: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* string message */ 2:
                        message.message = reader.string();
                        break;
                    case /* google.protobuf.Any data */ 3:
                        message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* string message = 2; */
            if (message.message !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.message);
            /* google.protobuf.Any data = 3; */
            if (message.data)
                Any.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookEvent
     */
    const HookEvent = new HookEvent$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookResult$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookResult", [
                { no: 1, name: "end_time", kind: "message", T: () => Timestamp },
                { no: 2, name: "state", kind: "enum", T: () => ["normalgw.automation.v1.HookState", HookState] },
                { no: 3, name: "invocation_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 4, name: "return_data", kind: "message", T: () => Any },
                { no: 5, name: "return_value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "events", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookEvent },
                { no: 7, name: "error", kind: "message", T: () => RuntimeError }
            ]);
        }
        create(value) {
            const message = { state: 0, invocationCount: 0, returnValue: "", events: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp end_time */ 1:
                        message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                        break;
                    case /* normalgw.automation.v1.HookState state */ 2:
                        message.state = reader.int32();
                        break;
                    case /* int64 invocation_count */ 3:
                        message.invocationCount = reader.int64().toNumber();
                        break;
                    case /* google.protobuf.Any return_data */ 4:
                        message.returnData = Any.internalBinaryRead(reader, reader.uint32(), options, message.returnData);
                        break;
                    case /* string return_value */ 5:
                        message.returnValue = reader.string();
                        break;
                    case /* repeated normalgw.automation.v1.HookEvent events */ 6:
                        message.events.push(HookEvent.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.automation.v1.RuntimeError error */ 7:
                        message.error = RuntimeError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp end_time = 1; */
            if (message.endTime)
                Timestamp.internalBinaryWrite(message.endTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.HookState state = 2; */
            if (message.state !== 0)
                writer.tag(2, WireType.Varint).int32(message.state);
            /* int64 invocation_count = 3; */
            if (message.invocationCount !== 0)
                writer.tag(3, WireType.Varint).int64(message.invocationCount);
            /* google.protobuf.Any return_data = 4; */
            if (message.returnData)
                Any.internalBinaryWrite(message.returnData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* string return_value = 5; */
            if (message.returnValue !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.returnValue);
            /* repeated normalgw.automation.v1.HookEvent events = 6; */
            for (let i = 0; i < message.events.length; i++)
                HookEvent.internalBinaryWrite(message.events[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.automation.v1.RuntimeError error = 7; */
            if (message.error)
                RuntimeError.internalBinaryWrite(message.error, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookResult
     */
    const HookResult = new HookResult$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookRun$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookRun", [
                { no: 1, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "pid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "state", kind: "enum", T: () => ["normalgw.automation.v1.HookState", HookState] },
                { no: 4, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "trigger", kind: "enum", T: () => ["normalgw.automation.v1.TriggerReason", TriggerReason] },
                { no: 6, name: "start_time", kind: "message", T: () => Timestamp },
                { no: 7, name: "end_time", kind: "message", T: () => Timestamp },
                { no: 8, name: "args", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
                { no: 9, name: "results", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => HookResult } },
                { no: 10, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 11, name: "error", kind: "message", T: () => RuntimeError }
            ]);
        }
        create(value) {
            const message = { hookId: "", pid: "", state: 0, message: "", trigger: 0, args: {}, results: {}, version: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string hook_id */ 1:
                        message.hookId = reader.string();
                        break;
                    case /* string pid */ 2:
                        message.pid = reader.string();
                        break;
                    case /* normalgw.automation.v1.HookState state */ 3:
                        message.state = reader.int32();
                        break;
                    case /* string message */ 4:
                        message.message = reader.string();
                        break;
                    case /* normalgw.automation.v1.TriggerReason trigger */ 5:
                        message.trigger = reader.int32();
                        break;
                    case /* google.protobuf.Timestamp start_time */ 6:
                        message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                        break;
                    case /* google.protobuf.Timestamp end_time */ 7:
                        message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                        break;
                    case /* map<string, string> args */ 8:
                        this.binaryReadMap8(message.args, reader, options);
                        break;
                    case /* map<string, normalgw.automation.v1.HookResult> results */ 9:
                        this.binaryReadMap9(message.results, reader, options);
                        break;
                    case /* string version */ 10:
                        message.version = reader.string();
                        break;
                    case /* normalgw.automation.v1.RuntimeError error */ 11:
                        message.error = RuntimeError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap8(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.HookRun.args");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        binaryReadMap9(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = HookResult.internalBinaryRead(reader, reader.uint32(), options);
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.HookRun.results");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : HookResult.create();
        }
        internalBinaryWrite(message, writer, options) {
            /* string hook_id = 1; */
            if (message.hookId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.hookId);
            /* string pid = 2; */
            if (message.pid !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.pid);
            /* normalgw.automation.v1.HookState state = 3; */
            if (message.state !== 0)
                writer.tag(3, WireType.Varint).int32(message.state);
            /* string message = 4; */
            if (message.message !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.message);
            /* normalgw.automation.v1.TriggerReason trigger = 5; */
            if (message.trigger !== 0)
                writer.tag(5, WireType.Varint).int32(message.trigger);
            /* google.protobuf.Timestamp start_time = 6; */
            if (message.startTime)
                Timestamp.internalBinaryWrite(message.startTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp end_time = 7; */
            if (message.endTime)
                Timestamp.internalBinaryWrite(message.endTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* map<string, string> args = 8; */
            for (let k of Object.keys(message.args))
                writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.args[k]).join();
            /* map<string, normalgw.automation.v1.HookResult> results = 9; */
            for (let k of Object.keys(message.results)) {
                writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
                writer.tag(2, WireType.LengthDelimited).fork();
                HookResult.internalBinaryWrite(message.results[k], writer, options);
                writer.join().join();
            }
            /* string version = 10; */
            if (message.version !== "")
                writer.tag(10, WireType.LengthDelimited).string(message.version);
            /* normalgw.automation.v1.RuntimeError error = 11; */
            if (message.error)
                RuntimeError.internalBinaryWrite(message.error, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookRun
     */
    const HookRun = new HookRun$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StartHookRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.StartHookRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "args", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
                { no: 4, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", args: {}, groups: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* map<string, string> args */ 3:
                        this.binaryReadMap3(message.args, reader, options);
                        break;
                    case /* repeated string groups */ 4:
                        message.groups.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap3(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = reader.string();
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.StartHookRequest.args");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : "";
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* map<string, string> args = 3; */
            for (let k of Object.keys(message.args))
                writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.args[k]).join();
            /* repeated string groups = 4; */
            for (let i = 0; i < message.groups.length; i++)
                writer.tag(4, WireType.LengthDelimited).string(message.groups[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.StartHookRequest
     */
    const StartHookRequest = new StartHookRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RuntimeError$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.RuntimeError", [
                { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "stack", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { message: "", stack: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string message */ 1:
                        message.message = reader.string();
                        break;
                    case /* repeated string stack */ 2:
                        message.stack.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string message = 1; */
            if (message.message !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.message);
            /* repeated string stack = 2; */
            for (let i = 0; i < message.stack.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.stack[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.RuntimeError
     */
    const RuntimeError = new RuntimeError$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StartHookReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.StartHookReply", [
                { no: 1, name: "pid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "error", kind: "message", T: () => RuntimeError }
            ]);
        }
        create(value) {
            const message = { pid: "", groups: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string pid */ 1:
                        message.pid = reader.string();
                        break;
                    case /* repeated string groups */ 2:
                        message.groups.push(reader.string());
                        break;
                    case /* normalgw.automation.v1.RuntimeError error */ 3:
                        message.error = RuntimeError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string pid = 1; */
            if (message.pid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.pid);
            /* repeated string groups = 2; */
            for (let i = 0; i < message.groups.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.groups[i]);
            /* normalgw.automation.v1.RuntimeError error = 3; */
            if (message.error)
                RuntimeError.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.StartHookReply
     */
    const StartHookReply = new StartHookReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StopHookRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.StopHookRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "pid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", pid: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* string pid */ 3:
                        message.pid = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* string pid = 3; */
            if (message.pid !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.pid);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.StopHookRequest
     */
    const StopHookRequest = new StopHookRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StopHookReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.StopHookReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.StopHookReply
     */
    const StopHookReply = new StopHookReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateHookRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpdateHookRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook", kind: "message", T: () => Hook }
            ]);
        }
        create(value) {
            const message = { applicationId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* normalgw.automation.v1.Hook hook */ 2:
                        message.hook = Hook.internalBinaryRead(reader, reader.uint32(), options, message.hook);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* normalgw.automation.v1.Hook hook = 2; */
            if (message.hook)
                Hook.internalBinaryWrite(message.hook, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpdateHookRequest
     */
    const UpdateHookRequest = new UpdateHookRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateHookReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpdateHookReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpdateHookReply
     */
    const UpdateHookReply = new UpdateHookReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteHookRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteHookRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteHookRequest
     */
    const DeleteHookRequest = new DeleteHookRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteHookReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteHookReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteHookReply
     */
    const DeleteHookReply = new DeleteHookReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookRunsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookRunsRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "state", kind: "enum", T: () => ["normalgw.automation.v1.HookState", HookState] },
                { no: 4, name: "start_time", kind: "message", T: () => Timestamp },
                { no: 5, name: "end_time", kind: "message", T: () => Timestamp },
                { no: 6, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 7, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", state: 0, pageSize: 0, pageOffset: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* normalgw.automation.v1.HookState state */ 3:
                        message.state = reader.int32();
                        break;
                    case /* google.protobuf.Timestamp start_time */ 4:
                        message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                        break;
                    case /* google.protobuf.Timestamp end_time */ 5:
                        message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                        break;
                    case /* int64 page_size */ 6:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    case /* int64 page_offset */ 7:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* normalgw.automation.v1.HookState state = 3; */
            if (message.state !== 0)
                writer.tag(3, WireType.Varint).int32(message.state);
            /* google.protobuf.Timestamp start_time = 4; */
            if (message.startTime)
                Timestamp.internalBinaryWrite(message.startTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp end_time = 5; */
            if (message.endTime)
                Timestamp.internalBinaryWrite(message.endTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* int64 page_size = 6; */
            if (message.pageSize !== 0)
                writer.tag(6, WireType.Varint).int64(message.pageSize);
            /* int64 page_offset = 7; */
            if (message.pageOffset !== 0)
                writer.tag(7, WireType.Varint).int64(message.pageOffset);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookRunsRequest
     */
    const GetHookRunsRequest = new GetHookRunsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookRunsReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookRunsReply", [
                { no: 1, name: "runs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookRun },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { runs: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.HookRun runs */ 1:
                        message.runs.push(HookRun.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.HookRun runs = 1; */
            for (let i = 0; i < message.runs.length; i++)
                HookRun.internalBinaryWrite(message.runs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookRunsReply
     */
    const GetHookRunsReply = new GetHookRunsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateApplicationRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.CreateApplicationRequest", [
                { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "runtime", kind: "enum", T: () => ["normalgw.automation.v1.Runtime", Runtime, "RUNTIME_"] },
                { no: 5, name: "compatibility_date", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 11, name: "git_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 13, name: "options", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConfigurationOption },
                { no: 14, name: "layer", kind: "message", T: () => Layer },
                { no: 15, name: "min_nf_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { id: "", name: "", description: "", runtime: 0, compatibilityDate: "", gitUrl: "", options: [], minNfVersion: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string id */ 1:
                        message.id = reader.string();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* string description */ 3:
                        message.description = reader.string();
                        break;
                    case /* normalgw.automation.v1.Runtime runtime */ 4:
                        message.runtime = reader.int32();
                        break;
                    case /* string compatibility_date */ 5:
                        message.compatibilityDate = reader.string();
                        break;
                    case /* string git_url */ 11:
                        message.gitUrl = reader.string();
                        break;
                    case /* repeated normalgw.platform.v1.ConfigurationOption options */ 13:
                        message.options.push(ConfigurationOption.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* normalgw.hpl.v1.Layer layer */ 14:
                        message.layer = Layer.internalBinaryRead(reader, reader.uint32(), options, message.layer);
                        break;
                    case /* string min_nf_version */ 15:
                        message.minNfVersion = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string id = 1; */
            if (message.id !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.id);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* string description = 3; */
            if (message.description !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.description);
            /* normalgw.automation.v1.Runtime runtime = 4; */
            if (message.runtime !== 0)
                writer.tag(4, WireType.Varint).int32(message.runtime);
            /* string compatibility_date = 5; */
            if (message.compatibilityDate !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.compatibilityDate);
            /* string git_url = 11; */
            if (message.gitUrl !== "")
                writer.tag(11, WireType.LengthDelimited).string(message.gitUrl);
            /* repeated normalgw.platform.v1.ConfigurationOption options = 13; */
            for (let i = 0; i < message.options.length; i++)
                ConfigurationOption.internalBinaryWrite(message.options[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.Layer layer = 14; */
            if (message.layer)
                Layer.internalBinaryWrite(message.layer, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
            /* string min_nf_version = 15; */
            if (message.minNfVersion !== "")
                writer.tag(15, WireType.LengthDelimited).string(message.minNfVersion);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.CreateApplicationRequest
     */
    const CreateApplicationRequest = new CreateApplicationRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CreateApplicationReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.CreateApplicationReply", [
                { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { id: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string id */ 1:
                        message.id = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string id = 1; */
            if (message.id !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.id);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.CreateApplicationReply
     */
    const CreateApplicationReply = new CreateApplicationReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateApplicationRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpdateApplicationRequest", [
                { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "configuration", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ConfigurationValue } },
                { no: 4, name: "git_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "min_nf_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "layer", kind: "message", T: () => Layer }
            ]);
        }
        create(value) {
            const message = { id: "", configuration: {}, gitUrl: "", minNfVersion: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string id */ 1:
                        message.id = reader.string();
                        break;
                    case /* map<string, normalgw.platform.v1.ConfigurationValue> configuration */ 3:
                        this.binaryReadMap3(message.configuration, reader, options);
                        break;
                    case /* string git_url */ 4:
                        message.gitUrl = reader.string();
                        break;
                    case /* string min_nf_version */ 5:
                        message.minNfVersion = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Layer layer */ 6:
                        message.layer = Layer.internalBinaryRead(reader, reader.uint32(), options, message.layer);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap3(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = ConfigurationValue.internalBinaryRead(reader, reader.uint32(), options);
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.UpdateApplicationRequest.configuration");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : ConfigurationValue.create();
        }
        internalBinaryWrite(message, writer, options) {
            /* string id = 1; */
            if (message.id !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.id);
            /* map<string, normalgw.platform.v1.ConfigurationValue> configuration = 3; */
            for (let k of Object.keys(message.configuration)) {
                writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
                writer.tag(2, WireType.LengthDelimited).fork();
                ConfigurationValue.internalBinaryWrite(message.configuration[k], writer, options);
                writer.join().join();
            }
            /* string git_url = 4; */
            if (message.gitUrl !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.gitUrl);
            /* string min_nf_version = 5; */
            if (message.minNfVersion !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.minNfVersion);
            /* normalgw.hpl.v1.Layer layer = 6; */
            if (message.layer)
                Layer.internalBinaryWrite(message.layer, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpdateApplicationRequest
     */
    const UpdateApplicationRequest = new UpdateApplicationRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpdateApplicationReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpdateApplicationReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpdateApplicationReply
     */
    const UpdateApplicationReply = new UpdateApplicationReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetApplicationsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetApplicationsRequest", [
                { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 3, name: "page_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { name: "", pageSize: 0, pageCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string name */ 1:
                        message.name = reader.string();
                        break;
                    case /* int64 page_size */ 2:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    case /* int64 page_count */ 3:
                        message.pageCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string name = 1; */
            if (message.name !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.name);
            /* int64 page_size = 2; */
            if (message.pageSize !== 0)
                writer.tag(2, WireType.Varint).int64(message.pageSize);
            /* int64 page_count = 3; */
            if (message.pageCount !== 0)
                writer.tag(3, WireType.Varint).int64(message.pageCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetApplicationsRequest
     */
    const GetApplicationsRequest = new GetApplicationsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetApplicationsReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetApplicationsReply", [
                { no: 1, name: "applications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Application },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { applications: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.Application applications */ 1:
                        message.applications.push(Application.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.Application applications = 1; */
            for (let i = 0; i < message.applications.length; i++)
                Application.internalBinaryWrite(message.applications[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetApplicationsReply
     */
    const GetApplicationsReply = new GetApplicationsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHooksRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHooksRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 4, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", name: "", pageSize: 0, pageOffset: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* int64 page_size */ 3:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    case /* int64 page_offset */ 4:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* int64 page_size = 3; */
            if (message.pageSize !== 0)
                writer.tag(3, WireType.Varint).int64(message.pageSize);
            /* int64 page_offset = 4; */
            if (message.pageOffset !== 0)
                writer.tag(4, WireType.Varint).int64(message.pageOffset);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHooksRequest
     */
    new GetHooksRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHooksReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHooksReply", [
                { no: 1, name: "hooks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hook },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { hooks: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.Hook hooks */ 1:
                        message.hooks.push(Hook.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.Hook hooks = 1; */
            for (let i = 0; i < message.hooks.length; i++)
                Hook.internalBinaryWrite(message.hooks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHooksReply
     */
    new GetHooksReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteApplicationRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteApplicationRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteApplicationRequest
     */
    const DeleteApplicationRequest = new DeleteApplicationRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteApplicationReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteApplicationReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteApplicationReply
     */
    const DeleteApplicationReply = new DeleteApplicationReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ReadFileRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.ReadFileRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 4, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", path: "", offset: 0, count: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string path */ 2:
                        message.path = reader.string();
                        break;
                    case /* int64 offset */ 3:
                        message.offset = reader.int64().toNumber();
                        break;
                    case /* int64 count */ 4:
                        message.count = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string path = 2; */
            if (message.path !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.path);
            /* int64 offset = 3; */
            if (message.offset !== 0)
                writer.tag(3, WireType.Varint).int64(message.offset);
            /* int64 count = 4; */
            if (message.count !== 0)
                writer.tag(4, WireType.Varint).int64(message.count);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.ReadFileRequest
     */
    const ReadFileRequest = new ReadFileRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ReadFileReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.ReadFileReply", [
                { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { data: new Uint8Array(0), totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* bytes data */ 1:
                        message.data = reader.bytes();
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* bytes data = 1; */
            if (message.data.length)
                writer.tag(1, WireType.LengthDelimited).bytes(message.data);
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.ReadFileReply
     */
    const ReadFileReply = new ReadFileReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class WriteFileRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.WriteFileRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", path: "", data: new Uint8Array(0) };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string path */ 2:
                        message.path = reader.string();
                        break;
                    case /* bytes data */ 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string path = 2; */
            if (message.path !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.path);
            /* bytes data = 3; */
            if (message.data.length)
                writer.tag(3, WireType.LengthDelimited).bytes(message.data);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.WriteFileRequest
     */
    const WriteFileRequest = new WriteFileRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class WriteFileReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.WriteFileReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.WriteFileReply
     */
    const WriteFileReply = new WriteFileReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteFileRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteFileRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", path: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string path */ 2:
                        message.path = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string path = 2; */
            if (message.path !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.path);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteFileRequest
     */
    const DeleteFileRequest = new DeleteFileRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class DeleteFileReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.DeleteFileReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.DeleteFileReply
     */
    const DeleteFileReply = new DeleteFileReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookLogsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookLogsRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", version: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* string version */ 3:
                        message.version = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* string version = 3; */
            if (message.version !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.version);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookLogsRequest
     */
    const GetHookLogsRequest = new GetHookLogsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookLogsReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookLogsReply", [
                { no: 1, name: "level", kind: "enum", T: () => ["normalgw.automation.v1.LogLevel", LogLevel] },
                { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "ts", kind: "message", T: () => Timestamp },
                { no: 4, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { level: 0, message: "", version: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.automation.v1.LogLevel level */ 1:
                        message.level = reader.int32();
                        break;
                    case /* string message */ 2:
                        message.message = reader.string();
                        break;
                    case /* google.protobuf.Timestamp ts */ 3:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* string version */ 4:
                        message.version = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.automation.v1.LogLevel level = 1; */
            if (message.level !== 0)
                writer.tag(1, WireType.Varint).int32(message.level);
            /* string message = 2; */
            if (message.message !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.message);
            /* google.protobuf.Timestamp ts = 3; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* string version = 4; */
            if (message.version !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.version);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookLogsReply
     */
    const GetHookLogsReply = new GetHookLogsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpgradeApplicationRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpgradeApplicationRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpgradeApplicationRequest
     */
    const UpgradeApplicationRequest = new UpgradeApplicationRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class UpgradeApplicationReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.UpgradeApplicationReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.UpgradeApplicationReply
     */
    const UpgradeApplicationReply = new UpgradeApplicationReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class InstallDependenciesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.InstallDependenciesRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.InstallDependenciesRequest
     */
    const InstallDependenciesRequest = new InstallDependenciesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class InstallDependenciesReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.InstallDependenciesReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.InstallDependenciesReply
     */
    const InstallDependenciesReply = new InstallDependenciesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RestartApplicationRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.RestartApplicationRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.RestartApplicationRequest
     */
    const RestartApplicationRequest = new RestartApplicationRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class RestartApplicationReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.RestartApplicationReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.RestartApplicationReply
     */
    const RestartApplicationReply = new RestartApplicationReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ResetVariablesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.ResetVariablesRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "global_variables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "group_variables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", globalVariables: [], groupVariables: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* repeated string global_variables */ 3:
                        message.globalVariables.push(reader.string());
                        break;
                    case /* repeated string group_variables */ 4:
                        message.groupVariables.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* repeated string global_variables = 3; */
            for (let i = 0; i < message.globalVariables.length; i++)
                writer.tag(3, WireType.LengthDelimited).string(message.globalVariables[i]);
            /* repeated string group_variables = 4; */
            for (let i = 0; i < message.groupVariables.length; i++)
                writer.tag(4, WireType.LengthDelimited).string(message.groupVariables[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.ResetVariablesRequest
     */
    const ResetVariablesRequest = new ResetVariablesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ResetVariablesReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.ResetVariablesReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.ResetVariablesReply
     */
    const ResetVariablesReply = new ResetVariablesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetApplicationTimeSeriesRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetApplicationTimeSeriesRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hooks", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "from", kind: "message", T: () => Timestamp },
                { no: 4, name: "to", kind: "message", T: () => Timestamp },
                { no: 5, name: "resample", kind: "message", T: () => ResampleOptions }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hooks: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* repeated string hooks */ 2:
                        message.hooks.push(reader.string());
                        break;
                    case /* google.protobuf.Timestamp from */ 3:
                        message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                        break;
                    case /* google.protobuf.Timestamp to */ 4:
                        message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                        break;
                    case /* normalgw.hpl.v1.ResampleOptions resample */ 5:
                        message.resample = ResampleOptions.internalBinaryRead(reader, reader.uint32(), options, message.resample);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* repeated string hooks = 2; */
            for (let i = 0; i < message.hooks.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.hooks[i]);
            /* google.protobuf.Timestamp from = 3; */
            if (message.from)
                Timestamp.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Timestamp to = 4; */
            if (message.to)
                Timestamp.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.ResampleOptions resample = 5; */
            if (message.resample)
                ResampleOptions.internalBinaryWrite(message.resample, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetApplicationTimeSeriesRequest
     */
    const GetApplicationTimeSeriesRequest = new GetApplicationTimeSeriesRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookTimeSeries$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookTimeSeries", [
                { no: 1, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookTimeSeries_Sample }
            ]);
        }
        create(value) {
            const message = { hookId: "", values: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string hook_id */ 1:
                        message.hookId = reader.string();
                        break;
                    case /* repeated normalgw.automation.v1.HookTimeSeries.Sample values */ 2:
                        message.values.push(HookTimeSeries_Sample.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string hook_id = 1; */
            if (message.hookId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.hookId);
            /* repeated normalgw.automation.v1.HookTimeSeries.Sample values = 2; */
            for (let i = 0; i < message.values.length; i++)
                HookTimeSeries_Sample.internalBinaryWrite(message.values[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookTimeSeries
     */
    const HookTimeSeries = new HookTimeSeries$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookTimeSeries_Sample$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookTimeSeries.Sample", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "stopped", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 3, name: "error", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 4, name: "aborted", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 5, name: "success", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
            ]);
        }
        create(value) {
            const message = { stopped: 0, error: 0, aborted: 0, success: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* uint32 stopped */ 2:
                        message.stopped = reader.uint32();
                        break;
                    case /* uint32 error */ 3:
                        message.error = reader.uint32();
                        break;
                    case /* uint32 aborted */ 4:
                        message.aborted = reader.uint32();
                        break;
                    case /* uint32 success */ 5:
                        message.success = reader.uint32();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* uint32 stopped = 2; */
            if (message.stopped !== 0)
                writer.tag(2, WireType.Varint).uint32(message.stopped);
            /* uint32 error = 3; */
            if (message.error !== 0)
                writer.tag(3, WireType.Varint).uint32(message.error);
            /* uint32 aborted = 4; */
            if (message.aborted !== 0)
                writer.tag(4, WireType.Varint).uint32(message.aborted);
            /* uint32 success = 5; */
            if (message.success !== 0)
                writer.tag(5, WireType.Varint).uint32(message.success);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookTimeSeries.Sample
     */
    const HookTimeSeries_Sample = new HookTimeSeries_Sample$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetApplicationTimeSeriesReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetApplicationTimeSeriesReply", [
                { no: 1, name: "hooks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookTimeSeries }
            ]);
        }
        create(value) {
            const message = { hooks: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.HookTimeSeries hooks */ 1:
                        message.hooks.push(HookTimeSeries.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.HookTimeSeries hooks = 1; */
            for (let i = 0; i < message.hooks.length; i++)
                HookTimeSeries.internalBinaryWrite(message.hooks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetApplicationTimeSeriesReply
     */
    const GetApplicationTimeSeriesReply = new GetApplicationTimeSeriesReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class HookPoint$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.HookPoint", [
                { no: 1, name: "group", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "point", kind: "message", T: () => Point }
            ]);
        }
        create(value) {
            const message = { group: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string group */ 1:
                        message.group = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Point point */ 3:
                        message.point = Point.internalBinaryRead(reader, reader.uint32(), options, message.point);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string group = 1; */
            if (message.group !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.group);
            /* normalgw.hpl.v1.Point point = 3; */
            if (message.point)
                Point.internalBinaryWrite(message.point, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.HookPoint
     */
    const HookPoint = new HookPoint$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookPointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookPointsRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "group", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 5, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "", group: "", pageOffset: 0, pageSize: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* string group */ 3:
                        message.group = reader.string();
                        break;
                    case /* int64 page_offset */ 4:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    case /* int64 page_size */ 5:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* string group = 3; */
            if (message.group !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.group);
            /* int64 page_offset = 4; */
            if (message.pageOffset !== 0)
                writer.tag(4, WireType.Varint).int64(message.pageOffset);
            /* int64 page_size = 5; */
            if (message.pageSize !== 0)
                writer.tag(5, WireType.Varint).int64(message.pageSize);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookPointsRequest
     */
    const GetHookPointsRequest = new GetHookPointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookPointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookPointsReply", [
                { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookPoint },
                { no: 2, name: "values", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
                { no: 3, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { points: [], values: {}, totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.HookPoint points */ 1:
                        message.points.push(HookPoint.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* map<string, normalgw.hpl.v1.Value> values */ 2:
                        this.binaryReadMap2(message.values, reader, options);
                        break;
                    case /* int64 total_count */ 3:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap2(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = Value.internalBinaryRead(reader, reader.uint32(), options);
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.GetHookPointsReply.values");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : Value.create();
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.HookPoint points = 1; */
            for (let i = 0; i < message.points.length; i++)
                HookPoint.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* map<string, normalgw.hpl.v1.Value> values = 2; */
            for (let k of Object.keys(message.values)) {
                writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
                writer.tag(2, WireType.LengthDelimited).fork();
                Value.internalBinaryWrite(message.values[k], writer, options);
                writer.join().join();
            }
            /* int64 total_count = 3; */
            if (message.totalCount !== 0)
                writer.tag(3, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookPointsReply
     */
    const GetHookPointsReply = new GetHookPointsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookDataRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookDataRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookDataRequest
     */
    const GetHookDataRequest = new GetHookDataRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookDataReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookDataReply", [
                { no: 1, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "group_variables", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetHookDataReply_GroupVariables } },
                { no: 3, name: "global_variables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { groups: [], groupVariables: {}, globalVariables: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated string groups */ 1:
                        message.groups.push(reader.string());
                        break;
                    case /* map<string, normalgw.automation.v1.GetHookDataReply.GroupVariables> group_variables */ 2:
                        this.binaryReadMap2(message.groupVariables, reader, options);
                        break;
                    case /* repeated string global_variables */ 3:
                        message.globalVariables.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        binaryReadMap2(map, reader, options) {
            let len = reader.uint32(), end = reader.pos + len, key, val;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case 1:
                        key = reader.string();
                        break;
                    case 2:
                        val = GetHookDataReply_GroupVariables.internalBinaryRead(reader, reader.uint32(), options);
                        break;
                    default: throw new globalThis.Error("unknown map entry field for field normalgw.automation.v1.GetHookDataReply.group_variables");
                }
            }
            map[key !== null && key !== void 0 ? key : ""] = val !== null && val !== void 0 ? val : GetHookDataReply_GroupVariables.create();
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated string groups = 1; */
            for (let i = 0; i < message.groups.length; i++)
                writer.tag(1, WireType.LengthDelimited).string(message.groups[i]);
            /* map<string, normalgw.automation.v1.GetHookDataReply.GroupVariables> group_variables = 2; */
            for (let k of Object.keys(message.groupVariables)) {
                writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
                writer.tag(2, WireType.LengthDelimited).fork();
                GetHookDataReply_GroupVariables.internalBinaryWrite(message.groupVariables[k], writer, options);
                writer.join().join();
            }
            /* repeated string global_variables = 3; */
            for (let i = 0; i < message.globalVariables.length; i++)
                writer.tag(3, WireType.LengthDelimited).string(message.globalVariables[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookDataReply
     */
    const GetHookDataReply = new GetHookDataReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetHookDataReply_GroupVariables$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.GetHookDataReply.GroupVariables", [
                { no: 1, name: "group", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "variables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { group: "", variables: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string group */ 1:
                        message.group = reader.string();
                        break;
                    case /* repeated string variables */ 2:
                        message.variables.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string group = 1; */
            if (message.group !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.group);
            /* repeated string variables = 2; */
            for (let i = 0; i < message.variables.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.variables[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.GetHookDataReply.GroupVariables
     */
    const GetHookDataReply_GroupVariables = new GetHookDataReply_GroupVariables$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class EvaluateHookPointsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.EvaluateHookPointsRequest", [
                { no: 1, name: "application_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "hook_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "points", kind: "message", T: () => PointSelector }
            ]);
        }
        create(value) {
            const message = { applicationId: "", hookId: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string application_id */ 1:
                        message.applicationId = reader.string();
                        break;
                    case /* string hook_id */ 2:
                        message.hookId = reader.string();
                        break;
                    case /* normalgw.automation.v1.PointSelector points */ 3:
                        message.points = PointSelector.internalBinaryRead(reader, reader.uint32(), options, message.points);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string application_id = 1; */
            if (message.applicationId !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.applicationId);
            /* string hook_id = 2; */
            if (message.hookId !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.hookId);
            /* normalgw.automation.v1.PointSelector points = 3; */
            if (message.points)
                PointSelector.internalBinaryWrite(message.points, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.EvaluateHookPointsRequest
     */
    const EvaluateHookPointsRequest = new EvaluateHookPointsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class EvaluateHookPointsReply$Type extends MessageType {
        constructor() {
            super("normalgw.automation.v1.EvaluateHookPointsReply", [
                { no: 1, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HookPoint },
                { no: 2, name: "groups", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { points: [], groups: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.automation.v1.HookPoint points */ 1:
                        message.points.push(HookPoint.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* repeated string groups */ 2:
                        message.groups.push(reader.string());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.automation.v1.HookPoint points = 1; */
            for (let i = 0; i < message.points.length; i++)
                HookPoint.internalBinaryWrite(message.points[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* repeated string groups = 2; */
            for (let i = 0; i < message.groups.length; i++)
                writer.tag(2, WireType.LengthDelimited).string(message.groups[i]);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.automation.v1.EvaluateHookPointsReply
     */
    const EvaluateHookPointsReply = new EvaluateHookPointsReply$Type();
    /**
     * @generated ServiceType for protobuf service normalgw.automation.v1.ApplicationService
     */
    const ApplicationService = new ServiceType("normalgw.automation.v1.ApplicationService", [
        { name: "StartHook", options: { "google.api.http": { post: "/api/v1/apps/{application_id}/hooks/{hook_id}", body: "args" } }, I: StartHookRequest, O: StartHookReply },
        { name: "StopHook", options: { "google.api.http": { delete: "/api/v1/apps/{application_id}/hooks/{hook_id}/{pid}" } }, I: StopHookRequest, O: StopHookReply },
        { name: "UpdateHook", options: { "google.api.http": { post: "/api/v1/apps/{application_id}/hooks", body: "hook" } }, I: UpdateHookRequest, O: UpdateHookReply },
        { name: "DeleteHook", options: { "google.api.http": { delete: "/api/v1/apps/{application_id}/hooks/{hook_id}" } }, I: DeleteHookRequest, O: DeleteHookReply },
        { name: "GetHookRuns", options: { "google.api.http": { get: "/api/v1/apps/{application_id}/hooks/{hook_id}/runs", body: "*" }, "normalgw.annotations.auth": { readonly: true } }, I: GetHookRunsRequest, O: GetHookRunsReply },
        { name: "CreateApplication", options: { "google.api.http": { post: "/api/v1/apps", body: "*" } }, I: CreateApplicationRequest, O: CreateApplicationReply },
        { name: "UpdateApplication", options: { "google.api.http": { patch: "/api/v1/apps/{id}", body: "*" } }, I: UpdateApplicationRequest, O: UpdateApplicationReply },
        { name: "GetApplications", options: { "google.api.http": { get: "/api/v1/apps", additionalBindings: [{ get: "/api/v1/apps/{name}" }] }, "normalgw.annotations.auth": { readonly: true } }, I: GetApplicationsRequest, O: GetApplicationsReply },
        { name: "DeleteApplication", options: { "google.api.http": { delete: "/api/v1/apps/{application_id}" } }, I: DeleteApplicationRequest, O: DeleteApplicationReply },
        { name: "ReadFile", options: { "google.api.http": { get: "/api/v1/apps/{application_id}/files/{path=**}" }, "normalgw.annotations.auth": { readonly: true } }, I: ReadFileRequest, O: ReadFileReply },
        { name: "WriteFile", options: { "google.api.http": { post: "/api/v1/apps/{application_id}/files/{path=**}", body: "data" } }, I: WriteFileRequest, O: WriteFileReply },
        { name: "DeleteFile", options: { "google.api.http": { delete: "/api/v1/apps/{application_id}/files/{path=**}" } }, I: DeleteFileRequest, O: DeleteFileReply },
        { name: "GetHookLogs", serverStreaming: true, options: { "google.api.http": { get: "/api/v1/apps/{application_id}/hooks/{hook_id}/logs", additionalBindings: [{ get: "/api/v1/apps/{application_id}/logs" }] }, "normalgw.annotations.auth": { readonly: true } }, I: GetHookLogsRequest, O: GetHookLogsReply },
        { name: "UpgradeApplication", options: { "google.api.http": { put: "/api/v1/apps/{application_id}/upgrade", body: "*" } }, I: UpgradeApplicationRequest, O: UpgradeApplicationReply },
        { name: "InstallDependencies", options: { "google.api.http": { patch: "/api/v1/apps/{application_id}/dependencies" } }, I: InstallDependenciesRequest, O: InstallDependenciesReply },
        { name: "RestartApplication", options: { "google.api.http": { patch: "/api/v1/apps/{application_id}/restart" } }, I: RestartApplicationRequest, O: RestartApplicationReply },
        { name: "ResetVariables", options: { "google.api.http": { post: "/api/v1/apps/{application_id}/hooks/{hook_id}/reset", body: "*" } }, I: ResetVariablesRequest, O: ResetVariablesReply },
        { name: "GetApplicationTimeSeries", options: { "google.api.http": { get: "/api/v1/apps/{application_id}/timeseries", body: "*" }, "normalgw.annotations.auth": { readonly: true } }, I: GetApplicationTimeSeriesRequest, O: GetApplicationTimeSeriesReply },
        { name: "GetHookPoints", options: { "google.api.http": { get: "/api/v1/apps/{application_id}/hooks/{hook_id}/points", body: "*" }, "normalgw.annotations.auth": { readonly: true } }, I: GetHookPointsRequest, O: GetHookPointsReply },
        { name: "GetHookData", options: { "google.api.http": { get: "/api/v1/apps/{application_id}/hooks/{hook_id}/data", body: "*" }, "normalgw.annotations.auth": { readonly: true } }, I: GetHookDataRequest, O: GetHookDataReply },
        { name: "EvaluateHookPoints", options: { "google.api.http": { post: "/api/v1/apps/{application_id}/hooks/{hook_id}/evaluate", body: "points" } }, I: EvaluateHookPointsRequest, O: EvaluateHookPointsReply }
    ]);

    /**
     * @generated from protobuf service normalgw.automation.v1.ApplicationService
     */
    class ApplicationServiceClient {
        constructor(_transport) {
            this._transport = _transport;
            this.typeName = ApplicationService.typeName;
            this.methods = ApplicationService.methods;
            this.options = ApplicationService.options;
        }
        /**
         *
         * Start running a new copy of a hook with a new PID.  Starting
         * the program will fail if an existing program wite same unique_id
         * is already running.
         *
         * @generated from protobuf rpc: StartHook(normalgw.automation.v1.StartHookRequest) returns (normalgw.automation.v1.StartHookReply);
         */
        startHook(input, options) {
            const method = this.methods[0], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Attempt to stop a running hook.
         *
         * Stopping a running hook restarts the runtime process, and so all
         * running invoations are aborted.
         *
         *
         * @generated from protobuf rpc: StopHook(normalgw.automation.v1.StopHookRequest) returns (normalgw.automation.v1.StopHookReply);
         */
        stopHook(input, options) {
            const method = this.methods[1], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Update a hook with new settings.
         *
         * A hooks settings include the points it is bound to, group
         * settings, and run mode.  Changes will not take effect until
         * RestartApplication is called; or the application restarts for
         * some other reason.
         *
         * @generated from protobuf rpc: UpdateHook(normalgw.automation.v1.UpdateHookRequest) returns (normalgw.automation.v1.UpdateHookReply);
         */
        updateHook(input, options) {
            const method = this.methods[2], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Delete a hook definition.  This does not remove the underlying code,
         * just the hook definition.
         *
         * @generated from protobuf rpc: DeleteHook(normalgw.automation.v1.DeleteHookRequest) returns (normalgw.automation.v1.DeleteHookReply);
         */
        deleteHook(input, options) {
            const method = this.methods[3], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Query the log of hook invocations.
         *
         *
         * @generated from protobuf rpc: GetHookRuns(normalgw.automation.v1.GetHookRunsRequest) returns (normalgw.automation.v1.GetHookRunsReply);
         */
        getHookRuns(input, options) {
            const method = this.methods[4], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Create a new application, which is a container for hooks.
         *
         * If `GitUrl` is set, this will clone the git repository and call
         * `UpdateDependencies` on the result.
         *
         * @generated from protobuf rpc: CreateApplication(normalgw.automation.v1.CreateApplicationRequest) returns (normalgw.automation.v1.CreateApplicationReply);
         */
        createApplication(input, options) {
            const method = this.methods[5], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * UpdateApplication allows updating configuration options defined by the application.
         *
         * The available options are returned in the body of `GetApplications`.
         *
         *
         * @generated from protobuf rpc: UpdateApplication(normalgw.automation.v1.UpdateApplicationRequest) returns (normalgw.automation.v1.UpdateApplicationReply);
         */
        updateApplication(input, options) {
            const method = this.methods[6], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * An application wraps a number of hooks and other resources which
         * run within the same runtime environment.
         *
         * Each application shares a number of pieces:
         *  Runtime: there is a single runtime for an application
         *  Hook: an application can have multiple hooks with different definitions and run modes.
         *  Files: the application directory can have files with code or arbitary data.
         *  Git URL: applications may be backed by a git repository
         *  Options: an application may define options to allow the user to configure settings without needing to edit the application code.
         *
         * @generated from protobuf rpc: GetApplications(normalgw.automation.v1.GetApplicationsRequest) returns (normalgw.automation.v1.GetApplicationsReply);
         */
        getApplications(input, options) {
            const method = this.methods[7], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Delete an application.  This removes all source files and logs
         * from the application.
         *
         * @generated from protobuf rpc: DeleteApplication(normalgw.automation.v1.DeleteApplicationRequest) returns (normalgw.automation.v1.DeleteApplicationReply);
         */
        deleteApplication(input, options) {
            const method = this.methods[8], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Read a file within an application container.
         *
         * @generated from protobuf rpc: ReadFile(normalgw.automation.v1.ReadFileRequest) returns (normalgw.automation.v1.ReadFileReply);
         */
        readFile(input, options) {
            const method = this.methods[9], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Write a complete file within an application.
         *
         * @generated from protobuf rpc: WriteFile(normalgw.automation.v1.WriteFileRequest) returns (normalgw.automation.v1.WriteFileReply);
         */
        writeFile(input, options) {
            const method = this.methods[10], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Delete a file within an application
         *
         * @generated from protobuf rpc: DeleteFile(normalgw.automation.v1.DeleteFileRequest) returns (normalgw.automation.v1.DeleteFileReply);
         */
        deleteFile(input, options) {
            const method = this.methods[11], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: GetHookLogs(normalgw.automation.v1.GetHookLogsRequest) returns (stream normalgw.automation.v1.GetHookLogsReply);
         */
        getHookLogs(input, options) {
            const method = this.methods[12], opt = this._transport.mergeOptions(options);
            return stackIntercept("serverStreaming", this._transport, method, opt, input);
        }
        /**
         *
         * UpgradeApplication performs `git pull` if the application's Git URL is configured.
         *
         * *WARNING*: This is equivalent to performing a hard reset against
         * the remote branchs, so any local changes to the source will be
         * lost.
         *
         * @generated from protobuf rpc: UpgradeApplication(normalgw.automation.v1.UpgradeApplicationRequest) returns (normalgw.automation.v1.UpgradeApplicationReply);
         */
        upgradeApplication(input, options) {
            const method = this.methods[13], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * InstallDependencies invokes a runtime-specific package manager to install any third-party
         * dependencies into the runtime environment.
         *
         * For the JavaScript runtime, it invokes `npm install` and can be
         * used after updating the `package.json` file to download new upstream dependencies.
         *
         * Since the installation is performed within the Normal container,
         * it must have access to the NPM repositories (or other
         * repositories) for this to work.
         *
         * @generated from protobuf rpc: InstallDependencies(normalgw.automation.v1.InstallDependenciesRequest) returns (normalgw.automation.v1.InstallDependenciesReply);
         */
        installDependencies(input, options) {
            const method = this.methods[14], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         *
         * Restart application terminates any running runtime processes.
         *
         * This should be called after writing new source files or calling
         * InstallDependies to force the runtime to load the new source.
         *
         * @generated from protobuf rpc: RestartApplication(normalgw.automation.v1.RestartApplicationRequest) returns (normalgw.automation.v1.RestartApplicationReply);
         */
        restartApplication(input, options) {
            const method = this.methods[15], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: ResetVariables(normalgw.automation.v1.ResetVariablesRequest) returns (normalgw.automation.v1.ResetVariablesReply);
         */
        resetVariables(input, options) {
            const method = this.methods[16], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: GetApplicationTimeSeries(normalgw.automation.v1.GetApplicationTimeSeriesRequest) returns (normalgw.automation.v1.GetApplicationTimeSeriesReply);
         */
        getApplicationTimeSeries(input, options) {
            const method = this.methods[17], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: GetHookPoints(normalgw.automation.v1.GetHookPointsRequest) returns (normalgw.automation.v1.GetHookPointsReply);
         */
        getHookPoints(input, options) {
            const method = this.methods[18], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: GetHookData(normalgw.automation.v1.GetHookDataRequest) returns (normalgw.automation.v1.GetHookDataReply);
         */
        getHookData(input, options) {
            const method = this.methods[19], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
        /**
         * @generated from protobuf rpc: EvaluateHookPoints(normalgw.automation.v1.EvaluateHookPointsRequest) returns (normalgw.automation.v1.EvaluateHookPointsReply);
         */
        evaluateHookPoints(input, options) {
            const method = this.methods[20], opt = this._transport.mergeOptions(options);
            return stackIntercept("unary", this._transport, method, opt, input);
        }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var lodash = {exports: {}};

    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    lodash.exports;

    (function (module, exports) {
    (function() {

    	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    	  var undefined$1;

    	  /** Used as the semantic version number. */
    	  var VERSION = '4.17.21';

    	  /** Used as the size to enable large array optimizations. */
    	  var LARGE_ARRAY_SIZE = 200;

    	  /** Error message constants. */
    	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
    	      FUNC_ERROR_TEXT = 'Expected a function',
    	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    	  /** Used to stand-in for `undefined` hash values. */
    	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	  /** Used as the maximum memoize cache size. */
    	  var MAX_MEMOIZE_SIZE = 500;

    	  /** Used as the internal argument placeholder. */
    	  var PLACEHOLDER = '__lodash_placeholder__';

    	  /** Used to compose bitmasks for cloning. */
    	  var CLONE_DEEP_FLAG = 1,
    	      CLONE_FLAT_FLAG = 2,
    	      CLONE_SYMBOLS_FLAG = 4;

    	  /** Used to compose bitmasks for value comparisons. */
    	  var COMPARE_PARTIAL_FLAG = 1,
    	      COMPARE_UNORDERED_FLAG = 2;

    	  /** Used to compose bitmasks for function metadata. */
    	  var WRAP_BIND_FLAG = 1,
    	      WRAP_BIND_KEY_FLAG = 2,
    	      WRAP_CURRY_BOUND_FLAG = 4,
    	      WRAP_CURRY_FLAG = 8,
    	      WRAP_CURRY_RIGHT_FLAG = 16,
    	      WRAP_PARTIAL_FLAG = 32,
    	      WRAP_PARTIAL_RIGHT_FLAG = 64,
    	      WRAP_ARY_FLAG = 128,
    	      WRAP_REARG_FLAG = 256,
    	      WRAP_FLIP_FLAG = 512;

    	  /** Used as default options for `_.truncate`. */
    	  var DEFAULT_TRUNC_LENGTH = 30,
    	      DEFAULT_TRUNC_OMISSION = '...';

    	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
    	  var HOT_COUNT = 800,
    	      HOT_SPAN = 16;

    	  /** Used to indicate the type of lazy iteratees. */
    	  var LAZY_FILTER_FLAG = 1,
    	      LAZY_MAP_FLAG = 2,
    	      LAZY_WHILE_FLAG = 3;

    	  /** Used as references for various `Number` constants. */
    	  var INFINITY = 1 / 0,
    	      MAX_SAFE_INTEGER = 9007199254740991,
    	      MAX_INTEGER = 1.7976931348623157e+308,
    	      NAN = 0 / 0;

    	  /** Used as references for the maximum length and index of an array. */
    	  var MAX_ARRAY_LENGTH = 4294967295,
    	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
    	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    	  /** Used to associate wrap methods with their bit flags. */
    	  var wrapFlags = [
    	    ['ary', WRAP_ARY_FLAG],
    	    ['bind', WRAP_BIND_FLAG],
    	    ['bindKey', WRAP_BIND_KEY_FLAG],
    	    ['curry', WRAP_CURRY_FLAG],
    	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    	    ['flip', WRAP_FLIP_FLAG],
    	    ['partial', WRAP_PARTIAL_FLAG],
    	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    	    ['rearg', WRAP_REARG_FLAG]
    	  ];

    	  /** `Object#toString` result references. */
    	  var argsTag = '[object Arguments]',
    	      arrayTag = '[object Array]',
    	      asyncTag = '[object AsyncFunction]',
    	      boolTag = '[object Boolean]',
    	      dateTag = '[object Date]',
    	      domExcTag = '[object DOMException]',
    	      errorTag = '[object Error]',
    	      funcTag = '[object Function]',
    	      genTag = '[object GeneratorFunction]',
    	      mapTag = '[object Map]',
    	      numberTag = '[object Number]',
    	      nullTag = '[object Null]',
    	      objectTag = '[object Object]',
    	      promiseTag = '[object Promise]',
    	      proxyTag = '[object Proxy]',
    	      regexpTag = '[object RegExp]',
    	      setTag = '[object Set]',
    	      stringTag = '[object String]',
    	      symbolTag = '[object Symbol]',
    	      undefinedTag = '[object Undefined]',
    	      weakMapTag = '[object WeakMap]',
    	      weakSetTag = '[object WeakSet]';

    	  var arrayBufferTag = '[object ArrayBuffer]',
    	      dataViewTag = '[object DataView]',
    	      float32Tag = '[object Float32Array]',
    	      float64Tag = '[object Float64Array]',
    	      int8Tag = '[object Int8Array]',
    	      int16Tag = '[object Int16Array]',
    	      int32Tag = '[object Int32Array]',
    	      uint8Tag = '[object Uint8Array]',
    	      uint8ClampedTag = '[object Uint8ClampedArray]',
    	      uint16Tag = '[object Uint16Array]',
    	      uint32Tag = '[object Uint32Array]';

    	  /** Used to match empty string literals in compiled template source. */
    	  var reEmptyStringLeading = /\b__p \+= '';/g,
    	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    	  /** Used to match HTML entities and HTML characters. */
    	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
    	      reUnescapedHtml = /[&<>"']/g,
    	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
    	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    	  /** Used to match template delimiters. */
    	  var reEscape = /<%-([\s\S]+?)%>/g,
    	      reEvaluate = /<%([\s\S]+?)%>/g,
    	      reInterpolate = /<%=([\s\S]+?)%>/g;

    	  /** Used to match property names within property paths. */
    	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    	      reIsPlainProp = /^\w*$/,
    	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    	  /**
    	   * Used to match `RegExp`
    	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	   */
    	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    	      reHasRegExpChar = RegExp(reRegExpChar.source);

    	  /** Used to match leading whitespace. */
    	  var reTrimStart = /^\s+/;

    	  /** Used to match a single whitespace character. */
    	  var reWhitespace = /\s/;

    	  /** Used to match wrap detail comments. */
    	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    	      reSplitDetails = /,? & /;

    	  /** Used to match words composed of alphanumeric characters. */
    	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    	  /**
    	   * Used to validate the `validate` option in `_.template` variable.
    	   *
    	   * Forbids characters which could potentially change the meaning of the function argument definition:
    	   * - "()," (modification of function parameters)
    	   * - "=" (default value)
    	   * - "[]{}" (destructuring of function parameters)
    	   * - "/" (beginning of a comment)
    	   * - whitespace
    	   */
    	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    	  /** Used to match backslashes in property paths. */
    	  var reEscapeChar = /\\(\\)?/g;

    	  /**
    	   * Used to match
    	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
    	   */
    	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    	  /** Used to match `RegExp` flags from their coerced string values. */
    	  var reFlags = /\w*$/;

    	  /** Used to detect bad signed hexadecimal string values. */
    	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    	  /** Used to detect binary string values. */
    	  var reIsBinary = /^0b[01]+$/i;

    	  /** Used to detect host constructors (Safari). */
    	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	  /** Used to detect octal string values. */
    	  var reIsOctal = /^0o[0-7]+$/i;

    	  /** Used to detect unsigned integer values. */
    	  var reIsUint = /^(?:0|[1-9]\d*)$/;

    	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
    	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    	  /** Used to ensure capturing order of template delimiters. */
    	  var reNoMatch = /($^)/;

    	  /** Used to match unescaped characters in compiled string literals. */
    	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    	  /** Used to compose unicode character classes. */
    	  var rsAstralRange = '\\ud800-\\udfff',
    	      rsComboMarksRange = '\\u0300-\\u036f',
    	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
    	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    	      rsDingbatRange = '\\u2700-\\u27bf',
    	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    	      rsPunctuationRange = '\\u2000-\\u206f',
    	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    	      rsVarRange = '\\ufe0e\\ufe0f',
    	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    	  /** Used to compose unicode capture groups. */
    	  var rsApos = "['\u2019]",
    	      rsAstral = '[' + rsAstralRange + ']',
    	      rsBreak = '[' + rsBreakRange + ']',
    	      rsCombo = '[' + rsComboRange + ']',
    	      rsDigits = '\\d+',
    	      rsDingbat = '[' + rsDingbatRange + ']',
    	      rsLower = '[' + rsLowerRange + ']',
    	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
    	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    	      rsNonAstral = '[^' + rsAstralRange + ']',
    	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    	      rsUpper = '[' + rsUpperRange + ']',
    	      rsZWJ = '\\u200d';

    	  /** Used to compose unicode regexes. */
    	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    	      reOptMod = rsModifier + '?',
    	      rsOptVar = '[' + rsVarRange + ']?',
    	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
    	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    	  /** Used to match apostrophes. */
    	  var reApos = RegExp(rsApos, 'g');

    	  /**
    	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
    	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
    	   */
    	  var reComboMark = RegExp(rsCombo, 'g');

    	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    	  /** Used to match complex or compound words. */
    	  var reUnicodeWord = RegExp([
    	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    	    rsUpper + '+' + rsOptContrUpper,
    	    rsOrdUpper,
    	    rsOrdLower,
    	    rsDigits,
    	    rsEmoji
    	  ].join('|'), 'g');

    	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    	  /** Used to detect strings that need a more robust regexp to match words. */
    	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    	  /** Used to assign default `context` object properties. */
    	  var contextProps = [
    	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    	  ];

    	  /** Used to make template sourceURLs easier to identify. */
    	  var templateCounter = -1;

    	  /** Used to identify `toStringTag` values of typed arrays. */
    	  var typedArrayTags = {};
    	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	  typedArrayTags[uint32Tag] = true;
    	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	  typedArrayTags[weakMapTag] = false;

    	  /** Used to identify `toStringTag` values supported by `_.clone`. */
    	  var cloneableTags = {};
    	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
    	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    	  cloneableTags[boolTag] = cloneableTags[dateTag] =
    	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
    	  cloneableTags[numberTag] = cloneableTags[objectTag] =
    	  cloneableTags[regexpTag] = cloneableTags[setTag] =
    	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
    	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    	  cloneableTags[errorTag] = cloneableTags[funcTag] =
    	  cloneableTags[weakMapTag] = false;

    	  /** Used to map Latin Unicode letters to basic Latin letters. */
    	  var deburredLetters = {
    	    // Latin-1 Supplement block.
    	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    	    '\xc7': 'C',  '\xe7': 'c',
    	    '\xd0': 'D',  '\xf0': 'd',
    	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    	    '\xd1': 'N',  '\xf1': 'n',
    	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    	    '\xc6': 'Ae', '\xe6': 'ae',
    	    '\xde': 'Th', '\xfe': 'th',
    	    '\xdf': 'ss',
    	    // Latin Extended-A block.
    	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    	    '\u0134': 'J',  '\u0135': 'j',
    	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    	    '\u0174': 'W',  '\u0175': 'w',
    	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    	    '\u0132': 'IJ', '\u0133': 'ij',
    	    '\u0152': 'Oe', '\u0153': 'oe',
    	    '\u0149': "'n", '\u017f': 's'
    	  };

    	  /** Used to map characters to HTML entities. */
    	  var htmlEscapes = {
    	    '&': '&amp;',
    	    '<': '&lt;',
    	    '>': '&gt;',
    	    '"': '&quot;',
    	    "'": '&#39;'
    	  };

    	  /** Used to map HTML entities to characters. */
    	  var htmlUnescapes = {
    	    '&amp;': '&',
    	    '&lt;': '<',
    	    '&gt;': '>',
    	    '&quot;': '"',
    	    '&#39;': "'"
    	  };

    	  /** Used to escape characters for inclusion in compiled string literals. */
    	  var stringEscapes = {
    	    '\\': '\\',
    	    "'": "'",
    	    '\n': 'n',
    	    '\r': 'r',
    	    '\u2028': 'u2028',
    	    '\u2029': 'u2029'
    	  };

    	  /** Built-in method references without a dependency on `root`. */
    	  var freeParseFloat = parseFloat,
    	      freeParseInt = parseInt;

    	  /** Detect free variable `global` from Node.js. */
    	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	  /** Detect free variable `self`. */
    	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	  /** Used as a reference to the global object. */
    	  var root = freeGlobal || freeSelf || Function('return this')();

    	  /** Detect free variable `exports`. */
    	  var freeExports = exports && !exports.nodeType && exports;

    	  /** Detect free variable `module`. */
    	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	  /** Detect the popular CommonJS extension `module.exports`. */
    	  var moduleExports = freeModule && freeModule.exports === freeExports;

    	  /** Detect free variable `process` from Node.js. */
    	  var freeProcess = moduleExports && freeGlobal.process;

    	  /** Used to access faster Node.js helpers. */
    	  var nodeUtil = (function() {
    	    try {
    	      // Use `util.types` for Node.js 10+.
    	      var types = freeModule && freeModule.require && freeModule.require('util').types;

    	      if (types) {
    	        return types;
    	      }

    	      // Legacy `process.binding('util')` for Node.js < 10.
    	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	    } catch (e) {}
    	  }());

    	  /* Node.js helper references. */
    	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
    	      nodeIsDate = nodeUtil && nodeUtil.isDate,
    	      nodeIsMap = nodeUtil && nodeUtil.isMap,
    	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
    	      nodeIsSet = nodeUtil && nodeUtil.isSet,
    	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * A faster alternative to `Function#apply`, this function invokes `func`
    	   * with the `this` binding of `thisArg` and the arguments of `args`.
    	   *
    	   * @private
    	   * @param {Function} func The function to invoke.
    	   * @param {*} thisArg The `this` binding of `func`.
    	   * @param {Array} args The arguments to invoke `func` with.
    	   * @returns {*} Returns the result of `func`.
    	   */
    	  function apply(func, thisArg, args) {
    	    switch (args.length) {
    	      case 0: return func.call(thisArg);
    	      case 1: return func.call(thisArg, args[0]);
    	      case 2: return func.call(thisArg, args[0], args[1]);
    	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    	    }
    	    return func.apply(thisArg, args);
    	  }

    	  /**
    	   * A specialized version of `baseAggregator` for arrays.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} setter The function to set `accumulator` values.
    	   * @param {Function} iteratee The iteratee to transform keys.
    	   * @param {Object} accumulator The initial aggregated object.
    	   * @returns {Function} Returns `accumulator`.
    	   */
    	  function arrayAggregator(array, setter, iteratee, accumulator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      var value = array[index];
    	      setter(accumulator, value, iteratee(value), array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.forEach` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEach(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (iteratee(array[index], index, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.forEachRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEachRight(array, iteratee) {
    	    var length = array == null ? 0 : array.length;

    	    while (length--) {
    	      if (iteratee(array[length], length, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.every` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	   *  else `false`.
    	   */
    	  function arrayEvery(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (!predicate(array[index], index, array)) {
    	        return false;
    	      }
    	    }
    	    return true;
    	  }

    	  /**
    	   * A specialized version of `_.filter` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {Array} Returns the new filtered array.
    	   */
    	  function arrayFilter(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (predicate(value, index, array)) {
    	        result[resIndex++] = value;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.includes` for arrays without support for
    	   * specifying an index to search from.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludes(array, value) {
    	    var length = array == null ? 0 : array.length;
    	    return !!length && baseIndexOf(array, value, 0) > -1;
    	  }

    	  /**
    	   * This function is like `arrayIncludes` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludesWith(array, value, comparator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (comparator(value, array[index])) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * A specialized version of `_.map` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the new mapped array.
    	   */
    	  function arrayMap(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        result = Array(length);

    	    while (++index < length) {
    	      result[index] = iteratee(array[index], index, array);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Appends the elements of `values` to `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {Array} values The values to append.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayPush(array, values) {
    	    var index = -1,
    	        length = values.length,
    	        offset = array.length;

    	    while (++index < length) {
    	      array[offset + index] = values[index];
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.reduce` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the first element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduce(array, iteratee, accumulator, initAccum) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    if (initAccum && length) {
    	      accumulator = array[++index];
    	    }
    	    while (++index < length) {
    	      accumulator = iteratee(accumulator, array[index], index, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.reduceRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the last element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    	    var length = array == null ? 0 : array.length;
    	    if (initAccum && length) {
    	      accumulator = array[--length];
    	    }
    	    while (length--) {
    	      accumulator = iteratee(accumulator, array[length], length, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.some` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if any element passes the predicate check,
    	   *  else `false`.
    	   */
    	  function arraySome(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (predicate(array[index], index, array)) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * Gets the size of an ASCII `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  var asciiSize = baseProperty('length');

    	  /**
    	   * Converts an ASCII `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function asciiToArray(string) {
    	    return string.split('');
    	  }

    	  /**
    	   * Splits an ASCII `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function asciiWords(string) {
    	    return string.match(reAsciiWord) || [];
    	  }

    	  /**
    	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
    	   * without support for iteratee shorthands, which iterates over `collection`
    	   * using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the found element or its key, else `undefined`.
    	   */
    	  function baseFindKey(collection, predicate, eachFunc) {
    	    var result;
    	    eachFunc(collection, function(value, key, collection) {
    	      if (predicate(value, key, collection)) {
    	        result = key;
    	        return false;
    	      }
    	    });
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
    	   * support for iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {boolean} [fromRight] Specify iterating from right to left.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    	    var length = array.length,
    	        index = fromIndex + (fromRight ? 1 : -1);

    	    while ((fromRight ? index-- : ++index < length)) {
    	      if (predicate(array[index], index, array)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOf(array, value, fromIndex) {
    	    return value === value
    	      ? strictIndexOf(array, value, fromIndex)
    	      : baseFindIndex(array, baseIsNaN, fromIndex);
    	  }

    	  /**
    	   * This function is like `baseIndexOf` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOfWith(array, value, fromIndex, comparator) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (comparator(array[index], value)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.isNaN` without support for number objects.
    	   *
    	   * @private
    	   * @param {*} value The value to check.
    	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	   */
    	  function baseIsNaN(value) {
    	    return value !== value;
    	  }

    	  /**
    	   * The base implementation of `_.mean` and `_.meanBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the mean.
    	   */
    	  function baseMean(array, iteratee) {
    	    var length = array == null ? 0 : array.length;
    	    return length ? (baseSum(array, iteratee) / length) : NAN;
    	  }

    	  /**
    	   * The base implementation of `_.property` without support for deep paths.
    	   *
    	   * @private
    	   * @param {string} key The key of the property to get.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function baseProperty(key) {
    	    return function(object) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.propertyOf` without support for deep paths.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function basePropertyOf(object) {
    	    return function(key) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
    	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} accumulator The initial value.
    	   * @param {boolean} initAccum Specify using the first or last element of
    	   *  `collection` as the initial value.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    	    eachFunc(collection, function(value, index, collection) {
    	      accumulator = initAccum
    	        ? (initAccum = false, value)
    	        : iteratee(accumulator, value, index, collection);
    	    });
    	    return accumulator;
    	  }

    	  /**
    	   * The base implementation of `_.sortBy` which uses `comparer` to define the
    	   * sort order of `array` and replaces criteria objects with their corresponding
    	   * values.
    	   *
    	   * @private
    	   * @param {Array} array The array to sort.
    	   * @param {Function} comparer The function to define sort order.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function baseSortBy(array, comparer) {
    	    var length = array.length;

    	    array.sort(comparer);
    	    while (length--) {
    	      array[length] = array[length].value;
    	    }
    	    return array;
    	  }

    	  /**
    	   * The base implementation of `_.sum` and `_.sumBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the sum.
    	   */
    	  function baseSum(array, iteratee) {
    	    var result,
    	        index = -1,
    	        length = array.length;

    	    while (++index < length) {
    	      var current = iteratee(array[index]);
    	      if (current !== undefined$1) {
    	        result = result === undefined$1 ? current : (result + current);
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.times` without support for iteratee shorthands
    	   * or max array length checks.
    	   *
    	   * @private
    	   * @param {number} n The number of times to invoke `iteratee`.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the array of results.
    	   */
    	  function baseTimes(n, iteratee) {
    	    var index = -1,
    	        result = Array(n);

    	    while (++index < n) {
    	      result[index] = iteratee(index);
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
    	   * of key-value pairs for `object` corresponding to the property names of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the key-value pairs.
    	   */
    	  function baseToPairs(object, props) {
    	    return arrayMap(props, function(key) {
    	      return [key, object[key]];
    	    });
    	  }

    	  /**
    	   * The base implementation of `_.trim`.
    	   *
    	   * @private
    	   * @param {string} string The string to trim.
    	   * @returns {string} Returns the trimmed string.
    	   */
    	  function baseTrim(string) {
    	    return string
    	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    	      : string;
    	  }

    	  /**
    	   * The base implementation of `_.unary` without support for storing metadata.
    	   *
    	   * @private
    	   * @param {Function} func The function to cap arguments for.
    	   * @returns {Function} Returns the new capped function.
    	   */
    	  function baseUnary(func) {
    	    return function(value) {
    	      return func(value);
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.values` and `_.valuesIn` which creates an
    	   * array of `object` property values corresponding to the property names
    	   * of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the array of property values.
    	   */
    	  function baseValues(object, props) {
    	    return arrayMap(props, function(key) {
    	      return object[key];
    	    });
    	  }

    	  /**
    	   * Checks if a `cache` value for `key` exists.
    	   *
    	   * @private
    	   * @param {Object} cache The cache to query.
    	   * @param {string} key The key of the entry to check.
    	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	   */
    	  function cacheHas(cache, key) {
    	    return cache.has(key);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the first unmatched string symbol.
    	   */
    	  function charsStartIndex(strSymbols, chrSymbols) {
    	    var index = -1,
    	        length = strSymbols.length;

    	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the last unmatched string symbol.
    	   */
    	  function charsEndIndex(strSymbols, chrSymbols) {
    	    var index = strSymbols.length;

    	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Gets the number of `placeholder` occurrences in `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} placeholder The placeholder to search for.
    	   * @returns {number} Returns the placeholder count.
    	   */
    	  function countHolders(array, placeholder) {
    	    var length = array.length,
    	        result = 0;

    	    while (length--) {
    	      if (array[length] === placeholder) {
    	        ++result;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
    	   * letters to basic Latin letters.
    	   *
    	   * @private
    	   * @param {string} letter The matched letter to deburr.
    	   * @returns {string} Returns the deburred letter.
    	   */
    	  var deburrLetter = basePropertyOf(deburredLetters);

    	  /**
    	   * Used by `_.escape` to convert characters to HTML entities.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

    	  /**
    	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  function escapeStringChar(chr) {
    	    return '\\' + stringEscapes[chr];
    	  }

    	  /**
    	   * Gets the value at `key` of `object`.
    	   *
    	   * @private
    	   * @param {Object} [object] The object to query.
    	   * @param {string} key The key of the property to get.
    	   * @returns {*} Returns the property value.
    	   */
    	  function getValue(object, key) {
    	    return object == null ? undefined$1 : object[key];
    	  }

    	  /**
    	   * Checks if `string` contains Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
    	   */
    	  function hasUnicode(string) {
    	    return reHasUnicode.test(string);
    	  }

    	  /**
    	   * Checks if `string` contains a word composed of Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a word is found, else `false`.
    	   */
    	  function hasUnicodeWord(string) {
    	    return reHasUnicodeWord.test(string);
    	  }

    	  /**
    	   * Converts `iterator` to an array.
    	   *
    	   * @private
    	   * @param {Object} iterator The iterator to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function iteratorToArray(iterator) {
    	    var data,
    	        result = [];

    	    while (!(data = iterator.next()).done) {
    	      result.push(data.value);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `map` to its key-value pairs.
    	   *
    	   * @private
    	   * @param {Object} map The map to convert.
    	   * @returns {Array} Returns the key-value pairs.
    	   */
    	  function mapToArray(map) {
    	    var index = -1,
    	        result = Array(map.size);

    	    map.forEach(function(value, key) {
    	      result[++index] = [key, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * Creates a unary function that invokes `func` with its argument transformed.
    	   *
    	   * @private
    	   * @param {Function} func The function to wrap.
    	   * @param {Function} transform The argument transform.
    	   * @returns {Function} Returns the new function.
    	   */
    	  function overArg(func, transform) {
    	    return function(arg) {
    	      return func(transform(arg));
    	    };
    	  }

    	  /**
    	   * Replaces all `placeholder` elements in `array` with an internal placeholder
    	   * and returns an array of their indexes.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {*} placeholder The placeholder to replace.
    	   * @returns {Array} Returns the new array of placeholder indexes.
    	   */
    	  function replaceHolders(array, placeholder) {
    	    var index = -1,
    	        length = array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (value === placeholder || value === PLACEHOLDER) {
    	        array[index] = PLACEHOLDER;
    	        result[resIndex++] = index;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to an array of its values.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the values.
    	   */
    	  function setToArray(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = value;
    	    });
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to its value-value pairs.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the value-value pairs.
    	   */
    	  function setToPairs(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = [value, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.indexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictIndexOf(array, value, fromIndex) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * A specialized version of `_.lastIndexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictLastIndexOf(array, value, fromIndex) {
    	    var index = fromIndex + 1;
    	    while (index--) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return index;
    	  }

    	  /**
    	   * Gets the number of symbols in `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function stringSize(string) {
    	    return hasUnicode(string)
    	      ? unicodeSize(string)
    	      : asciiSize(string);
    	  }

    	  /**
    	   * Converts `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function stringToArray(string) {
    	    return hasUnicode(string)
    	      ? unicodeToArray(string)
    	      : asciiToArray(string);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
    	   * character of `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the index of the last non-whitespace character.
    	   */
    	  function trimmedEndIndex(string) {
    	    var index = string.length;

    	    while (index-- && reWhitespace.test(string.charAt(index))) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.unescape` to convert HTML entities to characters.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to unescape.
    	   * @returns {string} Returns the unescaped character.
    	   */
    	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    	  /**
    	   * Gets the size of a Unicode `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function unicodeSize(string) {
    	    var result = reUnicode.lastIndex = 0;
    	    while (reUnicode.test(string)) {
    	      ++result;
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts a Unicode `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function unicodeToArray(string) {
    	    return string.match(reUnicode) || [];
    	  }

    	  /**
    	   * Splits a Unicode `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function unicodeWords(string) {
    	    return string.match(reUnicodeWord) || [];
    	  }

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * Create a new pristine `lodash` function using the `context` object.
    	   *
    	   * @static
    	   * @memberOf _
    	   * @since 1.1.0
    	   * @category Util
    	   * @param {Object} [context=root] The context object.
    	   * @returns {Function} Returns a new `lodash` function.
    	   * @example
    	   *
    	   * _.mixin({ 'foo': _.constant('foo') });
    	   *
    	   * var lodash = _.runInContext();
    	   * lodash.mixin({ 'bar': lodash.constant('bar') });
    	   *
    	   * _.isFunction(_.foo);
    	   * // => true
    	   * _.isFunction(_.bar);
    	   * // => false
    	   *
    	   * lodash.isFunction(lodash.foo);
    	   * // => false
    	   * lodash.isFunction(lodash.bar);
    	   * // => true
    	   *
    	   * // Create a suped-up `defer` in Node.js.
    	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
    	   */
    	  var runInContext = (function runInContext(context) {
    	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    	    /** Built-in constructor references. */
    	    var Array = context.Array,
    	        Date = context.Date,
    	        Error = context.Error,
    	        Function = context.Function,
    	        Math = context.Math,
    	        Object = context.Object,
    	        RegExp = context.RegExp,
    	        String = context.String,
    	        TypeError = context.TypeError;

    	    /** Used for built-in method references. */
    	    var arrayProto = Array.prototype,
    	        funcProto = Function.prototype,
    	        objectProto = Object.prototype;

    	    /** Used to detect overreaching core-js shims. */
    	    var coreJsData = context['__core-js_shared__'];

    	    /** Used to resolve the decompiled source of functions. */
    	    var funcToString = funcProto.toString;

    	    /** Used to check objects for own properties. */
    	    var hasOwnProperty = objectProto.hasOwnProperty;

    	    /** Used to generate unique IDs. */
    	    var idCounter = 0;

    	    /** Used to detect methods masquerading as native. */
    	    var maskSrcKey = (function() {
    	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	      return uid ? ('Symbol(src)_1.' + uid) : '';
    	    }());

    	    /**
    	     * Used to resolve the
    	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	     * of values.
    	     */
    	    var nativeObjectToString = objectProto.toString;

    	    /** Used to infer the `Object` constructor. */
    	    var objectCtorString = funcToString.call(Object);

    	    /** Used to restore the original `_` reference in `_.noConflict`. */
    	    var oldDash = root._;

    	    /** Used to detect if a method is native. */
    	    var reIsNative = RegExp('^' +
    	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	    );

    	    /** Built-in value references. */
    	    var Buffer = moduleExports ? context.Buffer : undefined$1,
    	        Symbol = context.Symbol,
    	        Uint8Array = context.Uint8Array,
    	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
    	        getPrototype = overArg(Object.getPrototypeOf, Object),
    	        objectCreate = Object.create,
    	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	        splice = arrayProto.splice,
    	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
    	        symIterator = Symbol ? Symbol.iterator : undefined$1,
    	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    	    var defineProperty = (function() {
    	      try {
    	        var func = getNative(Object, 'defineProperty');
    	        func({}, '', {});
    	        return func;
    	      } catch (e) {}
    	    }());

    	    /** Mocked built-ins. */
    	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
    	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
    	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    	    /* Built-in method references for those with the same name as other `lodash` methods. */
    	    var nativeCeil = Math.ceil,
    	        nativeFloor = Math.floor,
    	        nativeGetSymbols = Object.getOwnPropertySymbols,
    	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
    	        nativeIsFinite = context.isFinite,
    	        nativeJoin = arrayProto.join,
    	        nativeKeys = overArg(Object.keys, Object),
    	        nativeMax = Math.max,
    	        nativeMin = Math.min,
    	        nativeNow = Date.now,
    	        nativeParseInt = context.parseInt,
    	        nativeRandom = Math.random,
    	        nativeReverse = arrayProto.reverse;

    	    /* Built-in method references that are verified to be native. */
    	    var DataView = getNative(context, 'DataView'),
    	        Map = getNative(context, 'Map'),
    	        Promise = getNative(context, 'Promise'),
    	        Set = getNative(context, 'Set'),
    	        WeakMap = getNative(context, 'WeakMap'),
    	        nativeCreate = getNative(Object, 'create');

    	    /** Used to store function metadata. */
    	    var metaMap = WeakMap && new WeakMap;

    	    /** Used to lookup unminified function names. */
    	    var realNames = {};

    	    /** Used to detect maps, sets, and weakmaps. */
    	    var dataViewCtorString = toSource(DataView),
    	        mapCtorString = toSource(Map),
    	        promiseCtorString = toSource(Promise),
    	        setCtorString = toSource(Set),
    	        weakMapCtorString = toSource(WeakMap);

    	    /** Used to convert symbols to primitives and strings. */
    	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
    	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
    	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` object which wraps `value` to enable implicit method
    	     * chain sequences. Methods that operate on and return arrays, collections,
    	     * and functions can be chained together. Methods that retrieve a single value
    	     * or may return a primitive value will automatically end the chain sequence
    	     * and return the unwrapped value. Otherwise, the value must be unwrapped
    	     * with `_#value`.
    	     *
    	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
    	     * enabled using `_.chain`.
    	     *
    	     * The execution of chained methods is lazy, that is, it's deferred until
    	     * `_#value` is implicitly or explicitly called.
    	     *
    	     * Lazy evaluation allows several methods to support shortcut fusion.
    	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
    	     * the creation of intermediate arrays and can greatly reduce the number of
    	     * iteratee executions. Sections of a chain sequence qualify for shortcut
    	     * fusion if the section is applied to an array and iteratees accept only
    	     * one argument. The heuristic for whether a section qualifies for shortcut
    	     * fusion is subject to change.
    	     *
    	     * Chaining is supported in custom builds as long as the `_#value` method is
    	     * directly or indirectly included in the build.
    	     *
    	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
    	     *
    	     * The wrapper `Array` methods are:
    	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
    	     *
    	     * The wrapper `String` methods are:
    	     * `replace` and `split`
    	     *
    	     * The wrapper methods that support shortcut fusion are:
    	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
    	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
    	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
    	     *
    	     * The chainable wrapper methods are:
    	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
    	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
    	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
    	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
    	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
    	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
    	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
    	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
    	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
    	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
    	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
    	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
    	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
    	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
    	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
    	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
    	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
    	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
    	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
    	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
    	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
    	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
    	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
    	     * `zipObject`, `zipObjectDeep`, and `zipWith`
    	     *
    	     * The wrapper methods that are **not** chainable by default are:
    	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
    	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
    	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
    	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
    	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
    	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
    	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
    	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
    	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
    	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
    	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
    	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
    	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
    	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
    	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
    	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
    	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
    	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
    	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
    	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
    	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
    	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
    	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
    	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
    	     * `upperFirst`, `value`, and `words`
    	     *
    	     * @name _
    	     * @constructor
    	     * @category Seq
    	     * @param {*} value The value to wrap in a `lodash` instance.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2, 3]);
    	     *
    	     * // Returns an unwrapped value.
    	     * wrapped.reduce(_.add);
    	     * // => 6
    	     *
    	     * // Returns a wrapped value.
    	     * var squares = wrapped.map(square);
    	     *
    	     * _.isArray(squares);
    	     * // => false
    	     *
    	     * _.isArray(squares.value());
    	     * // => true
    	     */
    	    function lodash(value) {
    	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    	        if (value instanceof LodashWrapper) {
    	          return value;
    	        }
    	        if (hasOwnProperty.call(value, '__wrapped__')) {
    	          return wrapperClone(value);
    	        }
    	      }
    	      return new LodashWrapper(value);
    	    }

    	    /**
    	     * The base implementation of `_.create` without support for assigning
    	     * properties to the created object.
    	     *
    	     * @private
    	     * @param {Object} proto The object to inherit from.
    	     * @returns {Object} Returns the new object.
    	     */
    	    var baseCreate = (function() {
    	      function object() {}
    	      return function(proto) {
    	        if (!isObject(proto)) {
    	          return {};
    	        }
    	        if (objectCreate) {
    	          return objectCreate(proto);
    	        }
    	        object.prototype = proto;
    	        var result = new object;
    	        object.prototype = undefined$1;
    	        return result;
    	      };
    	    }());

    	    /**
    	     * The function whose prototype chain sequence wrappers inherit from.
    	     *
    	     * @private
    	     */
    	    function baseLodash() {
    	      // No operation performed.
    	    }

    	    /**
    	     * The base constructor for creating `lodash` wrapper objects.
    	     *
    	     * @private
    	     * @param {*} value The value to wrap.
    	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
    	     */
    	    function LodashWrapper(value, chainAll) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__chain__ = !!chainAll;
    	      this.__index__ = 0;
    	      this.__values__ = undefined$1;
    	    }

    	    /**
    	     * By default, the template delimiters used by lodash are like those in
    	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
    	     * following template settings to use alternative delimiters.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {Object}
    	     */
    	    lodash.templateSettings = {

    	      /**
    	       * Used to detect `data` property values to be HTML-escaped.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'escape': reEscape,

    	      /**
    	       * Used to detect code to be evaluated.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'evaluate': reEvaluate,

    	      /**
    	       * Used to detect `data` property values to inject.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'interpolate': reInterpolate,

    	      /**
    	       * Used to reference the data object in the template text.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {string}
    	       */
    	      'variable': '',

    	      /**
    	       * Used to import variables into the compiled template.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {Object}
    	       */
    	      'imports': {

    	        /**
    	         * A reference to the `lodash` function.
    	         *
    	         * @memberOf _.templateSettings.imports
    	         * @type {Function}
    	         */
    	        '_': lodash
    	      }
    	    };

    	    // Ensure wrappers are instances of `baseLodash`.
    	    lodash.prototype = baseLodash.prototype;
    	    lodash.prototype.constructor = lodash;

    	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LodashWrapper.prototype.constructor = LodashWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {*} value The value to wrap.
    	     */
    	    function LazyWrapper(value) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__dir__ = 1;
    	      this.__filtered__ = false;
    	      this.__iteratees__ = [];
    	      this.__takeCount__ = MAX_ARRAY_LENGTH;
    	      this.__views__ = [];
    	    }

    	    /**
    	     * Creates a clone of the lazy wrapper object.
    	     *
    	     * @private
    	     * @name clone
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the cloned `LazyWrapper` object.
    	     */
    	    function lazyClone() {
    	      var result = new LazyWrapper(this.__wrapped__);
    	      result.__actions__ = copyArray(this.__actions__);
    	      result.__dir__ = this.__dir__;
    	      result.__filtered__ = this.__filtered__;
    	      result.__iteratees__ = copyArray(this.__iteratees__);
    	      result.__takeCount__ = this.__takeCount__;
    	      result.__views__ = copyArray(this.__views__);
    	      return result;
    	    }

    	    /**
    	     * Reverses the direction of lazy iteration.
    	     *
    	     * @private
    	     * @name reverse
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
    	     */
    	    function lazyReverse() {
    	      if (this.__filtered__) {
    	        var result = new LazyWrapper(this);
    	        result.__dir__ = -1;
    	        result.__filtered__ = true;
    	      } else {
    	        result = this.clone();
    	        result.__dir__ *= -1;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Extracts the unwrapped value from its lazy wrapper.
    	     *
    	     * @private
    	     * @name value
    	     * @memberOf LazyWrapper
    	     * @returns {*} Returns the unwrapped value.
    	     */
    	    function lazyValue() {
    	      var array = this.__wrapped__.value(),
    	          dir = this.__dir__,
    	          isArr = isArray(array),
    	          isRight = dir < 0,
    	          arrLength = isArr ? array.length : 0,
    	          view = getView(0, arrLength, this.__views__),
    	          start = view.start,
    	          end = view.end,
    	          length = end - start,
    	          index = isRight ? end : (start - 1),
    	          iteratees = this.__iteratees__,
    	          iterLength = iteratees.length,
    	          resIndex = 0,
    	          takeCount = nativeMin(length, this.__takeCount__);

    	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    	        return baseWrapperValue(array, this.__actions__);
    	      }
    	      var result = [];

    	      outer:
    	      while (length-- && resIndex < takeCount) {
    	        index += dir;

    	        var iterIndex = -1,
    	            value = array[index];

    	        while (++iterIndex < iterLength) {
    	          var data = iteratees[iterIndex],
    	              iteratee = data.iteratee,
    	              type = data.type,
    	              computed = iteratee(value);

    	          if (type == LAZY_MAP_FLAG) {
    	            value = computed;
    	          } else if (!computed) {
    	            if (type == LAZY_FILTER_FLAG) {
    	              continue outer;
    	            } else {
    	              break outer;
    	            }
    	          }
    	        }
    	        result[resIndex++] = value;
    	      }
    	      return result;
    	    }

    	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LazyWrapper.prototype.constructor = LazyWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a hash object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Hash(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the hash.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Hash
    	     */
    	    function hashClear() {
    	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the hash.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Hash
    	     * @param {Object} hash The hash to modify.
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function hashDelete(key) {
    	      var result = this.has(key) && delete this.__data__[key];
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the hash value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function hashGet(key) {
    	      var data = this.__data__;
    	      if (nativeCreate) {
    	        var result = data[key];
    	        return result === HASH_UNDEFINED ? undefined$1 : result;
    	      }
    	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    	    }

    	    /**
    	     * Checks if a hash value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Hash
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function hashHas(key) {
    	      var data = this.__data__;
    	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    	    }

    	    /**
    	     * Sets the hash `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the hash instance.
    	     */
    	    function hashSet(key, value) {
    	      var data = this.__data__;
    	      this.size += this.has(key) ? 0 : 1;
    	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
    	      return this;
    	    }

    	    // Add methods to `Hash`.
    	    Hash.prototype.clear = hashClear;
    	    Hash.prototype['delete'] = hashDelete;
    	    Hash.prototype.get = hashGet;
    	    Hash.prototype.has = hashHas;
    	    Hash.prototype.set = hashSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an list cache object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function ListCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the list cache.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf ListCache
    	     */
    	    function listCacheClear() {
    	      this.__data__ = [];
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the list cache.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function listCacheDelete(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        return false;
    	      }
    	      var lastIndex = data.length - 1;
    	      if (index == lastIndex) {
    	        data.pop();
    	      } else {
    	        splice.call(data, index, 1);
    	      }
    	      --this.size;
    	      return true;
    	    }

    	    /**
    	     * Gets the list cache value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function listCacheGet(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      return index < 0 ? undefined$1 : data[index][1];
    	    }

    	    /**
    	     * Checks if a list cache value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf ListCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function listCacheHas(key) {
    	      return assocIndexOf(this.__data__, key) > -1;
    	    }

    	    /**
    	     * Sets the list cache `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the list cache instance.
    	     */
    	    function listCacheSet(key, value) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        ++this.size;
    	        data.push([key, value]);
    	      } else {
    	        data[index][1] = value;
    	      }
    	      return this;
    	    }

    	    // Add methods to `ListCache`.
    	    ListCache.prototype.clear = listCacheClear;
    	    ListCache.prototype['delete'] = listCacheDelete;
    	    ListCache.prototype.get = listCacheGet;
    	    ListCache.prototype.has = listCacheHas;
    	    ListCache.prototype.set = listCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a map cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function MapCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the map.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf MapCache
    	     */
    	    function mapCacheClear() {
    	      this.size = 0;
    	      this.__data__ = {
    	        'hash': new Hash,
    	        'map': new (Map || ListCache),
    	        'string': new Hash
    	      };
    	    }

    	    /**
    	     * Removes `key` and its value from the map.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function mapCacheDelete(key) {
    	      var result = getMapData(this, key)['delete'](key);
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the map value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function mapCacheGet(key) {
    	      return getMapData(this, key).get(key);
    	    }

    	    /**
    	     * Checks if a map value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf MapCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function mapCacheHas(key) {
    	      return getMapData(this, key).has(key);
    	    }

    	    /**
    	     * Sets the map `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the map cache instance.
    	     */
    	    function mapCacheSet(key, value) {
    	      var data = getMapData(this, key),
    	          size = data.size;

    	      data.set(key, value);
    	      this.size += data.size == size ? 0 : 1;
    	      return this;
    	    }

    	    // Add methods to `MapCache`.
    	    MapCache.prototype.clear = mapCacheClear;
    	    MapCache.prototype['delete'] = mapCacheDelete;
    	    MapCache.prototype.get = mapCacheGet;
    	    MapCache.prototype.has = mapCacheHas;
    	    MapCache.prototype.set = mapCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     *
    	     * Creates an array cache object to store unique values.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [values] The values to cache.
    	     */
    	    function SetCache(values) {
    	      var index = -1,
    	          length = values == null ? 0 : values.length;

    	      this.__data__ = new MapCache;
    	      while (++index < length) {
    	        this.add(values[index]);
    	      }
    	    }

    	    /**
    	     * Adds `value` to the array cache.
    	     *
    	     * @private
    	     * @name add
    	     * @memberOf SetCache
    	     * @alias push
    	     * @param {*} value The value to cache.
    	     * @returns {Object} Returns the cache instance.
    	     */
    	    function setCacheAdd(value) {
    	      this.__data__.set(value, HASH_UNDEFINED);
    	      return this;
    	    }

    	    /**
    	     * Checks if `value` is in the array cache.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf SetCache
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns `true` if `value` is found, else `false`.
    	     */
    	    function setCacheHas(value) {
    	      return this.__data__.has(value);
    	    }

    	    // Add methods to `SetCache`.
    	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	    SetCache.prototype.has = setCacheHas;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a stack cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Stack(entries) {
    	      var data = this.__data__ = new ListCache(entries);
    	      this.size = data.size;
    	    }

    	    /**
    	     * Removes all key-value entries from the stack.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Stack
    	     */
    	    function stackClear() {
    	      this.__data__ = new ListCache;
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the stack.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function stackDelete(key) {
    	      var data = this.__data__,
    	          result = data['delete'](key);

    	      this.size = data.size;
    	      return result;
    	    }

    	    /**
    	     * Gets the stack value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function stackGet(key) {
    	      return this.__data__.get(key);
    	    }

    	    /**
    	     * Checks if a stack value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Stack
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function stackHas(key) {
    	      return this.__data__.has(key);
    	    }

    	    /**
    	     * Sets the stack `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the stack cache instance.
    	     */
    	    function stackSet(key, value) {
    	      var data = this.__data__;
    	      if (data instanceof ListCache) {
    	        var pairs = data.__data__;
    	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	          pairs.push([key, value]);
    	          this.size = ++data.size;
    	          return this;
    	        }
    	        data = this.__data__ = new MapCache(pairs);
    	      }
    	      data.set(key, value);
    	      this.size = data.size;
    	      return this;
    	    }

    	    // Add methods to `Stack`.
    	    Stack.prototype.clear = stackClear;
    	    Stack.prototype['delete'] = stackDelete;
    	    Stack.prototype.get = stackGet;
    	    Stack.prototype.has = stackHas;
    	    Stack.prototype.set = stackSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of the enumerable property names of the array-like `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @param {boolean} inherited Specify returning inherited property names.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function arrayLikeKeys(value, inherited) {
    	      var isArr = isArray(value),
    	          isArg = !isArr && isArguments(value),
    	          isBuff = !isArr && !isArg && isBuffer(value),
    	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    	          skipIndexes = isArr || isArg || isBuff || isType,
    	          result = skipIndexes ? baseTimes(value.length, String) : [],
    	          length = result.length;

    	      for (var key in value) {
    	        if ((inherited || hasOwnProperty.call(value, key)) &&
    	            !(skipIndexes && (
    	               // Safari 9 has enumerable `arguments.length` in strict mode.
    	               key == 'length' ||
    	               // Node.js 0.10 has enumerable non-index properties on buffers.
    	               (isBuff && (key == 'offset' || key == 'parent')) ||
    	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
    	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
    	               // Skip index properties.
    	               isIndex(key, length)
    	            ))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `_.sample` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function arraySample(array) {
    	      var length = array.length;
    	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `_.sampleSize` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function arraySampleSize(array, n) {
    	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function arrayShuffle(array) {
    	      return shuffleSelf(copyArray(array));
    	    }

    	    /**
    	     * This function is like `assignValue` except that it doesn't assign
    	     * `undefined` values.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignMergeValue(object, key, value) {
    	      if ((value !== undefined$1 && !eq(object[key], value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignValue(object, key, value) {
    	      var objValue = object[key];
    	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Gets the index at which the `key` is found in `array` of key-value pairs.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {*} key The key to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     */
    	    function assocIndexOf(array, key) {
    	      var length = array.length;
    	      while (length--) {
    	        if (eq(array[length][0], key)) {
    	          return length;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * Aggregates elements of `collection` on `accumulator` with keys transformed
    	     * by `iteratee` and values set by `setter`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform keys.
    	     * @param {Object} accumulator The initial aggregated object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseAggregator(collection, setter, iteratee, accumulator) {
    	      baseEach(collection, function(value, key, collection) {
    	        setter(accumulator, value, iteratee(value), collection);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.assign` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssign(object, source) {
    	      return object && copyObject(source, keys(source), object);
    	    }

    	    /**
    	     * The base implementation of `_.assignIn` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssignIn(object, source) {
    	      return object && copyObject(source, keysIn(source), object);
    	    }

    	    /**
    	     * The base implementation of `assignValue` and `assignMergeValue` without
    	     * value checks.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function baseAssignValue(object, key, value) {
    	      if (key == '__proto__' && defineProperty) {
    	        defineProperty(object, key, {
    	          'configurable': true,
    	          'enumerable': true,
    	          'value': value,
    	          'writable': true
    	        });
    	      } else {
    	        object[key] = value;
    	      }
    	    }

    	    /**
    	     * The base implementation of `_.at` without support for individual paths.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Array} Returns the picked elements.
    	     */
    	    function baseAt(object, paths) {
    	      var index = -1,
    	          length = paths.length,
    	          result = Array(length),
    	          skip = object == null;

    	      while (++index < length) {
    	        result[index] = skip ? undefined$1 : get(object, paths[index]);
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.clamp` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     */
    	    function baseClamp(number, lower, upper) {
    	      if (number === number) {
    	        if (upper !== undefined$1) {
    	          number = number <= upper ? number : upper;
    	        }
    	        if (lower !== undefined$1) {
    	          number = number >= lower ? number : lower;
    	        }
    	      }
    	      return number;
    	    }

    	    /**
    	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
    	     * traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to clone.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Deep clone
    	     *  2 - Flatten inherited properties
    	     *  4 - Clone symbols
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @param {string} [key] The key of `value`.
    	     * @param {Object} [object] The parent object of `value`.
    	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
    	     * @returns {*} Returns the cloned value.
    	     */
    	    function baseClone(value, bitmask, customizer, key, object, stack) {
    	      var result,
    	          isDeep = bitmask & CLONE_DEEP_FLAG,
    	          isFlat = bitmask & CLONE_FLAT_FLAG,
    	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

    	      if (customizer) {
    	        result = object ? customizer(value, key, object, stack) : customizer(value);
    	      }
    	      if (result !== undefined$1) {
    	        return result;
    	      }
    	      if (!isObject(value)) {
    	        return value;
    	      }
    	      var isArr = isArray(value);
    	      if (isArr) {
    	        result = initCloneArray(value);
    	        if (!isDeep) {
    	          return copyArray(value, result);
    	        }
    	      } else {
    	        var tag = getTag(value),
    	            isFunc = tag == funcTag || tag == genTag;

    	        if (isBuffer(value)) {
    	          return cloneBuffer(value, isDeep);
    	        }
    	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
    	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
    	          if (!isDeep) {
    	            return isFlat
    	              ? copySymbolsIn(value, baseAssignIn(result, value))
    	              : copySymbols(value, baseAssign(result, value));
    	          }
    	        } else {
    	          if (!cloneableTags[tag]) {
    	            return object ? value : {};
    	          }
    	          result = initCloneByTag(value, tag, isDeep);
    	        }
    	      }
    	      // Check for circular references and return its corresponding clone.
    	      stack || (stack = new Stack);
    	      var stacked = stack.get(value);
    	      if (stacked) {
    	        return stacked;
    	      }
    	      stack.set(value, result);

    	      if (isSet(value)) {
    	        value.forEach(function(subValue) {
    	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    	        });
    	      } else if (isMap(value)) {
    	        value.forEach(function(subValue, key) {
    	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	        });
    	      }

    	      var keysFunc = isFull
    	        ? (isFlat ? getAllKeysIn : getAllKeys)
    	        : (isFlat ? keysIn : keys);

    	      var props = isArr ? undefined$1 : keysFunc(value);
    	      arrayEach(props || value, function(subValue, key) {
    	        if (props) {
    	          key = subValue;
    	          subValue = value[key];
    	        }
    	        // Recursively populate clone (susceptible to call stack limits).
    	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.conforms` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseConforms(source) {
    	      var props = keys(source);
    	      return function(object) {
    	        return baseConformsTo(object, source, props);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.conformsTo` which accepts `props` to check.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     */
    	    function baseConformsTo(object, source, props) {
    	      var length = props.length;
    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (length--) {
    	        var key = props[length],
    	            predicate = source[key],
    	            value = object[key];

    	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
    	     * to provide to `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {Array} args The arguments to provide to `func`.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    function baseDelay(func, wait, args) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    	    }

    	    /**
    	     * The base implementation of methods like `_.difference` without support
    	     * for excluding multiple arrays or iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Array} values The values to exclude.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     */
    	    function baseDifference(array, values, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          isCommon = true,
    	          length = array.length,
    	          result = [],
    	          valuesLength = values.length;

    	      if (!length) {
    	        return result;
    	      }
    	      if (iteratee) {
    	        values = arrayMap(values, baseUnary(iteratee));
    	      }
    	      if (comparator) {
    	        includes = arrayIncludesWith;
    	        isCommon = false;
    	      }
    	      else if (values.length >= LARGE_ARRAY_SIZE) {
    	        includes = cacheHas;
    	        isCommon = false;
    	        values = new SetCache(values);
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee == null ? value : iteratee(value);

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var valuesIndex = valuesLength;
    	          while (valuesIndex--) {
    	            if (values[valuesIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(values, computed, comparator)) {
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.forEach` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEach = createBaseEach(baseForOwn);

    	    /**
    	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEachRight = createBaseEach(baseForOwnRight, true);

    	    /**
    	     * The base implementation of `_.every` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`
    	     */
    	    function baseEvery(collection, predicate) {
    	      var result = true;
    	      baseEach(collection, function(value, index, collection) {
    	        result = !!predicate(value, index, collection);
    	        return result;
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of methods like `_.max` and `_.min` which accepts a
    	     * `comparator` to determine the extremum value.
    	     *
    	     * @private
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} iteratee The iteratee invoked per iteration.
    	     * @param {Function} comparator The comparator used to compare values.
    	     * @returns {*} Returns the extremum value.
    	     */
    	    function baseExtremum(array, iteratee, comparator) {
    	      var index = -1,
    	          length = array.length;

    	      while (++index < length) {
    	        var value = array[index],
    	            current = iteratee(value);

    	        if (current != null && (computed === undefined$1
    	              ? (current === current && !isSymbol(current))
    	              : comparator(current, computed)
    	            )) {
    	          var computed = current,
    	              result = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.fill` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function baseFill(array, value, start, end) {
    	      var length = array.length;

    	      start = toInteger(start);
    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
    	      if (end < 0) {
    	        end += length;
    	      }
    	      end = start > end ? 0 : toLength(end);
    	      while (start < end) {
    	        array[start++] = value;
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.filter` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     */
    	    function baseFilter(collection, predicate) {
    	      var result = [];
    	      baseEach(collection, function(value, index, collection) {
    	        if (predicate(value, index, collection)) {
    	          result.push(value);
    	        }
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.flatten` with support for restricting flattening.
    	     *
    	     * @private
    	     * @param {Array} array The array to flatten.
    	     * @param {number} depth The maximum recursion depth.
    	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
    	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
    	     * @param {Array} [result=[]] The initial result value.
    	     * @returns {Array} Returns the new flattened array.
    	     */
    	    function baseFlatten(array, depth, predicate, isStrict, result) {
    	      var index = -1,
    	          length = array.length;

    	      predicate || (predicate = isFlattenable);
    	      result || (result = []);

    	      while (++index < length) {
    	        var value = array[index];
    	        if (depth > 0 && predicate(value)) {
    	          if (depth > 1) {
    	            // Recursively flatten arrays (susceptible to call stack limits).
    	            baseFlatten(value, depth - 1, predicate, isStrict, result);
    	          } else {
    	            arrayPush(result, value);
    	          }
    	        } else if (!isStrict) {
    	          result[result.length] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `baseForOwn` which iterates over `object`
    	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseFor = createBaseFor();

    	    /**
    	     * This function is like `baseFor` except that it iterates over properties
    	     * in the opposite order.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseForRight = createBaseFor(true);

    	    /**
    	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwn(object, iteratee) {
    	      return object && baseFor(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwnRight(object, iteratee) {
    	      return object && baseForRight(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.functions` which creates an array of
    	     * `object` function property names filtered from `props`.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Array} props The property names to filter.
    	     * @returns {Array} Returns the function names.
    	     */
    	    function baseFunctions(object, props) {
    	      return arrayFilter(props, function(key) {
    	        return isFunction(object[key]);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.get` without support for default values.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseGet(object, path) {
    	      path = castPath(path, object);

    	      var index = 0,
    	          length = path.length;

    	      while (object != null && index < length) {
    	        object = object[toKey(path[index++])];
    	      }
    	      return (index && index == length) ? object : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	      var result = keysFunc(object);
    	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	    }

    	    /**
    	     * The base implementation of `getTag` without fallbacks for buggy environments.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    function baseGetTag(value) {
    	      if (value == null) {
    	        return value === undefined$1 ? undefinedTag : nullTag;
    	      }
    	      return (symToStringTag && symToStringTag in Object(value))
    	        ? getRawTag(value)
    	        : objectToString(value);
    	    }

    	    /**
    	     * The base implementation of `_.gt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     */
    	    function baseGt(value, other) {
    	      return value > other;
    	    }

    	    /**
    	     * The base implementation of `_.has` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHas(object, key) {
    	      return object != null && hasOwnProperty.call(object, key);
    	    }

    	    /**
    	     * The base implementation of `_.hasIn` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHasIn(object, key) {
    	      return object != null && key in Object(object);
    	    }

    	    /**
    	     * The base implementation of `_.inRange` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to check.
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     */
    	    function baseInRange(number, start, end) {
    	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    	    }

    	    /**
    	     * The base implementation of methods like `_.intersection`, without support
    	     * for iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of shared values.
    	     */
    	    function baseIntersection(arrays, iteratee, comparator) {
    	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
    	          length = arrays[0].length,
    	          othLength = arrays.length,
    	          othIndex = othLength,
    	          caches = Array(othLength),
    	          maxLength = Infinity,
    	          result = [];

    	      while (othIndex--) {
    	        var array = arrays[othIndex];
    	        if (othIndex && iteratee) {
    	          array = arrayMap(array, baseUnary(iteratee));
    	        }
    	        maxLength = nativeMin(array.length, maxLength);
    	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
    	          ? new SetCache(othIndex && array)
    	          : undefined$1;
    	      }
    	      array = arrays[0];

    	      var index = -1,
    	          seen = caches[0];

    	      outer:
    	      while (++index < length && result.length < maxLength) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (!(seen
    	              ? cacheHas(seen, computed)
    	              : includes(result, computed, comparator)
    	            )) {
    	          othIndex = othLength;
    	          while (--othIndex) {
    	            var cache = caches[othIndex];
    	            if (!(cache
    	                  ? cacheHas(cache, computed)
    	                  : includes(arrays[othIndex], computed, comparator))
    	                ) {
    	              continue outer;
    	            }
    	          }
    	          if (seen) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.invert` and `_.invertBy` which inverts
    	     * `object` with values transformed by `iteratee` and set by `setter`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform values.
    	     * @param {Object} accumulator The initial inverted object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseInverter(object, setter, iteratee, accumulator) {
    	      baseForOwn(object, function(value, key, object) {
    	        setter(accumulator, iteratee(value), key, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.invoke` without support for individual
    	     * method arguments.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {Array} args The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     */
    	    function baseInvoke(object, path, args) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      var func = object == null ? object : object[toKey(last(path))];
    	      return func == null ? undefined$1 : apply(func, object, args);
    	    }

    	    /**
    	     * The base implementation of `_.isArguments`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     */
    	    function baseIsArguments(value) {
    	      return isObjectLike(value) && baseGetTag(value) == argsTag;
    	    }

    	    /**
    	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     */
    	    function baseIsArrayBuffer(value) {
    	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    	    }

    	    /**
    	     * The base implementation of `_.isDate` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     */
    	    function baseIsDate(value) {
    	      return isObjectLike(value) && baseGetTag(value) == dateTag;
    	    }

    	    /**
    	     * The base implementation of `_.isEqual` which supports partial comparisons
    	     * and tracks traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Unordered comparison
    	     *  2 - Partial comparison
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     */
    	    function baseIsEqual(value, other, bitmask, customizer, stack) {
    	      if (value === other) {
    	        return true;
    	      }
    	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    	        return value !== value && other !== other;
    	      }
    	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    	    }

    	    /**
    	     * A specialized version of `baseIsEqual` for arrays and objects which performs
    	     * deep comparisons and tracks traversed objects enabling objects with circular
    	     * references to be compared.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    	      var objIsArr = isArray(object),
    	          othIsArr = isArray(other),
    	          objTag = objIsArr ? arrayTag : getTag(object),
    	          othTag = othIsArr ? arrayTag : getTag(other);

    	      objTag = objTag == argsTag ? objectTag : objTag;
    	      othTag = othTag == argsTag ? objectTag : othTag;

    	      var objIsObj = objTag == objectTag,
    	          othIsObj = othTag == objectTag,
    	          isSameTag = objTag == othTag;

    	      if (isSameTag && isBuffer(object)) {
    	        if (!isBuffer(other)) {
    	          return false;
    	        }
    	        objIsArr = true;
    	        objIsObj = false;
    	      }
    	      if (isSameTag && !objIsObj) {
    	        stack || (stack = new Stack);
    	        return (objIsArr || isTypedArray(object))
    	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
    	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    	      }
    	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    	        if (objIsWrapped || othIsWrapped) {
    	          var objUnwrapped = objIsWrapped ? object.value() : object,
    	              othUnwrapped = othIsWrapped ? other.value() : other;

    	          stack || (stack = new Stack);
    	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    	        }
    	      }
    	      if (!isSameTag) {
    	        return false;
    	      }
    	      stack || (stack = new Stack);
    	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    	    }

    	    /**
    	     * The base implementation of `_.isMap` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     */
    	    function baseIsMap(value) {
    	      return isObjectLike(value) && getTag(value) == mapTag;
    	    }

    	    /**
    	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Array} matchData The property names, values, and compare flags to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     */
    	    function baseIsMatch(object, source, matchData, customizer) {
    	      var index = matchData.length,
    	          length = index,
    	          noCustomizer = !customizer;

    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (index--) {
    	        var data = matchData[index];
    	        if ((noCustomizer && data[2])
    	              ? data[1] !== object[data[0]]
    	              : !(data[0] in object)
    	            ) {
    	          return false;
    	        }
    	      }
    	      while (++index < length) {
    	        data = matchData[index];
    	        var key = data[0],
    	            objValue = object[key],
    	            srcValue = data[1];

    	        if (noCustomizer && data[2]) {
    	          if (objValue === undefined$1 && !(key in object)) {
    	            return false;
    	          }
    	        } else {
    	          var stack = new Stack;
    	          if (customizer) {
    	            var result = customizer(objValue, srcValue, key, object, source, stack);
    	          }
    	          if (!(result === undefined$1
    	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
    	                : result
    	              )) {
    	            return false;
    	          }
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.isNative` without bad shim checks.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     */
    	    function baseIsNative(value) {
    	      if (!isObject(value) || isMasked(value)) {
    	        return false;
    	      }
    	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    	      return pattern.test(toSource(value));
    	    }

    	    /**
    	     * The base implementation of `_.isRegExp` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     */
    	    function baseIsRegExp(value) {
    	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    	    }

    	    /**
    	     * The base implementation of `_.isSet` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     */
    	    function baseIsSet(value) {
    	      return isObjectLike(value) && getTag(value) == setTag;
    	    }

    	    /**
    	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     */
    	    function baseIsTypedArray(value) {
    	      return isObjectLike(value) &&
    	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    	    }

    	    /**
    	     * The base implementation of `_.iteratee`.
    	     *
    	     * @private
    	     * @param {*} [value=_.identity] The value to convert to an iteratee.
    	     * @returns {Function} Returns the iteratee.
    	     */
    	    function baseIteratee(value) {
    	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    	      if (typeof value == 'function') {
    	        return value;
    	      }
    	      if (value == null) {
    	        return identity;
    	      }
    	      if (typeof value == 'object') {
    	        return isArray(value)
    	          ? baseMatchesProperty(value[0], value[1])
    	          : baseMatches(value);
    	      }
    	      return property(value);
    	    }

    	    /**
    	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeys(object) {
    	      if (!isPrototype(object)) {
    	        return nativeKeys(object);
    	      }
    	      var result = [];
    	      for (var key in Object(object)) {
    	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeysIn(object) {
    	      if (!isObject(object)) {
    	        return nativeKeysIn(object);
    	      }
    	      var isProto = isPrototype(object),
    	          result = [];

    	      for (var key in object) {
    	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.lt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     */
    	    function baseLt(value, other) {
    	      return value < other;
    	    }

    	    /**
    	     * The base implementation of `_.map` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     */
    	    function baseMap(collection, iteratee) {
    	      var index = -1,
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value, key, collection) {
    	        result[++index] = iteratee(value, key, collection);
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.matches` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatches(source) {
    	      var matchData = getMatchData(source);
    	      if (matchData.length == 1 && matchData[0][2]) {
    	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    	      }
    	      return function(object) {
    	        return object === source || baseIsMatch(object, source, matchData);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
    	     *
    	     * @private
    	     * @param {string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatchesProperty(path, srcValue) {
    	      if (isKey(path) && isStrictComparable(srcValue)) {
    	        return matchesStrictComparable(toKey(path), srcValue);
    	      }
    	      return function(object) {
    	        var objValue = get(object, path);
    	        return (objValue === undefined$1 && objValue === srcValue)
    	          ? hasIn(object, path)
    	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.merge` without support for multiple sources.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} [customizer] The function to customize merged values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMerge(object, source, srcIndex, customizer, stack) {
    	      if (object === source) {
    	        return;
    	      }
    	      baseFor(source, function(srcValue, key) {
    	        stack || (stack = new Stack);
    	        if (isObject(srcValue)) {
    	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    	        }
    	        else {
    	          var newValue = customizer
    	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
    	            : undefined$1;

    	          if (newValue === undefined$1) {
    	            newValue = srcValue;
    	          }
    	          assignMergeValue(object, key, newValue);
    	        }
    	      }, keysIn);
    	    }

    	    /**
    	     * A specialized version of `baseMerge` for arrays and objects which performs
    	     * deep merges and tracks traversed objects enabling objects with circular
    	     * references to be merged.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {string} key The key of the value to merge.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} mergeFunc The function to merge values.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    	      var objValue = safeGet(object, key),
    	          srcValue = safeGet(source, key),
    	          stacked = stack.get(srcValue);

    	      if (stacked) {
    	        assignMergeValue(object, key, stacked);
    	        return;
    	      }
    	      var newValue = customizer
    	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    	        : undefined$1;

    	      var isCommon = newValue === undefined$1;

    	      if (isCommon) {
    	        var isArr = isArray(srcValue),
    	            isBuff = !isArr && isBuffer(srcValue),
    	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    	        newValue = srcValue;
    	        if (isArr || isBuff || isTyped) {
    	          if (isArray(objValue)) {
    	            newValue = objValue;
    	          }
    	          else if (isArrayLikeObject(objValue)) {
    	            newValue = copyArray(objValue);
    	          }
    	          else if (isBuff) {
    	            isCommon = false;
    	            newValue = cloneBuffer(srcValue, true);
    	          }
    	          else if (isTyped) {
    	            isCommon = false;
    	            newValue = cloneTypedArray(srcValue, true);
    	          }
    	          else {
    	            newValue = [];
    	          }
    	        }
    	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
    	          newValue = objValue;
    	          if (isArguments(objValue)) {
    	            newValue = toPlainObject(objValue);
    	          }
    	          else if (!isObject(objValue) || isFunction(objValue)) {
    	            newValue = initCloneObject(srcValue);
    	          }
    	        }
    	        else {
    	          isCommon = false;
    	        }
    	      }
    	      if (isCommon) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, newValue);
    	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    	        stack['delete'](srcValue);
    	      }
    	      assignMergeValue(object, key, newValue);
    	    }

    	    /**
    	     * The base implementation of `_.nth` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {number} n The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     */
    	    function baseNth(array, n) {
    	      var length = array.length;
    	      if (!length) {
    	        return;
    	      }
    	      n += n < 0 ? length : 0;
    	      return isIndex(n, length) ? array[n] : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `_.orderBy` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
    	     * @param {string[]} orders The sort orders of `iteratees`.
    	     * @returns {Array} Returns the new sorted array.
    	     */
    	    function baseOrderBy(collection, iteratees, orders) {
    	      if (iteratees.length) {
    	        iteratees = arrayMap(iteratees, function(iteratee) {
    	          if (isArray(iteratee)) {
    	            return function(value) {
    	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
    	            }
    	          }
    	          return iteratee;
    	        });
    	      } else {
    	        iteratees = [identity];
    	      }

    	      var index = -1;
    	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

    	      var result = baseMap(collection, function(value, key, collection) {
    	        var criteria = arrayMap(iteratees, function(iteratee) {
    	          return iteratee(value);
    	        });
    	        return { 'criteria': criteria, 'index': ++index, 'value': value };
    	      });

    	      return baseSortBy(result, function(object, other) {
    	        return compareMultiple(object, other, orders);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.pick` without support for individual
    	     * property identifiers.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePick(object, paths) {
    	      return basePickBy(object, paths, function(value, path) {
    	        return hasIn(object, path);
    	      });
    	    }

    	    /**
    	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @param {Function} predicate The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePickBy(object, paths, predicate) {
    	      var index = -1,
    	          length = paths.length,
    	          result = {};

    	      while (++index < length) {
    	        var path = paths[index],
    	            value = baseGet(object, path);

    	        if (predicate(value, path)) {
    	          baseSet(result, castPath(path, object), value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseProperty` which supports deep paths.
    	     *
    	     * @private
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     */
    	    function basePropertyDeep(path) {
    	      return function(object) {
    	        return baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.pullAllBy` without support for iteratee
    	     * shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAll(array, values, iteratee, comparator) {
    	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
    	          index = -1,
    	          length = values.length,
    	          seen = array;

    	      if (array === values) {
    	        values = copyArray(values);
    	      }
    	      if (iteratee) {
    	        seen = arrayMap(array, baseUnary(iteratee));
    	      }
    	      while (++index < length) {
    	        var fromIndex = 0,
    	            value = values[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
    	          if (seen !== array) {
    	            splice.call(seen, fromIndex, 1);
    	          }
    	          splice.call(array, fromIndex, 1);
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.pullAt` without support for individual
    	     * indexes or capturing the removed elements.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {number[]} indexes The indexes of elements to remove.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAt(array, indexes) {
    	      var length = array ? indexes.length : 0,
    	          lastIndex = length - 1;

    	      while (length--) {
    	        var index = indexes[length];
    	        if (length == lastIndex || index !== previous) {
    	          var previous = index;
    	          if (isIndex(index)) {
    	            splice.call(array, index, 1);
    	          } else {
    	            baseUnset(array, index);
    	          }
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.random` without support for returning
    	     * floating-point numbers.
    	     *
    	     * @private
    	     * @param {number} lower The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the random number.
    	     */
    	    function baseRandom(lower, upper) {
    	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    	    }

    	    /**
    	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
    	     * coerce arguments.
    	     *
    	     * @private
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} step The value to increment or decrement by.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the range of numbers.
    	     */
    	    function baseRange(start, end, step, fromRight) {
    	      var index = -1,
    	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
    	          result = Array(length);

    	      while (length--) {
    	        result[fromRight ? length : ++index] = start;
    	        start += step;
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.repeat` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {string} string The string to repeat.
    	     * @param {number} n The number of times to repeat the string.
    	     * @returns {string} Returns the repeated string.
    	     */
    	    function baseRepeat(string, n) {
    	      var result = '';
    	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    	        return result;
    	      }
    	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
    	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    	      do {
    	        if (n % 2) {
    	          result += string;
    	        }
    	        n = nativeFloor(n / 2);
    	        if (n) {
    	          string += string;
    	        }
    	      } while (n);

    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function baseRest(func, start) {
    	      return setToString(overRest(func, start, identity), func + '');
    	    }

    	    /**
    	     * The base implementation of `_.sample`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function baseSample(collection) {
    	      return arraySample(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.sampleSize` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function baseSampleSize(collection, n) {
    	      var array = values(collection);
    	      return shuffleSelf(array, baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * The base implementation of `_.set`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseSet(object, path, value, customizer) {
    	      if (!isObject(object)) {
    	        return object;
    	      }
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          lastIndex = length - 1,
    	          nested = object;

    	      while (nested != null && ++index < length) {
    	        var key = toKey(path[index]),
    	            newValue = value;

    	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
    	          return object;
    	        }

    	        if (index != lastIndex) {
    	          var objValue = nested[key];
    	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
    	          if (newValue === undefined$1) {
    	            newValue = isObject(objValue)
    	              ? objValue
    	              : (isIndex(path[index + 1]) ? [] : {});
    	          }
    	        }
    	        assignValue(nested, key, newValue);
    	        nested = nested[key];
    	      }
    	      return object;
    	    }

    	    /**
    	     * The base implementation of `setData` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetData = !metaMap ? identity : function(func, data) {
    	      metaMap.set(func, data);
    	      return func;
    	    };

    	    /**
    	     * The base implementation of `setToString` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetToString = !defineProperty ? identity : function(func, string) {
    	      return defineProperty(func, 'toString', {
    	        'configurable': true,
    	        'enumerable': false,
    	        'value': constant(string),
    	        'writable': true
    	      });
    	    };

    	    /**
    	     * The base implementation of `_.shuffle`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function baseShuffle(collection) {
    	      return shuffleSelf(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.slice` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseSlice(array, start, end) {
    	      var index = -1,
    	          length = array.length;

    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = end > length ? length : end;
    	      if (end < 0) {
    	        end += length;
    	      }
    	      length = start > end ? 0 : ((end - start) >>> 0);
    	      start >>>= 0;

    	      var result = Array(length);
    	      while (++index < length) {
    	        result[index] = array[index + start];
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.some` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     */
    	    function baseSome(collection, predicate) {
    	      var result;

    	      baseEach(collection, function(value, index, collection) {
    	        result = predicate(value, index, collection);
    	        return !result;
    	      });
    	      return !!result;
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
    	     * performs a binary search of `array` to determine the index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndex(array, value, retHighest) {
    	      var low = 0,
    	          high = array == null ? low : array.length;

    	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    	        while (low < high) {
    	          var mid = (low + high) >>> 1,
    	              computed = array[mid];

    	          if (computed !== null && !isSymbol(computed) &&
    	              (retHighest ? (computed <= value) : (computed < value))) {
    	            low = mid + 1;
    	          } else {
    	            high = mid;
    	          }
    	        }
    	        return high;
    	      }
    	      return baseSortedIndexBy(array, value, identity, retHighest);
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
    	     * which invokes `iteratee` for `value` and each element of `array` to compute
    	     * their sort ranking. The iteratee is invoked with one argument; (value).
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} iteratee The iteratee invoked per element.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
    	      var low = 0,
    	          high = array == null ? 0 : array.length;
    	      if (high === 0) {
    	        return 0;
    	      }

    	      value = iteratee(value);
    	      var valIsNaN = value !== value,
    	          valIsNull = value === null,
    	          valIsSymbol = isSymbol(value),
    	          valIsUndefined = value === undefined$1;

    	      while (low < high) {
    	        var mid = nativeFloor((low + high) / 2),
    	            computed = iteratee(array[mid]),
    	            othIsDefined = computed !== undefined$1,
    	            othIsNull = computed === null,
    	            othIsReflexive = computed === computed,
    	            othIsSymbol = isSymbol(computed);

    	        if (valIsNaN) {
    	          var setLow = retHighest || othIsReflexive;
    	        } else if (valIsUndefined) {
    	          setLow = othIsReflexive && (retHighest || othIsDefined);
    	        } else if (valIsNull) {
    	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    	        } else if (valIsSymbol) {
    	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    	        } else if (othIsNull || othIsSymbol) {
    	          setLow = false;
    	        } else {
    	          setLow = retHighest ? (computed <= value) : (computed < value);
    	        }
    	        if (setLow) {
    	          low = mid + 1;
    	        } else {
    	          high = mid;
    	        }
    	      }
    	      return nativeMin(high, MAX_ARRAY_INDEX);
    	    }

    	    /**
    	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
    	     * support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseSortedUniq(array, iteratee) {
    	      var index = -1,
    	          length = array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        if (!index || !eq(computed, seen)) {
    	          var seen = computed;
    	          result[resIndex++] = value === 0 ? 0 : value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.toNumber` which doesn't ensure correct
    	     * conversions of binary, hexadecimal, or octal string values.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     */
    	    function baseToNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      return +value;
    	    }

    	    /**
    	     * The base implementation of `_.toString` which doesn't convert nullish
    	     * values to empty strings.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {string} Returns the string.
    	     */
    	    function baseToString(value) {
    	      // Exit early for strings to avoid a performance hit in some environments.
    	      if (typeof value == 'string') {
    	        return value;
    	      }
    	      if (isArray(value)) {
    	        // Recursively convert values (susceptible to call stack limits).
    	        return arrayMap(value, baseToString) + '';
    	      }
    	      if (isSymbol(value)) {
    	        return symbolToString ? symbolToString.call(value) : '';
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseUniq(array, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          length = array.length,
    	          isCommon = true,
    	          result = [],
    	          seen = result;

    	      if (comparator) {
    	        isCommon = false;
    	        includes = arrayIncludesWith;
    	      }
    	      else if (length >= LARGE_ARRAY_SIZE) {
    	        var set = iteratee ? null : createSet(array);
    	        if (set) {
    	          return setToArray(set);
    	        }
    	        isCommon = false;
    	        includes = cacheHas;
    	        seen = new SetCache;
    	      }
    	      else {
    	        seen = iteratee ? [] : result;
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var seenIndex = seen.length;
    	          while (seenIndex--) {
    	            if (seen[seenIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          if (iteratee) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(seen, computed, comparator)) {
    	          if (seen !== result) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.unset`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The property path to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     */
    	    function baseUnset(object, path) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      return object == null || delete object[toKey(last(path))];
    	    }

    	    /**
    	     * The base implementation of `_.update`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to update.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseUpdate(object, path, updater, customizer) {
    	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    	    }

    	    /**
    	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
    	     * without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseWhile(array, predicate, isDrop, fromRight) {
    	      var length = array.length,
    	          index = fromRight ? length : -1;

    	      while ((fromRight ? index-- : ++index < length) &&
    	        predicate(array[index], index, array)) {}

    	      return isDrop
    	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    	    }

    	    /**
    	     * The base implementation of `wrapperValue` which returns the result of
    	     * performing a sequence of actions on the unwrapped `value`, where each
    	     * successive action is supplied the return value of the previous.
    	     *
    	     * @private
    	     * @param {*} value The unwrapped value.
    	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseWrapperValue(value, actions) {
    	      var result = value;
    	      if (result instanceof LazyWrapper) {
    	        result = result.value();
    	      }
    	      return arrayReduce(actions, function(result, action) {
    	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
    	      }, result);
    	    }

    	    /**
    	     * The base implementation of methods like `_.xor`, without support for
    	     * iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of values.
    	     */
    	    function baseXor(arrays, iteratee, comparator) {
    	      var length = arrays.length;
    	      if (length < 2) {
    	        return length ? baseUniq(arrays[0]) : [];
    	      }
    	      var index = -1,
    	          result = Array(length);

    	      while (++index < length) {
    	        var array = arrays[index],
    	            othIndex = -1;

    	        while (++othIndex < length) {
    	          if (othIndex != index) {
    	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
    	          }
    	        }
    	      }
    	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    	    }

    	    /**
    	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
    	     *
    	     * @private
    	     * @param {Array} props The property identifiers.
    	     * @param {Array} values The property values.
    	     * @param {Function} assignFunc The function to assign values.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function baseZipObject(props, values, assignFunc) {
    	      var index = -1,
    	          length = props.length,
    	          valsLength = values.length,
    	          result = {};

    	      while (++index < length) {
    	        var value = index < valsLength ? values[index] : undefined$1;
    	        assignFunc(result, props[index], value);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Casts `value` to an empty array if it's not an array like object.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Array|Object} Returns the cast array-like object.
    	     */
    	    function castArrayLikeObject(value) {
    	      return isArrayLikeObject(value) ? value : [];
    	    }

    	    /**
    	     * Casts `value` to `identity` if it's not a function.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Function} Returns cast function.
    	     */
    	    function castFunction(value) {
    	      return typeof value == 'function' ? value : identity;
    	    }

    	    /**
    	     * Casts `value` to a path array if it's not one.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {Array} Returns the cast property path array.
    	     */
    	    function castPath(value, object) {
    	      if (isArray(value)) {
    	        return value;
    	      }
    	      return isKey(value, object) ? [value] : stringToPath(toString(value));
    	    }

    	    /**
    	     * A `baseRest` alias which can be replaced with `identity` by module
    	     * replacement plugins.
    	     *
    	     * @private
    	     * @type {Function}
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    var castRest = baseRest;

    	    /**
    	     * Casts `array` to a slice if it's needed.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {number} start The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the cast slice.
    	     */
    	    function castSlice(array, start, end) {
    	      var length = array.length;
    	      end = end === undefined$1 ? length : end;
    	      return (!start && end >= length) ? array : baseSlice(array, start, end);
    	    }

    	    /**
    	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
    	     *
    	     * @private
    	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
    	     */
    	    var clearTimeout = ctxClearTimeout || function(id) {
    	      return root.clearTimeout(id);
    	    };

    	    /**
    	     * Creates a clone of  `buffer`.
    	     *
    	     * @private
    	     * @param {Buffer} buffer The buffer to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Buffer} Returns the cloned buffer.
    	     */
    	    function cloneBuffer(buffer, isDeep) {
    	      if (isDeep) {
    	        return buffer.slice();
    	      }
    	      var length = buffer.length,
    	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    	      buffer.copy(result);
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `arrayBuffer`.
    	     *
    	     * @private
    	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	     * @returns {ArrayBuffer} Returns the cloned array buffer.
    	     */
    	    function cloneArrayBuffer(arrayBuffer) {
    	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `dataView`.
    	     *
    	     * @private
    	     * @param {Object} dataView The data view to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned data view.
    	     */
    	    function cloneDataView(dataView, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    	    }

    	    /**
    	     * Creates a clone of `regexp`.
    	     *
    	     * @private
    	     * @param {Object} regexp The regexp to clone.
    	     * @returns {Object} Returns the cloned regexp.
    	     */
    	    function cloneRegExp(regexp) {
    	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    	      result.lastIndex = regexp.lastIndex;
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of the `symbol` object.
    	     *
    	     * @private
    	     * @param {Object} symbol The symbol object to clone.
    	     * @returns {Object} Returns the cloned symbol object.
    	     */
    	    function cloneSymbol(symbol) {
    	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    	    }

    	    /**
    	     * Creates a clone of `typedArray`.
    	     *
    	     * @private
    	     * @param {Object} typedArray The typed array to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned typed array.
    	     */
    	    function cloneTypedArray(typedArray, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	    }

    	    /**
    	     * Compares values to sort them in ascending order.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {number} Returns the sort order indicator for `value`.
    	     */
    	    function compareAscending(value, other) {
    	      if (value !== other) {
    	        var valIsDefined = value !== undefined$1,
    	            valIsNull = value === null,
    	            valIsReflexive = value === value,
    	            valIsSymbol = isSymbol(value);

    	        var othIsDefined = other !== undefined$1,
    	            othIsNull = other === null,
    	            othIsReflexive = other === other,
    	            othIsSymbol = isSymbol(other);

    	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
    	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
    	            (valIsNull && othIsDefined && othIsReflexive) ||
    	            (!valIsDefined && othIsReflexive) ||
    	            !valIsReflexive) {
    	          return 1;
    	        }
    	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
    	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
    	            (othIsNull && valIsDefined && valIsReflexive) ||
    	            (!othIsDefined && valIsReflexive) ||
    	            !othIsReflexive) {
    	          return -1;
    	        }
    	      }
    	      return 0;
    	    }

    	    /**
    	     * Used by `_.orderBy` to compare multiple properties of a value to another
    	     * and stable sort them.
    	     *
    	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
    	     * specify an order of "desc" for descending or "asc" for ascending sort order
    	     * of corresponding values.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {boolean[]|string[]} orders The order to sort by for each property.
    	     * @returns {number} Returns the sort order indicator for `object`.
    	     */
    	    function compareMultiple(object, other, orders) {
    	      var index = -1,
    	          objCriteria = object.criteria,
    	          othCriteria = other.criteria,
    	          length = objCriteria.length,
    	          ordersLength = orders.length;

    	      while (++index < length) {
    	        var result = compareAscending(objCriteria[index], othCriteria[index]);
    	        if (result) {
    	          if (index >= ordersLength) {
    	            return result;
    	          }
    	          var order = orders[index];
    	          return result * (order == 'desc' ? -1 : 1);
    	        }
    	      }
    	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    	      // that causes it, under certain circumstances, to provide the same value for
    	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    	      // for more details.
    	      //
    	      // This also ensures a stable sort in V8 and other engines.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    	      return object.index - other.index;
    	    }

    	    /**
    	     * Creates an array that is the composition of partially applied arguments,
    	     * placeholders, and provided arguments into a single array of arguments.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to prepend to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgs(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersLength = holders.length,
    	          leftIndex = -1,
    	          leftLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(leftLength + rangeLength),
    	          isUncurried = !isCurried;

    	      while (++leftIndex < leftLength) {
    	        result[leftIndex] = partials[leftIndex];
    	      }
    	      while (++argsIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[holders[argsIndex]] = args[argsIndex];
    	        }
    	      }
    	      while (rangeLength--) {
    	        result[leftIndex++] = args[argsIndex++];
    	      }
    	      return result;
    	    }

    	    /**
    	     * This function is like `composeArgs` except that the arguments composition
    	     * is tailored for `_.partialRight`.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to append to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgsRight(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersIndex = -1,
    	          holdersLength = holders.length,
    	          rightIndex = -1,
    	          rightLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(rangeLength + rightLength),
    	          isUncurried = !isCurried;

    	      while (++argsIndex < rangeLength) {
    	        result[argsIndex] = args[argsIndex];
    	      }
    	      var offset = argsIndex;
    	      while (++rightIndex < rightLength) {
    	        result[offset + rightIndex] = partials[rightIndex];
    	      }
    	      while (++holdersIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[offset + holders[holdersIndex]] = args[argsIndex++];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Copies the values of `source` to `array`.
    	     *
    	     * @private
    	     * @param {Array} source The array to copy values from.
    	     * @param {Array} [array=[]] The array to copy values to.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function copyArray(source, array) {
    	      var index = -1,
    	          length = source.length;

    	      array || (array = Array(length));
    	      while (++index < length) {
    	        array[index] = source[index];
    	      }
    	      return array;
    	    }

    	    /**
    	     * Copies properties of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy properties from.
    	     * @param {Array} props The property identifiers to copy.
    	     * @param {Object} [object={}] The object to copy properties to.
    	     * @param {Function} [customizer] The function to customize copied values.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copyObject(source, props, object, customizer) {
    	      var isNew = !object;
    	      object || (object = {});

    	      var index = -1,
    	          length = props.length;

    	      while (++index < length) {
    	        var key = props[index];

    	        var newValue = customizer
    	          ? customizer(object[key], source[key], key, object, source)
    	          : undefined$1;

    	        if (newValue === undefined$1) {
    	          newValue = source[key];
    	        }
    	        if (isNew) {
    	          baseAssignValue(object, key, newValue);
    	        } else {
    	          assignValue(object, key, newValue);
    	        }
    	      }
    	      return object;
    	    }

    	    /**
    	     * Copies own symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbols(source, object) {
    	      return copyObject(source, getSymbols(source), object);
    	    }

    	    /**
    	     * Copies own and inherited symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbolsIn(source, object) {
    	      return copyObject(source, getSymbolsIn(source), object);
    	    }

    	    /**
    	     * Creates a function like `_.groupBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} [initializer] The accumulator object initializer.
    	     * @returns {Function} Returns the new aggregator function.
    	     */
    	    function createAggregator(setter, initializer) {
    	      return function(collection, iteratee) {
    	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
    	            accumulator = initializer ? initializer() : {};

    	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.assign`.
    	     *
    	     * @private
    	     * @param {Function} assigner The function to assign values.
    	     * @returns {Function} Returns the new assigner function.
    	     */
    	    function createAssigner(assigner) {
    	      return baseRest(function(object, sources) {
    	        var index = -1,
    	            length = sources.length,
    	            customizer = length > 1 ? sources[length - 1] : undefined$1,
    	            guard = length > 2 ? sources[2] : undefined$1;

    	        customizer = (assigner.length > 3 && typeof customizer == 'function')
    	          ? (length--, customizer)
    	          : undefined$1;

    	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	          customizer = length < 3 ? undefined$1 : customizer;
    	          length = 1;
    	        }
    	        object = Object(object);
    	        while (++index < length) {
    	          var source = sources[index];
    	          if (source) {
    	            assigner(object, source, index, customizer);
    	          }
    	        }
    	        return object;
    	      });
    	    }

    	    /**
    	     * Creates a `baseEach` or `baseEachRight` function.
    	     *
    	     * @private
    	     * @param {Function} eachFunc The function to iterate over a collection.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseEach(eachFunc, fromRight) {
    	      return function(collection, iteratee) {
    	        if (collection == null) {
    	          return collection;
    	        }
    	        if (!isArrayLike(collection)) {
    	          return eachFunc(collection, iteratee);
    	        }
    	        var length = collection.length,
    	            index = fromRight ? length : -1,
    	            iterable = Object(collection);

    	        while ((fromRight ? index-- : ++index < length)) {
    	          if (iteratee(iterable[index], index, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return collection;
    	      };
    	    }

    	    /**
    	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseFor(fromRight) {
    	      return function(object, iteratee, keysFunc) {
    	        var index = -1,
    	            iterable = Object(object),
    	            props = keysFunc(object),
    	            length = props.length;

    	        while (length--) {
    	          var key = props[fromRight ? length : ++index];
    	          if (iteratee(iterable[key], key, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return object;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the optional `this`
    	     * binding of `thisArg`.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createBind(func, bitmask, thisArg) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return fn.apply(isBind ? thisArg : this, arguments);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.lowerFirst`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `String` case method to use.
    	     * @returns {Function} Returns the new case function.
    	     */
    	    function createCaseFirst(methodName) {
    	      return function(string) {
    	        string = toString(string);

    	        var strSymbols = hasUnicode(string)
    	          ? stringToArray(string)
    	          : undefined$1;

    	        var chr = strSymbols
    	          ? strSymbols[0]
    	          : string.charAt(0);

    	        var trailing = strSymbols
    	          ? castSlice(strSymbols, 1).join('')
    	          : string.slice(1);

    	        return chr[methodName]() + trailing;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.camelCase`.
    	     *
    	     * @private
    	     * @param {Function} callback The function to combine each word.
    	     * @returns {Function} Returns the new compounder function.
    	     */
    	    function createCompounder(callback) {
    	      return function(string) {
    	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    	      };
    	    }

    	    /**
    	     * Creates a function that produces an instance of `Ctor` regardless of
    	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
    	     *
    	     * @private
    	     * @param {Function} Ctor The constructor to wrap.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCtor(Ctor) {
    	      return function() {
    	        // Use a `switch` statement to work with class constructors. See
    	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    	        // for more details.
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return new Ctor;
    	          case 1: return new Ctor(args[0]);
    	          case 2: return new Ctor(args[0], args[1]);
    	          case 3: return new Ctor(args[0], args[1], args[2]);
    	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
    	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
    	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
    	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    	        }
    	        var thisBinding = baseCreate(Ctor.prototype),
    	            result = Ctor.apply(thisBinding, args);

    	        // Mimic the constructor's `return` behavior.
    	        // See https://es5.github.io/#x13.2.2 for more details.
    	        return isObject(result) ? result : thisBinding;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to enable currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {number} arity The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCurry(func, bitmask, arity) {
    	      var Ctor = createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length,
    	            placeholder = getHolder(wrapper);

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
    	          ? []
    	          : replaceHolders(args, placeholder);

    	        length -= holders.length;
    	        if (length < arity) {
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
    	            args, holders, undefined$1, undefined$1, arity - length);
    	        }
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return apply(fn, this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.find` or `_.findLast` function.
    	     *
    	     * @private
    	     * @param {Function} findIndexFunc The function to find the collection index.
    	     * @returns {Function} Returns the new find function.
    	     */
    	    function createFind(findIndexFunc) {
    	      return function(collection, predicate, fromIndex) {
    	        var iterable = Object(collection);
    	        if (!isArrayLike(collection)) {
    	          var iteratee = getIteratee(predicate, 3);
    	          collection = keys(collection);
    	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    	        }
    	        var index = findIndexFunc(collection, predicate, fromIndex);
    	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
    	      };
    	    }

    	    /**
    	     * Creates a `_.flow` or `_.flowRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new flow function.
    	     */
    	    function createFlow(fromRight) {
    	      return flatRest(function(funcs) {
    	        var length = funcs.length,
    	            index = length,
    	            prereq = LodashWrapper.prototype.thru;

    	        if (fromRight) {
    	          funcs.reverse();
    	        }
    	        while (index--) {
    	          var func = funcs[index];
    	          if (typeof func != 'function') {
    	            throw new TypeError(FUNC_ERROR_TEXT);
    	          }
    	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
    	            var wrapper = new LodashWrapper([], true);
    	          }
    	        }
    	        index = wrapper ? index : length;
    	        while (++index < length) {
    	          func = funcs[index];

    	          var funcName = getFuncName(func),
    	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

    	          if (data && isLaziable(data[0]) &&
    	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
    	                !data[4].length && data[9] == 1
    	              ) {
    	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
    	          } else {
    	            wrapper = (func.length == 1 && isLaziable(func))
    	              ? wrapper[funcName]()
    	              : wrapper.thru(func);
    	          }
    	        }
    	        return function() {
    	          var args = arguments,
    	              value = args[0];

    	          if (wrapper && args.length == 1 && isArray(value)) {
    	            return wrapper.plant(value).value();
    	          }
    	          var index = 0,
    	              result = length ? funcs[index].apply(this, args) : value;

    	          while (++index < length) {
    	            result = funcs[index].call(this, result);
    	          }
    	          return result;
    	        };
    	      });
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with optional `this`
    	     * binding of `thisArg`, partial application, and currying.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [partialsRight] The arguments to append to those provided
    	     *  to the new function.
    	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    	      var isAry = bitmask & WRAP_ARY_FLAG,
    	          isBind = bitmask & WRAP_BIND_FLAG,
    	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
    	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
    	          isFlip = bitmask & WRAP_FLIP_FLAG,
    	          Ctor = isBindKey ? undefined$1 : createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length;

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        if (isCurried) {
    	          var placeholder = getHolder(wrapper),
    	              holdersCount = countHolders(args, placeholder);
    	        }
    	        if (partials) {
    	          args = composeArgs(args, partials, holders, isCurried);
    	        }
    	        if (partialsRight) {
    	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    	        }
    	        length -= holdersCount;
    	        if (isCurried && length < arity) {
    	          var newHolders = replaceHolders(args, placeholder);
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
    	            args, newHolders, argPos, ary, arity - length
    	          );
    	        }
    	        var thisBinding = isBind ? thisArg : this,
    	            fn = isBindKey ? thisBinding[func] : func;

    	        length = args.length;
    	        if (argPos) {
    	          args = reorder(args, argPos);
    	        } else if (isFlip && length > 1) {
    	          args.reverse();
    	        }
    	        if (isAry && ary < length) {
    	          args.length = ary;
    	        }
    	        if (this && this !== root && this instanceof wrapper) {
    	          fn = Ctor || createCtor(fn);
    	        }
    	        return fn.apply(thisBinding, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.invertBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} toIteratee The function to resolve iteratees.
    	     * @returns {Function} Returns the new inverter function.
    	     */
    	    function createInverter(setter, toIteratee) {
    	      return function(object, iteratee) {
    	        return baseInverter(object, setter, toIteratee(iteratee), {});
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a mathematical operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @param {number} [defaultValue] The value used for `undefined` arguments.
    	     * @returns {Function} Returns the new mathematical operation function.
    	     */
    	    function createMathOperation(operator, defaultValue) {
    	      return function(value, other) {
    	        var result;
    	        if (value === undefined$1 && other === undefined$1) {
    	          return defaultValue;
    	        }
    	        if (value !== undefined$1) {
    	          result = value;
    	        }
    	        if (other !== undefined$1) {
    	          if (result === undefined$1) {
    	            return other;
    	          }
    	          if (typeof value == 'string' || typeof other == 'string') {
    	            value = baseToString(value);
    	            other = baseToString(other);
    	          } else {
    	            value = baseToNumber(value);
    	            other = baseToNumber(other);
    	          }
    	          result = operator(value, other);
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.over`.
    	     *
    	     * @private
    	     * @param {Function} arrayFunc The function to iterate over iteratees.
    	     * @returns {Function} Returns the new over function.
    	     */
    	    function createOver(arrayFunc) {
    	      return flatRest(function(iteratees) {
    	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
    	        return baseRest(function(args) {
    	          var thisArg = this;
    	          return arrayFunc(iteratees, function(iteratee) {
    	            return apply(iteratee, thisArg, args);
    	          });
    	        });
    	      });
    	    }

    	    /**
    	     * Creates the padding for `string` based on `length`. The `chars` string
    	     * is truncated if the number of characters exceeds `length`.
    	     *
    	     * @private
    	     * @param {number} length The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padding for `string`.
    	     */
    	    function createPadding(length, chars) {
    	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

    	      var charsLength = chars.length;
    	      if (charsLength < 2) {
    	        return charsLength ? baseRepeat(chars, length) : chars;
    	      }
    	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
    	      return hasUnicode(chars)
    	        ? castSlice(stringToArray(result), 0, length).join('')
    	        : result.slice(0, length);
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the `this` binding
    	     * of `thisArg` and `partials` prepended to the arguments it receives.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {Array} partials The arguments to prepend to those provided to
    	     *  the new function.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createPartial(func, bitmask, thisArg, partials) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var argsIndex = -1,
    	            argsLength = arguments.length,
    	            leftIndex = -1,
    	            leftLength = partials.length,
    	            args = Array(leftLength + argsLength),
    	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    	        while (++leftIndex < leftLength) {
    	          args[leftIndex] = partials[leftIndex];
    	        }
    	        while (argsLength--) {
    	          args[leftIndex++] = arguments[++argsIndex];
    	        }
    	        return apply(fn, isBind ? thisArg : this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.range` or `_.rangeRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new range function.
    	     */
    	    function createRange(fromRight) {
    	      return function(start, end, step) {
    	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
    	          end = step = undefined$1;
    	        }
    	        // Ensure the sign of `-0` is preserved.
    	        start = toFinite(start);
    	        if (end === undefined$1) {
    	          end = start;
    	          start = 0;
    	        } else {
    	          end = toFinite(end);
    	        }
    	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
    	        return baseRange(start, end, step, fromRight);
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a relational operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @returns {Function} Returns the new relational operation function.
    	     */
    	    function createRelationalOperation(operator) {
    	      return function(value, other) {
    	        if (!(typeof value == 'string' && typeof other == 'string')) {
    	          value = toNumber(value);
    	          other = toNumber(other);
    	        }
    	        return operator(value, other);
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to continue currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {Function} wrapFunc The function to create the `func` wrapper.
    	     * @param {*} placeholder The placeholder value.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    	      var isCurry = bitmask & WRAP_CURRY_FLAG,
    	          newHolders = isCurry ? holders : undefined$1,
    	          newHoldersRight = isCurry ? undefined$1 : holders,
    	          newPartials = isCurry ? partials : undefined$1,
    	          newPartialsRight = isCurry ? undefined$1 : partials;

    	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
    	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

    	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    	      }
    	      var newData = [
    	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    	        newHoldersRight, argPos, ary, arity
    	      ];

    	      var result = wrapFunc.apply(undefined$1, newData);
    	      if (isLaziable(func)) {
    	        setData(result, newData);
    	      }
    	      result.placeholder = placeholder;
    	      return setWrapToString(result, func, bitmask);
    	    }

    	    /**
    	     * Creates a function like `_.round`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `Math` method to use when rounding.
    	     * @returns {Function} Returns the new round function.
    	     */
    	    function createRound(methodName) {
    	      var func = Math[methodName];
    	      return function(number, precision) {
    	        number = toNumber(number);
    	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
    	        if (precision && nativeIsFinite(number)) {
    	          // Shift with exponential notation to avoid floating-point issues.
    	          // See [MDN](https://mdn.io/round#Examples) for more details.
    	          var pair = (toString(number) + 'e').split('e'),
    	              value = func(pair[0] + 'e' + (+pair[1] + precision));

    	          pair = (toString(value) + 'e').split('e');
    	          return +(pair[0] + 'e' + (+pair[1] - precision));
    	        }
    	        return func(number);
    	      };
    	    }

    	    /**
    	     * Creates a set object of `values`.
    	     *
    	     * @private
    	     * @param {Array} values The values to add to the set.
    	     * @returns {Object} Returns the new set.
    	     */
    	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    	      return new Set(values);
    	    };

    	    /**
    	     * Creates a `_.toPairs` or `_.toPairsIn` function.
    	     *
    	     * @private
    	     * @param {Function} keysFunc The function to get the keys of a given object.
    	     * @returns {Function} Returns the new pairs function.
    	     */
    	    function createToPairs(keysFunc) {
    	      return function(object) {
    	        var tag = getTag(object);
    	        if (tag == mapTag) {
    	          return mapToArray(object);
    	        }
    	        if (tag == setTag) {
    	          return setToPairs(object);
    	        }
    	        return baseToPairs(object, keysFunc(object));
    	      };
    	    }

    	    /**
    	     * Creates a function that either curries or invokes `func` with optional
    	     * `this` binding and partially applied arguments.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags.
    	     *    1 - `_.bind`
    	     *    2 - `_.bindKey`
    	     *    4 - `_.curry` or `_.curryRight` of a bound function
    	     *    8 - `_.curry`
    	     *   16 - `_.curryRight`
    	     *   32 - `_.partial`
    	     *   64 - `_.partialRight`
    	     *  128 - `_.rearg`
    	     *  256 - `_.ary`
    	     *  512 - `_.flip`
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to be partially applied.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    	      if (!isBindKey && typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var length = partials ? partials.length : 0;
    	      if (!length) {
    	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    	        partials = holders = undefined$1;
    	      }
    	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
    	      arity = arity === undefined$1 ? arity : toInteger(arity);
    	      length -= holders ? holders.length : 0;

    	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    	        var partialsRight = partials,
    	            holdersRight = holders;

    	        partials = holders = undefined$1;
    	      }
    	      var data = isBindKey ? undefined$1 : getData(func);

    	      var newData = [
    	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    	        argPos, ary, arity
    	      ];

    	      if (data) {
    	        mergeData(newData, data);
    	      }
    	      func = newData[0];
    	      bitmask = newData[1];
    	      thisArg = newData[2];
    	      partials = newData[3];
    	      holders = newData[4];
    	      arity = newData[9] = newData[9] === undefined$1
    	        ? (isBindKey ? 0 : func.length)
    	        : nativeMax(newData[9] - length, 0);

    	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    	      }
    	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    	        var result = createBind(func, bitmask, thisArg);
    	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    	        result = createCurry(func, bitmask, arity);
    	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    	        result = createPartial(func, bitmask, thisArg, partials);
    	      } else {
    	        result = createHybrid.apply(undefined$1, newData);
    	      }
    	      var setter = data ? baseSetData : setData;
    	      return setWrapToString(setter(result, newData), func, bitmask);
    	    }

    	    /**
    	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
    	     * of source objects to the destination object for all destination properties
    	     * that resolve to `undefined`.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to assign.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
    	      if (objValue === undefined$1 ||
    	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	        return srcValue;
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
    	     * objects into destination objects that are passed thru.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to merge.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @param {Object} source The parent object of `srcValue`.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    	      if (isObject(objValue) && isObject(srcValue)) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, objValue);
    	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
    	        stack['delete'](srcValue);
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
    	     * objects.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {string} key The key of the property to inspect.
    	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
    	     */
    	    function customOmitClone(value) {
    	      return isPlainObject(value) ? undefined$1 : value;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for arrays with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Array} array The array to compare.
    	     * @param {Array} other The other array to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `array` and `other` objects.
    	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	     */
    	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          arrLength = array.length,
    	          othLength = other.length;

    	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	        return false;
    	      }
    	      // Check that cyclic values are equal.
    	      var arrStacked = stack.get(array);
    	      var othStacked = stack.get(other);
    	      if (arrStacked && othStacked) {
    	        return arrStacked == other && othStacked == array;
    	      }
    	      var index = -1,
    	          result = true,
    	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

    	      stack.set(array, other);
    	      stack.set(other, array);

    	      // Ignore non-index properties.
    	      while (++index < arrLength) {
    	        var arrValue = array[index],
    	            othValue = other[index];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, arrValue, index, other, array, stack)
    	            : customizer(arrValue, othValue, index, array, other, stack);
    	        }
    	        if (compared !== undefined$1) {
    	          if (compared) {
    	            continue;
    	          }
    	          result = false;
    	          break;
    	        }
    	        // Recursively compare arrays (susceptible to call stack limits).
    	        if (seen) {
    	          if (!arraySome(other, function(othValue, othIndex) {
    	                if (!cacheHas(seen, othIndex) &&
    	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    	                  return seen.push(othIndex);
    	                }
    	              })) {
    	            result = false;
    	            break;
    	          }
    	        } else if (!(
    	              arrValue === othValue ||
    	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
    	            )) {
    	          result = false;
    	          break;
    	        }
    	      }
    	      stack['delete'](array);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for comparing objects of
    	     * the same `toStringTag`.
    	     *
    	     * **Note:** This function only supports comparing values with tags of
    	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {string} tag The `toStringTag` of the objects to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    	      switch (tag) {
    	        case dataViewTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              (object.byteOffset != other.byteOffset)) {
    	            return false;
    	          }
    	          object = object.buffer;
    	          other = other.buffer;

    	        case arrayBufferTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	            return false;
    	          }
    	          return true;

    	        case boolTag:
    	        case dateTag:
    	        case numberTag:
    	          // Coerce booleans to `1` or `0` and dates to milliseconds.
    	          // Invalid dates are coerced to `NaN`.
    	          return eq(+object, +other);

    	        case errorTag:
    	          return object.name == other.name && object.message == other.message;

    	        case regexpTag:
    	        case stringTag:
    	          // Coerce regexes to strings and treat strings, primitives and objects,
    	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    	          // for more details.
    	          return object == (other + '');

    	        case mapTag:
    	          var convert = mapToArray;

    	        case setTag:
    	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
    	          convert || (convert = setToArray);

    	          if (object.size != other.size && !isPartial) {
    	            return false;
    	          }
    	          // Assume cyclic values are equal.
    	          var stacked = stack.get(object);
    	          if (stacked) {
    	            return stacked == other;
    	          }
    	          bitmask |= COMPARE_UNORDERED_FLAG;

    	          // Recursively compare objects (susceptible to call stack limits).
    	          stack.set(object, other);
    	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
    	          stack['delete'](object);
    	          return result;

    	        case symbolTag:
    	          if (symbolValueOf) {
    	            return symbolValueOf.call(object) == symbolValueOf.call(other);
    	          }
    	      }
    	      return false;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for objects with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          objProps = getAllKeys(object),
    	          objLength = objProps.length,
    	          othProps = getAllKeys(other),
    	          othLength = othProps.length;

    	      if (objLength != othLength && !isPartial) {
    	        return false;
    	      }
    	      var index = objLength;
    	      while (index--) {
    	        var key = objProps[index];
    	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    	          return false;
    	        }
    	      }
    	      // Check that cyclic values are equal.
    	      var objStacked = stack.get(object);
    	      var othStacked = stack.get(other);
    	      if (objStacked && othStacked) {
    	        return objStacked == other && othStacked == object;
    	      }
    	      var result = true;
    	      stack.set(object, other);
    	      stack.set(other, object);

    	      var skipCtor = isPartial;
    	      while (++index < objLength) {
    	        key = objProps[index];
    	        var objValue = object[key],
    	            othValue = other[key];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, objValue, key, other, object, stack)
    	            : customizer(objValue, othValue, key, object, other, stack);
    	        }
    	        // Recursively compare objects (susceptible to call stack limits).
    	        if (!(compared === undefined$1
    	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
    	              : compared
    	            )) {
    	          result = false;
    	          break;
    	        }
    	        skipCtor || (skipCtor = key == 'constructor');
    	      }
    	      if (result && !skipCtor) {
    	        var objCtor = object.constructor,
    	            othCtor = other.constructor;

    	        // Non `Object` object instances with different constructors are not equal.
    	        if (objCtor != othCtor &&
    	            ('constructor' in object && 'constructor' in other) &&
    	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	          result = false;
    	        }
    	      }
    	      stack['delete'](object);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseRest` which flattens the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function flatRest(func) {
    	      return setToString(overRest(func, undefined$1, flatten), func + '');
    	    }

    	    /**
    	     * Creates an array of own enumerable property names and symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeys(object) {
    	      return baseGetAllKeys(object, keys, getSymbols);
    	    }

    	    /**
    	     * Creates an array of own and inherited enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeysIn(object) {
    	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    	    }

    	    /**
    	     * Gets metadata for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {*} Returns the metadata for `func`.
    	     */
    	    var getData = !metaMap ? noop : function(func) {
    	      return metaMap.get(func);
    	    };

    	    /**
    	     * Gets the name of `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {string} Returns the function name.
    	     */
    	    function getFuncName(func) {
    	      var result = (func.name + ''),
    	          array = realNames[result],
    	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

    	      while (length--) {
    	        var data = array[length],
    	            otherFunc = data.func;
    	        if (otherFunc == null || otherFunc == func) {
    	          return data.name;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the argument placeholder value for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to inspect.
    	     * @returns {*} Returns the placeholder value.
    	     */
    	    function getHolder(func) {
    	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
    	      return object.placeholder;
    	    }

    	    /**
    	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
    	     * this function returns the custom method, otherwise it returns `baseIteratee`.
    	     * If arguments are provided, the chosen function is invoked with them and
    	     * its result is returned.
    	     *
    	     * @private
    	     * @param {*} [value] The value to convert to an iteratee.
    	     * @param {number} [arity] The arity of the created iteratee.
    	     * @returns {Function} Returns the chosen function or its result.
    	     */
    	    function getIteratee() {
    	      var result = lodash.iteratee || iteratee;
    	      result = result === iteratee ? baseIteratee : result;
    	      return arguments.length ? result(arguments[0], arguments[1]) : result;
    	    }

    	    /**
    	     * Gets the data for `map`.
    	     *
    	     * @private
    	     * @param {Object} map The map to query.
    	     * @param {string} key The reference key.
    	     * @returns {*} Returns the map data.
    	     */
    	    function getMapData(map, key) {
    	      var data = map.__data__;
    	      return isKeyable(key)
    	        ? data[typeof key == 'string' ? 'string' : 'hash']
    	        : data.map;
    	    }

    	    /**
    	     * Gets the property names, values, and compare flags of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the match data of `object`.
    	     */
    	    function getMatchData(object) {
    	      var result = keys(object),
    	          length = result.length;

    	      while (length--) {
    	        var key = result[length],
    	            value = object[key];

    	        result[length] = [key, value, isStrictComparable(value)];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the native function at `key` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the method to get.
    	     * @returns {*} Returns the function if it's native, else `undefined`.
    	     */
    	    function getNative(object, key) {
    	      var value = getValue(object, key);
    	      return baseIsNative(value) ? value : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the raw `toStringTag`.
    	     */
    	    function getRawTag(value) {
    	      var isOwn = hasOwnProperty.call(value, symToStringTag),
    	          tag = value[symToStringTag];

    	      try {
    	        value[symToStringTag] = undefined$1;
    	        var unmasked = true;
    	      } catch (e) {}

    	      var result = nativeObjectToString.call(value);
    	      if (unmasked) {
    	        if (isOwn) {
    	          value[symToStringTag] = tag;
    	        } else {
    	          delete value[symToStringTag];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array of the own enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    	      if (object == null) {
    	        return [];
    	      }
    	      object = Object(object);
    	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
    	        return propertyIsEnumerable.call(object, symbol);
    	      });
    	    };

    	    /**
    	     * Creates an array of the own and inherited enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    	      var result = [];
    	      while (object) {
    	        arrayPush(result, getSymbols(object));
    	        object = getPrototype(object);
    	      }
    	      return result;
    	    };

    	    /**
    	     * Gets the `toStringTag` of `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    var getTag = baseGetTag;

    	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	        (Map && getTag(new Map) != mapTag) ||
    	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	        (Set && getTag(new Set) != setTag) ||
    	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	      getTag = function(value) {
    	        var result = baseGetTag(value),
    	            Ctor = result == objectTag ? value.constructor : undefined$1,
    	            ctorString = Ctor ? toSource(Ctor) : '';

    	        if (ctorString) {
    	          switch (ctorString) {
    	            case dataViewCtorString: return dataViewTag;
    	            case mapCtorString: return mapTag;
    	            case promiseCtorString: return promiseTag;
    	            case setCtorString: return setTag;
    	            case weakMapCtorString: return weakMapTag;
    	          }
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
    	     *
    	     * @private
    	     * @param {number} start The start of the view.
    	     * @param {number} end The end of the view.
    	     * @param {Array} transforms The transformations to apply to the view.
    	     * @returns {Object} Returns an object containing the `start` and `end`
    	     *  positions of the view.
    	     */
    	    function getView(start, end, transforms) {
    	      var index = -1,
    	          length = transforms.length;

    	      while (++index < length) {
    	        var data = transforms[index],
    	            size = data.size;

    	        switch (data.type) {
    	          case 'drop':      start += size; break;
    	          case 'dropRight': end -= size; break;
    	          case 'take':      end = nativeMin(end, start + size); break;
    	          case 'takeRight': start = nativeMax(start, end - size); break;
    	        }
    	      }
    	      return { 'start': start, 'end': end };
    	    }

    	    /**
    	     * Extracts wrapper details from the `source` body comment.
    	     *
    	     * @private
    	     * @param {string} source The source to inspect.
    	     * @returns {Array} Returns the wrapper details.
    	     */
    	    function getWrapDetails(source) {
    	      var match = source.match(reWrapDetails);
    	      return match ? match[1].split(reSplitDetails) : [];
    	    }

    	    /**
    	     * Checks if `path` exists on `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @param {Function} hasFunc The function to check properties.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     */
    	    function hasPath(object, path, hasFunc) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          result = false;

    	      while (++index < length) {
    	        var key = toKey(path[index]);
    	        if (!(result = object != null && hasFunc(object, key))) {
    	          break;
    	        }
    	        object = object[key];
    	      }
    	      if (result || ++index != length) {
    	        return result;
    	      }
    	      length = object == null ? 0 : object.length;
    	      return !!length && isLength(length) && isIndex(key, length) &&
    	        (isArray(object) || isArguments(object));
    	    }

    	    /**
    	     * Initializes an array clone.
    	     *
    	     * @private
    	     * @param {Array} array The array to clone.
    	     * @returns {Array} Returns the initialized clone.
    	     */
    	    function initCloneArray(array) {
    	      var length = array.length,
    	          result = new array.constructor(length);

    	      // Add properties assigned by `RegExp#exec`.
    	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    	        result.index = array.index;
    	        result.input = array.input;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Initializes an object clone.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneObject(object) {
    	      return (typeof object.constructor == 'function' && !isPrototype(object))
    	        ? baseCreate(getPrototype(object))
    	        : {};
    	    }

    	    /**
    	     * Initializes an object clone based on its `toStringTag`.
    	     *
    	     * **Note:** This function only supports cloning values with tags of
    	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @param {string} tag The `toStringTag` of the object to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneByTag(object, tag, isDeep) {
    	      var Ctor = object.constructor;
    	      switch (tag) {
    	        case arrayBufferTag:
    	          return cloneArrayBuffer(object);

    	        case boolTag:
    	        case dateTag:
    	          return new Ctor(+object);

    	        case dataViewTag:
    	          return cloneDataView(object, isDeep);

    	        case float32Tag: case float64Tag:
    	        case int8Tag: case int16Tag: case int32Tag:
    	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
    	          return cloneTypedArray(object, isDeep);

    	        case mapTag:
    	          return new Ctor;

    	        case numberTag:
    	        case stringTag:
    	          return new Ctor(object);

    	        case regexpTag:
    	          return cloneRegExp(object);

    	        case setTag:
    	          return new Ctor;

    	        case symbolTag:
    	          return cloneSymbol(object);
    	      }
    	    }

    	    /**
    	     * Inserts wrapper `details` in a comment at the top of the `source` body.
    	     *
    	     * @private
    	     * @param {string} source The source to modify.
    	     * @returns {Array} details The details to insert.
    	     * @returns {string} Returns the modified source.
    	     */
    	    function insertWrapDetails(source, details) {
    	      var length = details.length;
    	      if (!length) {
    	        return source;
    	      }
    	      var lastIndex = length - 1;
    	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    	      details = details.join(length > 2 ? ', ' : ' ');
    	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    	    }

    	    /**
    	     * Checks if `value` is a flattenable `arguments` object or array.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
    	     */
    	    function isFlattenable(value) {
    	      return isArray(value) || isArguments(value) ||
    	        !!(spreadableSymbol && value && value[spreadableSymbol]);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like index.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	     */
    	    function isIndex(value, length) {
    	      var type = typeof value;
    	      length = length == null ? MAX_SAFE_INTEGER : length;

    	      return !!length &&
    	        (type == 'number' ||
    	          (type != 'symbol' && reIsUint.test(value))) &&
    	            (value > -1 && value % 1 == 0 && value < length);
    	    }

    	    /**
    	     * Checks if the given arguments are from an iteratee call.
    	     *
    	     * @private
    	     * @param {*} value The potential iteratee value argument.
    	     * @param {*} index The potential iteratee index or key argument.
    	     * @param {*} object The potential iteratee object argument.
    	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
    	     *  else `false`.
    	     */
    	    function isIterateeCall(value, index, object) {
    	      if (!isObject(object)) {
    	        return false;
    	      }
    	      var type = typeof index;
    	      if (type == 'number'
    	            ? (isArrayLike(object) && isIndex(index, object.length))
    	            : (type == 'string' && index in object)
    	          ) {
    	        return eq(object[index], value);
    	      }
    	      return false;
    	    }

    	    /**
    	     * Checks if `value` is a property name and not a property path.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
    	     */
    	    function isKey(value, object) {
    	      if (isArray(value)) {
    	        return false;
    	      }
    	      var type = typeof value;
    	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
    	          value == null || isSymbol(value)) {
    	        return true;
    	      }
    	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    	        (object != null && value in Object(object));
    	    }

    	    /**
    	     * Checks if `value` is suitable for use as unique object key.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	     */
    	    function isKeyable(value) {
    	      var type = typeof value;
    	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	        ? (value !== '__proto__')
    	        : (value === null);
    	    }

    	    /**
    	     * Checks if `func` has a lazy counterpart.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
    	     *  else `false`.
    	     */
    	    function isLaziable(func) {
    	      var funcName = getFuncName(func),
    	          other = lodash[funcName];

    	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    	        return false;
    	      }
    	      if (func === other) {
    	        return true;
    	      }
    	      var data = getData(other);
    	      return !!data && func === data[0];
    	    }

    	    /**
    	     * Checks if `func` has its source masked.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	     */
    	    function isMasked(func) {
    	      return !!maskSrcKey && (maskSrcKey in func);
    	    }

    	    /**
    	     * Checks if `func` is capable of being masked.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
    	     */
    	    var isMaskable = coreJsData ? isFunction : stubFalse;

    	    /**
    	     * Checks if `value` is likely a prototype object.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	     */
    	    function isPrototype(value) {
    	      var Ctor = value && value.constructor,
    	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	      return value === proto;
    	    }

    	    /**
    	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` if suitable for strict
    	     *  equality comparisons, else `false`.
    	     */
    	    function isStrictComparable(value) {
    	      return value === value && !isObject(value);
    	    }

    	    /**
    	     * A specialized version of `matchesProperty` for source values suitable
    	     * for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {string} key The key of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function matchesStrictComparable(key, srcValue) {
    	      return function(object) {
    	        if (object == null) {
    	          return false;
    	        }
    	        return object[key] === srcValue &&
    	          (srcValue !== undefined$1 || (key in Object(object)));
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.memoize` which clears the memoized function's
    	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
    	     *
    	     * @private
    	     * @param {Function} func The function to have its output memoized.
    	     * @returns {Function} Returns the new memoized function.
    	     */
    	    function memoizeCapped(func) {
    	      var result = memoize(func, function(key) {
    	        if (cache.size === MAX_MEMOIZE_SIZE) {
    	          cache.clear();
    	        }
    	        return key;
    	      });

    	      var cache = result.cache;
    	      return result;
    	    }

    	    /**
    	     * Merges the function metadata of `source` into `data`.
    	     *
    	     * Merging metadata reduces the number of wrappers used to invoke a function.
    	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
    	     * may be applied regardless of execution order. Methods like `_.ary` and
    	     * `_.rearg` modify function arguments, making the order in which they are
    	     * executed important, preventing the merging of metadata. However, we make
    	     * an exception for a safe combined case where curried functions have `_.ary`
    	     * and or `_.rearg` applied.
    	     *
    	     * @private
    	     * @param {Array} data The destination metadata.
    	     * @param {Array} source The source metadata.
    	     * @returns {Array} Returns `data`.
    	     */
    	    function mergeData(data, source) {
    	      var bitmask = data[1],
    	          srcBitmask = source[1],
    	          newBitmask = bitmask | srcBitmask,
    	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

    	      var isCombo =
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

    	      // Exit early if metadata can't be merged.
    	      if (!(isCommon || isCombo)) {
    	        return data;
    	      }
    	      // Use source `thisArg` if available.
    	      if (srcBitmask & WRAP_BIND_FLAG) {
    	        data[2] = source[2];
    	        // Set when currying a bound function.
    	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    	      }
    	      // Compose partial arguments.
    	      var value = source[3];
    	      if (value) {
    	        var partials = data[3];
    	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    	      }
    	      // Compose partial right arguments.
    	      value = source[5];
    	      if (value) {
    	        partials = data[5];
    	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    	      }
    	      // Use source `argPos` if available.
    	      value = source[7];
    	      if (value) {
    	        data[7] = value;
    	      }
    	      // Use source `ary` if it's smaller.
    	      if (srcBitmask & WRAP_ARY_FLAG) {
    	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    	      }
    	      // Use source `arity` if one is not provided.
    	      if (data[9] == null) {
    	        data[9] = source[9];
    	      }
    	      // Use source `func` and merge bitmasks.
    	      data[0] = source[0];
    	      data[1] = newBitmask;

    	      return data;
    	    }

    	    /**
    	     * This function is like
    	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * except that it includes inherited enumerable properties.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function nativeKeysIn(object) {
    	      var result = [];
    	      if (object != null) {
    	        for (var key in Object(object)) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a string using `Object.prototype.toString`.
    	     *
    	     * @private
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     */
    	    function objectToString(value) {
    	      return nativeObjectToString.call(value);
    	    }

    	    /**
    	     * A specialized version of `baseRest` which transforms the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @param {Function} transform The rest array transform.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function overRest(func, start, transform) {
    	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
    	      return function() {
    	        var args = arguments,
    	            index = -1,
    	            length = nativeMax(args.length - start, 0),
    	            array = Array(length);

    	        while (++index < length) {
    	          array[index] = args[start + index];
    	        }
    	        index = -1;
    	        var otherArgs = Array(start + 1);
    	        while (++index < start) {
    	          otherArgs[index] = args[index];
    	        }
    	        otherArgs[start] = transform(array);
    	        return apply(func, this, otherArgs);
    	      };
    	    }

    	    /**
    	     * Gets the parent value at `path` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array} path The path to get the parent value of.
    	     * @returns {*} Returns the parent value.
    	     */
    	    function parent(object, path) {
    	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    	    }

    	    /**
    	     * Reorder `array` according to the specified indexes where the element at
    	     * the first index is assigned as the first element, the element at
    	     * the second index is assigned as the second element, and so on.
    	     *
    	     * @private
    	     * @param {Array} array The array to reorder.
    	     * @param {Array} indexes The arranged array indexes.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function reorder(array, indexes) {
    	      var arrLength = array.length,
    	          length = nativeMin(indexes.length, arrLength),
    	          oldArray = copyArray(array);

    	      while (length--) {
    	        var index = indexes[length];
    	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
    	      }
    	      return array;
    	    }

    	    /**
    	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the property to get.
    	     * @returns {*} Returns the property value.
    	     */
    	    function safeGet(object, key) {
    	      if (key === 'constructor' && typeof object[key] === 'function') {
    	        return;
    	      }

    	      if (key == '__proto__') {
    	        return;
    	      }

    	      return object[key];
    	    }

    	    /**
    	     * Sets metadata for `func`.
    	     *
    	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
    	     * period of time, it will trip its breaker and transition to an identity
    	     * function to avoid garbage collection pauses in V8. See
    	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
    	     * for more details.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setData = shortOut(baseSetData);

    	    /**
    	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    var setTimeout = ctxSetTimeout || function(func, wait) {
    	      return root.setTimeout(func, wait);
    	    };

    	    /**
    	     * Sets the `toString` method of `func` to return `string`.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setToString = shortOut(baseSetToString);

    	    /**
    	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
    	     * with wrapper details in a comment at the top of the source body.
    	     *
    	     * @private
    	     * @param {Function} wrapper The function to modify.
    	     * @param {Function} reference The reference function.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Function} Returns `wrapper`.
    	     */
    	    function setWrapToString(wrapper, reference, bitmask) {
    	      var source = (reference + '');
    	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    	    }

    	    /**
    	     * Creates a function that'll short out and invoke `identity` instead
    	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
    	     * milliseconds.
    	     *
    	     * @private
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new shortable function.
    	     */
    	    function shortOut(func) {
    	      var count = 0,
    	          lastCalled = 0;

    	      return function() {
    	        var stamp = nativeNow(),
    	            remaining = HOT_SPAN - (stamp - lastCalled);

    	        lastCalled = stamp;
    	        if (remaining > 0) {
    	          if (++count >= HOT_COUNT) {
    	            return arguments[0];
    	          }
    	        } else {
    	          count = 0;
    	        }
    	        return func.apply(undefined$1, arguments);
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @param {number} [size=array.length] The size of `array`.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function shuffleSelf(array, size) {
    	      var index = -1,
    	          length = array.length,
    	          lastIndex = length - 1;

    	      size = size === undefined$1 ? length : size;
    	      while (++index < size) {
    	        var rand = baseRandom(index, lastIndex),
    	            value = array[rand];

    	        array[rand] = array[index];
    	        array[index] = value;
    	      }
    	      array.length = size;
    	      return array;
    	    }

    	    /**
    	     * Converts `string` to a property path array.
    	     *
    	     * @private
    	     * @param {string} string The string to convert.
    	     * @returns {Array} Returns the property path array.
    	     */
    	    var stringToPath = memoizeCapped(function(string) {
    	      var result = [];
    	      if (string.charCodeAt(0) === 46 /* . */) {
    	        result.push('');
    	      }
    	      string.replace(rePropName, function(match, number, quote, subString) {
    	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    	      });
    	      return result;
    	    });

    	    /**
    	     * Converts `value` to a string key if it's not a string or symbol.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {string|symbol} Returns the key.
    	     */
    	    function toKey(value) {
    	      if (typeof value == 'string' || isSymbol(value)) {
    	        return value;
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * Converts `func` to its source code.
    	     *
    	     * @private
    	     * @param {Function} func The function to convert.
    	     * @returns {string} Returns the source code.
    	     */
    	    function toSource(func) {
    	      if (func != null) {
    	        try {
    	          return funcToString.call(func);
    	        } catch (e) {}
    	        try {
    	          return (func + '');
    	        } catch (e) {}
    	      }
    	      return '';
    	    }

    	    /**
    	     * Updates wrapper `details` based on `bitmask` flags.
    	     *
    	     * @private
    	     * @returns {Array} details The details to modify.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Array} Returns `details`.
    	     */
    	    function updateWrapDetails(details, bitmask) {
    	      arrayEach(wrapFlags, function(pair) {
    	        var value = '_.' + pair[0];
    	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
    	          details.push(value);
    	        }
    	      });
    	      return details.sort();
    	    }

    	    /**
    	     * Creates a clone of `wrapper`.
    	     *
    	     * @private
    	     * @param {Object} wrapper The wrapper to clone.
    	     * @returns {Object} Returns the cloned wrapper.
    	     */
    	    function wrapperClone(wrapper) {
    	      if (wrapper instanceof LazyWrapper) {
    	        return wrapper.clone();
    	      }
    	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    	      result.__actions__ = copyArray(wrapper.__actions__);
    	      result.__index__  = wrapper.__index__;
    	      result.__values__ = wrapper.__values__;
    	      return result;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of elements split into groups the length of `size`.
    	     * If `array` can't be split evenly, the final chunk will be the remaining
    	     * elements.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to process.
    	     * @param {number} [size=1] The length of each chunk
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the new array of chunks.
    	     * @example
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 2);
    	     * // => [['a', 'b'], ['c', 'd']]
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 3);
    	     * // => [['a', 'b', 'c'], ['d']]
    	     */
    	    function chunk(array, size, guard) {
    	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
    	        size = 1;
    	      } else {
    	        size = nativeMax(toInteger(size), 0);
    	      }
    	      var length = array == null ? 0 : array.length;
    	      if (!length || size < 1) {
    	        return [];
    	      }
    	      var index = 0,
    	          resIndex = 0,
    	          result = Array(nativeCeil(length / size));

    	      while (index < length) {
    	        result[resIndex++] = baseSlice(array, index, (index += size));
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array with all falsey values removed. The values `false`, `null`,
    	     * `0`, `""`, `undefined`, and `NaN` are falsey.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to compact.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.compact([0, 1, false, 2, '', 3]);
    	     * // => [1, 2, 3]
    	     */
    	    function compact(array) {
    	      var index = -1,
    	          length = array == null ? 0 : array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index];
    	        if (value) {
    	          result[resIndex++] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates a new array concatenating `array` with any additional arrays
    	     * and/or values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to concatenate.
    	     * @param {...*} [values] The values to concatenate.
    	     * @returns {Array} Returns the new concatenated array.
    	     * @example
    	     *
    	     * var array = [1];
    	     * var other = _.concat(array, 2, [3], [[4]]);
    	     *
    	     * console.log(other);
    	     * // => [1, 2, 3, [4]]
    	     *
    	     * console.log(array);
    	     * // => [1]
    	     */
    	    function concat() {
    	      var length = arguments.length;
    	      if (!length) {
    	        return [];
    	      }
    	      var args = Array(length - 1),
    	          array = arguments[0],
    	          index = length;

    	      while (index--) {
    	        args[index - 1] = arguments[index];
    	      }
    	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    	    }

    	    /**
    	     * Creates an array of `array` values not included in the other given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.without, _.xor
    	     * @example
    	     *
    	     * _.difference([2, 1], [2, 3]);
    	     * // => [1]
    	     */
    	    var difference = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `iteratee` which
    	     * is invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var differenceBy = baseRest(function(array, values) {
    	      var iteratee = last(values);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `comparator`
    	     * which is invoked to compare elements of `array` to `values`. The order and
    	     * references of result values are determined by the first array. The comparator
    	     * is invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     *
    	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }]
    	     */
    	    var differenceWith = baseRest(function(array, values) {
    	      var comparator = last(values);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.drop([1, 2, 3]);
    	     * // => [2, 3]
    	     *
    	     * _.drop([1, 2, 3], 2);
    	     * // => [3]
    	     *
    	     * _.drop([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.drop([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function drop(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.dropRight([1, 2, 3]);
    	     * // => [1, 2]
    	     *
    	     * _.dropRight([1, 2, 3], 2);
    	     * // => [1]
    	     *
    	     * _.dropRight([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.dropRight([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function dropRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the end.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.dropRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropRightWhile(users, ['active', false]);
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropRightWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the beginning.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.dropWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropWhile(users, ['active', false]);
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true)
    	        : [];
    	    }

    	    /**
    	     * Fills elements of `array` with `value` from `start` up to, but not
    	     * including, `end`.
    	     *
    	     * **Note:** This method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Array
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.fill(array, 'a');
    	     * console.log(array);
    	     * // => ['a', 'a', 'a']
    	     *
    	     * _.fill(Array(3), 2);
    	     * // => [2, 2, 2]
    	     *
    	     * _.fill([4, 6, 8, 10], '*', 1, 3);
    	     * // => [4, '*', '*', 10]
    	     */
    	    function fill(array, value, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
    	        start = 0;
    	        end = length;
    	      }
    	      return baseFill(array, value, start, end);
    	    }

    	    /**
    	     * This method is like `_.find` except that it returns the index of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
    	     * // => 0
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findIndex(users, { 'user': 'fred', 'active': false });
    	     * // => 1
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findIndex(users, ['active', false]);
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findIndex(users, 'active');
    	     * // => 2
    	     */
    	    function findIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index);
    	    }

    	    /**
    	     * This method is like `_.findIndex` except that it iterates over elements
    	     * of `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
    	     * // => 2
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
    	     * // => 0
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastIndex(users, ['active', false]);
    	     * // => 2
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastIndex(users, 'active');
    	     * // => 0
    	     */
    	    function findLastIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length - 1;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = fromIndex < 0
    	          ? nativeMax(length + index, 0)
    	          : nativeMin(index, length - 1);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    	    }

    	    /**
    	     * Flattens `array` a single level deep.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flatten([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, [3, [4]], 5]
    	     */
    	    function flatten(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, 1) : [];
    	    }

    	    /**
    	     * Recursively flattens `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, 3, 4, 5]
    	     */
    	    function flattenDeep(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, INFINITY) : [];
    	    }

    	    /**
    	     * Recursively flatten `array` up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * var array = [1, [2, [3, [4]], 5]];
    	     *
    	     * _.flattenDepth(array, 1);
    	     * // => [1, 2, [3, [4]], 5]
    	     *
    	     * _.flattenDepth(array, 2);
    	     * // => [1, 2, 3, [4], 5]
    	     */
    	    function flattenDepth(array, depth) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(array, depth);
    	    }

    	    /**
    	     * The inverse of `_.toPairs`; this method returns an object composed
    	     * from key-value `pairs`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} pairs The key-value pairs.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.fromPairs([['a', 1], ['b', 2]]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function fromPairs(pairs) {
    	      var index = -1,
    	          length = pairs == null ? 0 : pairs.length,
    	          result = {};

    	      while (++index < length) {
    	        var pair = pairs[index];
    	        result[pair[0]] = pair[1];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias first
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the first element of `array`.
    	     * @example
    	     *
    	     * _.head([1, 2, 3]);
    	     * // => 1
    	     *
    	     * _.head([]);
    	     * // => undefined
    	     */
    	    function head(array) {
    	      return (array && array.length) ? array[0] : undefined$1;
    	    }

    	    /**
    	     * Gets the index at which the first occurrence of `value` is found in `array`
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. If `fromIndex` is negative, it's used as the
    	     * offset from the end of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.indexOf([1, 2, 1, 2], 2);
    	     * // => 1
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.indexOf([1, 2, 1, 2], 2, 2);
    	     * // => 3
    	     */
    	    function indexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseIndexOf(array, value, index);
    	    }

    	    /**
    	     * Gets all but the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.initial([1, 2, 3]);
    	     * // => [1, 2]
    	     */
    	    function initial(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 0, -1) : [];
    	    }

    	    /**
    	     * Creates an array of unique values that are included in all given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersection([2, 1], [2, 3]);
    	     * // => [2]
    	     */
    	    var intersection = baseRest(function(arrays) {
    	      var mapped = arrayMap(arrays, castArrayLikeObject);
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped)
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `iteratee`
    	     * which is invoked for each element of each `arrays` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [2.1]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }]
    	     */
    	    var intersectionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      if (iteratee === last(mapped)) {
    	        iteratee = undefined$1;
    	      } else {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `comparator`
    	     * which is invoked to compare elements of `arrays`. The order and references
    	     * of result values are determined by the first array. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.intersectionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }]
    	     */
    	    var intersectionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      if (comparator) {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Converts all elements in `array` into a string separated by `separator`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to convert.
    	     * @param {string} [separator=','] The element separator.
    	     * @returns {string} Returns the joined string.
    	     * @example
    	     *
    	     * _.join(['a', 'b', 'c'], '~');
    	     * // => 'a~b~c'
    	     */
    	    function join(array, separator) {
    	      return array == null ? '' : nativeJoin.call(array, separator);
    	    }

    	    /**
    	     * Gets the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the last element of `array`.
    	     * @example
    	     *
    	     * _.last([1, 2, 3]);
    	     * // => 3
    	     */
    	    function last(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? array[length - 1] : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it iterates over elements of
    	     * `array` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.lastIndexOf([1, 2, 1, 2], 2);
    	     * // => 3
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
    	     * // => 1
    	     */
    	    function lastIndexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    	      }
    	      return value === value
    	        ? strictLastIndexOf(array, value, index)
    	        : baseFindIndex(array, baseIsNaN, index, true);
    	    }

    	    /**
    	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
    	     * element from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.11.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=0] The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     *
    	     * _.nth(array, 1);
    	     * // => 'b'
    	     *
    	     * _.nth(array, -2);
    	     * // => 'c';
    	     */
    	    function nth(array, n) {
    	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    	    }

    	    /**
    	     * Removes all given values from `array` using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
    	     * to remove elements from an array by predicate.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...*} [values] The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pull(array, 'a', 'c');
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    var pull = baseRest(pullAll);

    	    /**
    	     * This method is like `_.pull` except that it accepts an array of values to remove.
    	     *
    	     * **Note:** Unlike `_.difference`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pullAll(array, ['a', 'c']);
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    function pullAll(array, values) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values)
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
    	     * invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The iteratee is invoked with one argument: (value).
    	     *
    	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
    	     *
    	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
    	     * console.log(array);
    	     * // => [{ 'x': 2 }]
    	     */
    	    function pullAllBy(array, values, iteratee) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, getIteratee(iteratee, 2))
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array` to `values`. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
    	     *
    	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
    	     * console.log(array);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
    	     */
    	    function pullAllWith(array, values, comparator) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, undefined$1, comparator)
    	        : array;
    	    }

    	    /**
    	     * Removes elements from `array` corresponding to `indexes` and returns an
    	     * array of removed elements.
    	     *
    	     * **Note:** Unlike `_.at`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     * var pulled = _.pullAt(array, [1, 3]);
    	     *
    	     * console.log(array);
    	     * // => ['a', 'c']
    	     *
    	     * console.log(pulled);
    	     * // => ['b', 'd']
    	     */
    	    var pullAt = flatRest(function(array, indexes) {
    	      var length = array == null ? 0 : array.length,
    	          result = baseAt(array, indexes);

    	      basePullAt(array, arrayMap(indexes, function(index) {
    	        return isIndex(index, length) ? +index : index;
    	      }).sort(compareAscending));

    	      return result;
    	    });

    	    /**
    	     * Removes all elements from `array` that `predicate` returns truthy for
    	     * and returns an array of the removed elements. The predicate is invoked
    	     * with three arguments: (value, index, array).
    	     *
    	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
    	     * to pull elements from an array by value.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = [1, 2, 3, 4];
    	     * var evens = _.remove(array, function(n) {
    	     *   return n % 2 == 0;
    	     * });
    	     *
    	     * console.log(array);
    	     * // => [1, 3]
    	     *
    	     * console.log(evens);
    	     * // => [2, 4]
    	     */
    	    function remove(array, predicate) {
    	      var result = [];
    	      if (!(array && array.length)) {
    	        return result;
    	      }
    	      var index = -1,
    	          indexes = [],
    	          length = array.length;

    	      predicate = getIteratee(predicate, 3);
    	      while (++index < length) {
    	        var value = array[index];
    	        if (predicate(value, index, array)) {
    	          result.push(value);
    	          indexes.push(index);
    	        }
    	      }
    	      basePullAt(array, indexes);
    	      return result;
    	    }

    	    /**
    	     * Reverses `array` so that the first element becomes the last, the second
    	     * element becomes the second to last, and so on.
    	     *
    	     * **Note:** This method mutates `array` and is based on
    	     * [`Array#reverse`](https://mdn.io/Array/reverse).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.reverse(array);
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function reverse(array) {
    	      return array == null ? array : nativeReverse.call(array);
    	    }

    	    /**
    	     * Creates a slice of `array` from `start` up to, but not including, `end`.
    	     *
    	     * **Note:** This method is used instead of
    	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
    	     * returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function slice(array, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    	        start = 0;
    	        end = length;
    	      }
    	      else {
    	        start = start == null ? 0 : toInteger(start);
    	        end = end === undefined$1 ? length : toInteger(end);
    	      }
    	      return baseSlice(array, start, end);
    	    }

    	    /**
    	     * Uses a binary search to determine the lowest index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedIndex([30, 50], 40);
    	     * // => 1
    	     */
    	    function sortedIndex(array, value) {
    	      return baseSortedIndex(array, value);
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 0
    	     */
    	    function sortedIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 1
    	     */
    	    function sortedIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value);
    	        if (index < length && eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it returns the highest
    	     * index at which `value` should be inserted into `array` in order to
    	     * maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
    	     * // => 4
    	     */
    	    function sortedLastIndex(array, value) {
    	      return baseSortedIndex(array, value, true);
    	    }

    	    /**
    	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 1
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 1
    	     */
    	    function sortedLastIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    	    }

    	    /**
    	     * This method is like `_.lastIndexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 3
    	     */
    	    function sortedLastIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value, true) - 1;
    	        if (eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniq([1, 1, 2]);
    	     * // => [1, 2]
    	     */
    	    function sortedUniq(array) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array)
    	        : [];
    	    }

    	    /**
    	     * This method is like `_.uniqBy` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
    	     * // => [1.1, 2.3]
    	     */
    	    function sortedUniqBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
    	        : [];
    	    }

    	    /**
    	     * Gets all but the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.tail([1, 2, 3]);
    	     * // => [2, 3]
    	     */
    	    function tail(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 1, length) : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.take([1, 2, 3]);
    	     * // => [1]
    	     *
    	     * _.take([1, 2, 3], 2);
    	     * // => [1, 2]
    	     *
    	     * _.take([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.take([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function take(array, n, guard) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.takeRight([1, 2, 3]);
    	     * // => [3]
    	     *
    	     * _.takeRight([1, 2, 3], 2);
    	     * // => [2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function takeRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the end. Elements are
    	     * taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.takeRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeRightWhile(users, ['active', false]);
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeRightWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the beginning. Elements
    	     * are taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.takeWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeWhile(users, ['active', false]);
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3))
    	        : [];
    	    }

    	    /**
    	     * Creates an array of unique values, in order, from all given arrays using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.union([2], [1, 2]);
    	     * // => [2, 1]
    	     */
    	    var union = baseRest(function(arrays) {
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which uniqueness is computed. Result values are chosen from the first
    	     * array in which the value occurs. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    var unionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `comparator` which
    	     * is invoked to compare elements of `arrays`. Result values are chosen from
    	     * the first array in which the value occurs. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.unionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var unionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates a duplicate-free version of an array, using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons, in which only the first occurrence of each element
    	     * is kept. The order of result values is determined by the order they occur
    	     * in the array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniq([2, 1, 2]);
    	     * // => [2, 1]
    	     */
    	    function uniq(array) {
    	      return (array && array.length) ? baseUniq(array) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * uniqueness is computed. The order of result values is determined by the
    	     * order they occur in the array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    function uniqBy(array, iteratee) {
    	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array`. The order of result values is
    	     * determined by the order they occur in the array.The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.uniqWith(objects, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
    	     */
    	    function uniqWith(array, comparator) {
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts an array of grouped
    	     * elements and creates an array regrouping the elements to their pre-zip
    	     * configuration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.2.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     *
    	     * _.unzip(zipped);
    	     * // => [['a', 'b'], [1, 2], [true, false]]
    	     */
    	    function unzip(array) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var length = 0;
    	      array = arrayFilter(array, function(group) {
    	        if (isArrayLikeObject(group)) {
    	          length = nativeMax(group.length, length);
    	          return true;
    	        }
    	      });
    	      return baseTimes(length, function(index) {
    	        return arrayMap(array, baseProperty(index));
    	      });
    	    }

    	    /**
    	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
    	     * how regrouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  regrouped values.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
    	     * // => [[1, 10, 100], [2, 20, 200]]
    	     *
    	     * _.unzipWith(zipped, _.add);
    	     * // => [3, 30, 300]
    	     */
    	    function unzipWith(array, iteratee) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var result = unzip(array);
    	      if (iteratee == null) {
    	        return result;
    	      }
    	      return arrayMap(result, function(group) {
    	        return apply(iteratee, undefined$1, group);
    	      });
    	    }

    	    /**
    	     * Creates an array excluding all given values using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.pull`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...*} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.xor
    	     * @example
    	     *
    	     * _.without([2, 1, 2, 3], 1, 2);
    	     * // => [3]
    	     */
    	    var without = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, values)
    	        : [];
    	    });

    	    /**
    	     * Creates an array of unique values that is the
    	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
    	     * of the given arrays. The order of result values is determined by the order
    	     * they occur in the arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.without
    	     * @example
    	     *
    	     * _.xor([2, 1], [2, 3]);
    	     * // => [1, 3]
    	     */
    	    var xor = baseRest(function(arrays) {
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which by which they're compared. The order of result values is determined
    	     * by the order they occur in the arrays. The iteratee is invoked with one
    	     * argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2, 3.4]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var xorBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `comparator` which is
    	     * invoked to compare elements of `arrays`. The order of result values is
    	     * determined by the order they occur in the arrays. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.xorWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var xorWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates an array of grouped elements, the first of which contains the
    	     * first elements of the given arrays, the second of which contains the
    	     * second elements of the given arrays, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     */
    	    var zip = baseRest(unzip);

    	    /**
    	     * This method is like `_.fromPairs` except that it accepts two arrays,
    	     * one of property identifiers and one of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.4.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObject(['a', 'b'], [1, 2]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function zipObject(props, values) {
    	      return baseZipObject(props || [], values || [], assignValue);
    	    }

    	    /**
    	     * This method is like `_.zipObject` except that it supports property paths.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
    	     */
    	    function zipObjectDeep(props, values) {
    	      return baseZipObject(props || [], values || [], baseSet);
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts `iteratee` to specify
    	     * how grouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  grouped values.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
    	     *   return a + b + c;
    	     * });
    	     * // => [111, 222]
    	     */
    	    var zipWith = baseRest(function(arrays) {
    	      var length = arrays.length,
    	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

    	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
    	      return unzipWith(arrays, iteratee);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
    	     * chain sequences enabled. The result of such sequences must be unwrapped
    	     * with `_#value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Seq
    	     * @param {*} value The value to wrap.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36 },
    	     *   { 'user': 'fred',    'age': 40 },
    	     *   { 'user': 'pebbles', 'age': 1 }
    	     * ];
    	     *
    	     * var youngest = _
    	     *   .chain(users)
    	     *   .sortBy('age')
    	     *   .map(function(o) {
    	     *     return o.user + ' is ' + o.age;
    	     *   })
    	     *   .head()
    	     *   .value();
    	     * // => 'pebbles is 1'
    	     */
    	    function chain(value) {
    	      var result = lodash(value);
    	      result.__chain__ = true;
    	      return result;
    	    }

    	    /**
    	     * This method invokes `interceptor` and returns `value`. The interceptor
    	     * is invoked with one argument; (value). The purpose of this method is to
    	     * "tap into" a method chain sequence in order to modify intermediate results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * _([1, 2, 3])
    	     *  .tap(function(array) {
    	     *    // Mutate input array.
    	     *    array.pop();
    	     *  })
    	     *  .reverse()
    	     *  .value();
    	     * // => [2, 1]
    	     */
    	    function tap(value, interceptor) {
    	      interceptor(value);
    	      return value;
    	    }

    	    /**
    	     * This method is like `_.tap` except that it returns the result of `interceptor`.
    	     * The purpose of this method is to "pass thru" values replacing intermediate
    	     * results in a method chain sequence.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns the result of `interceptor`.
    	     * @example
    	     *
    	     * _('  abc  ')
    	     *  .chain()
    	     *  .trim()
    	     *  .thru(function(value) {
    	     *    return [value];
    	     *  })
    	     *  .value();
    	     * // => ['abc']
    	     */
    	    function thru(value, interceptor) {
    	      return interceptor(value);
    	    }

    	    /**
    	     * This method is the wrapper version of `_.at`.
    	     *
    	     * @name at
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Seq
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _(object).at(['a[0].b.c', 'a[1]']).value();
    	     * // => [3, 4]
    	     */
    	    var wrapperAt = flatRest(function(paths) {
    	      var length = paths.length,
    	          start = length ? paths[0] : 0,
    	          value = this.__wrapped__,
    	          interceptor = function(object) { return baseAt(object, paths); };

    	      if (length > 1 || this.__actions__.length ||
    	          !(value instanceof LazyWrapper) || !isIndex(start)) {
    	        return this.thru(interceptor);
    	      }
    	      value = value.slice(start, +start + (length ? 1 : 0));
    	      value.__actions__.push({
    	        'func': thru,
    	        'args': [interceptor],
    	        'thisArg': undefined$1
    	      });
    	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
    	        if (length && !array.length) {
    	          array.push(undefined$1);
    	        }
    	        return array;
    	      });
    	    });

    	    /**
    	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
    	     *
    	     * @name chain
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 }
    	     * ];
    	     *
    	     * // A sequence without explicit chaining.
    	     * _(users).head();
    	     * // => { 'user': 'barney', 'age': 36 }
    	     *
    	     * // A sequence with explicit chaining.
    	     * _(users)
    	     *   .chain()
    	     *   .head()
    	     *   .pick('user')
    	     *   .value();
    	     * // => { 'user': 'barney' }
    	     */
    	    function wrapperChain() {
    	      return chain(this);
    	    }

    	    /**
    	     * Executes the chain sequence and returns the wrapped result.
    	     *
    	     * @name commit
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2];
    	     * var wrapped = _(array).push(3);
    	     *
    	     * console.log(array);
    	     * // => [1, 2]
    	     *
    	     * wrapped = wrapped.commit();
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     *
    	     * wrapped.last();
    	     * // => 3
    	     *
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperCommit() {
    	      return new LodashWrapper(this.value(), this.__chain__);
    	    }

    	    /**
    	     * Gets the next value on a wrapped object following the
    	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
    	     *
    	     * @name next
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the next iterator value.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 1 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 2 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': true, 'value': undefined }
    	     */
    	    function wrapperNext() {
    	      if (this.__values__ === undefined$1) {
    	        this.__values__ = toArray(this.value());
    	      }
    	      var done = this.__index__ >= this.__values__.length,
    	          value = done ? undefined$1 : this.__values__[this.__index__++];

    	      return { 'done': done, 'value': value };
    	    }

    	    /**
    	     * Enables the wrapper to be iterable.
    	     *
    	     * @name Symbol.iterator
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the wrapper object.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped[Symbol.iterator]() === wrapped;
    	     * // => true
    	     *
    	     * Array.from(wrapped);
    	     * // => [1, 2]
    	     */
    	    function wrapperToIterator() {
    	      return this;
    	    }

    	    /**
    	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
    	     *
    	     * @name plant
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @param {*} value The value to plant.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2]).map(square);
    	     * var other = wrapped.plant([3, 4]);
    	     *
    	     * other.value();
    	     * // => [9, 16]
    	     *
    	     * wrapped.value();
    	     * // => [1, 4]
    	     */
    	    function wrapperPlant(value) {
    	      var result,
    	          parent = this;

    	      while (parent instanceof baseLodash) {
    	        var clone = wrapperClone(parent);
    	        clone.__index__ = 0;
    	        clone.__values__ = undefined$1;
    	        if (result) {
    	          previous.__wrapped__ = clone;
    	        } else {
    	          result = clone;
    	        }
    	        var previous = clone;
    	        parent = parent.__wrapped__;
    	      }
    	      previous.__wrapped__ = value;
    	      return result;
    	    }

    	    /**
    	     * This method is the wrapper version of `_.reverse`.
    	     *
    	     * **Note:** This method mutates the wrapped array.
    	     *
    	     * @name reverse
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _(array).reverse().value()
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function wrapperReverse() {
    	      var value = this.__wrapped__;
    	      if (value instanceof LazyWrapper) {
    	        var wrapped = value;
    	        if (this.__actions__.length) {
    	          wrapped = new LazyWrapper(this);
    	        }
    	        wrapped = wrapped.reverse();
    	        wrapped.__actions__.push({
    	          'func': thru,
    	          'args': [reverse],
    	          'thisArg': undefined$1
    	        });
    	        return new LodashWrapper(wrapped, this.__chain__);
    	      }
    	      return this.thru(reverse);
    	    }

    	    /**
    	     * Executes the chain sequence to resolve the unwrapped value.
    	     *
    	     * @name value
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias toJSON, valueOf
    	     * @category Seq
    	     * @returns {*} Returns the resolved unwrapped value.
    	     * @example
    	     *
    	     * _([1, 2, 3]).value();
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperValue() {
    	      return baseWrapperValue(this.__wrapped__, this.__actions__);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the number of times the key was returned by `iteratee`. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': 1, '6': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.countBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': 2, '5': 1 }
    	     */
    	    var countBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        ++result[key];
    	      } else {
    	        baseAssignValue(result, key, 1);
    	      }
    	    });

    	    /**
    	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
    	     * Iteration is stopped once `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * **Note:** This method returns `true` for
    	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
    	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
    	     * elements of empty collections.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.every([true, 1, null, 'yes'], Boolean);
    	     * // => false
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.every(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.every(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.every(users, 'active');
    	     * // => false
    	     */
    	    function every(collection, predicate, guard) {
    	      var func = isArray(collection) ? arrayEvery : baseEvery;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning an array of all elements
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * **Note:** Unlike `_.remove`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.reject
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * _.filter(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, { 'age': 36, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.filter(users, 'active');
    	     * // => objects for ['barney']
    	     *
    	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
    	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
    	     * // => objects for ['fred', 'barney']
    	     */
    	    function filter(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning the first element
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': true },
    	     *   { 'user': 'fred',    'age': 40, 'active': false },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
    	     * ];
    	     *
    	     * _.find(users, function(o) { return o.age < 40; });
    	     * // => object for 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.find(users, { 'age': 1, 'active': true });
    	     * // => object for 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.find(users, ['active', false]);
    	     * // => object for 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.find(users, 'active');
    	     * // => object for 'barney'
    	     */
    	    var find = createFind(findIndex);

    	    /**
    	     * This method is like `_.find` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=collection.length-1] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * _.findLast([1, 2, 3, 4], function(n) {
    	     *   return n % 2 == 1;
    	     * });
    	     * // => 3
    	     */
    	    var findLast = createFind(findLastIndex);

    	    /**
    	     * Creates a flattened array of values by running each element in `collection`
    	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
    	     * with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [n, n];
    	     * }
    	     *
    	     * _.flatMap([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMap(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), 1);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDeep([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMapDeep(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), INFINITY);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDepth([1, 2], duplicate, 2);
    	     * // => [[1, 1], [2, 2]]
    	     */
    	    function flatMapDepth(collection, iteratee, depth) {
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(map(collection, iteratee), depth);
    	    }

    	    /**
    	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
    	     * The iteratee is invoked with three arguments: (value, index|key, collection).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * **Note:** As with other "Collections" methods, objects with a "length"
    	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
    	     * or `_.forOwn` for object iteration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias each
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEachRight
    	     * @example
    	     *
    	     * _.forEach([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `1` then `2`.
    	     *
    	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forEach(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEach : baseEach;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forEach` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @alias eachRight
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEach
    	     * @example
    	     *
    	     * _.forEachRight([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `2` then `1`.
    	     */
    	    function forEachRight(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The order of grouped values
    	     * is determined by the order they occur in `collection`. The corresponding
    	     * value of each key is an array of elements responsible for generating the
    	     * key. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': [4.2], '6': [6.1, 6.3] }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.groupBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': ['one', 'two'], '5': ['three'] }
    	     */
    	    var groupBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        result[key].push(value);
    	      } else {
    	        baseAssignValue(result, key, [value]);
    	      }
    	    });

    	    /**
    	     * Checks if `value` is in `collection`. If `collection` is a string, it's
    	     * checked for a substring of `value`, otherwise
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
    	     * the offset from the end of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
    	     * @example
    	     *
    	     * _.includes([1, 2, 3], 1);
    	     * // => true
    	     *
    	     * _.includes([1, 2, 3], 1, 2);
    	     * // => false
    	     *
    	     * _.includes({ 'a': 1, 'b': 2 }, 1);
    	     * // => true
    	     *
    	     * _.includes('abcd', 'bc');
    	     * // => true
    	     */
    	    function includes(collection, value, fromIndex, guard) {
    	      collection = isArrayLike(collection) ? collection : values(collection);
    	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    	      var length = collection.length;
    	      if (fromIndex < 0) {
    	        fromIndex = nativeMax(length + fromIndex, 0);
    	      }
    	      return isString(collection)
    	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    	    }

    	    /**
    	     * Invokes the method at `path` of each element in `collection`, returning
    	     * an array of the results of each invoked method. Any additional arguments
    	     * are provided to each invoked method. If `path` is a function, it's invoked
    	     * for, and `this` bound to, each element in `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|string} path The path of the method to invoke or
    	     *  the function invoked per iteration.
    	     * @param {...*} [args] The arguments to invoke each method with.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
    	     * // => [[1, 5, 7], [1, 2, 3]]
    	     *
    	     * _.invokeMap([123, 456], String.prototype.split, '');
    	     * // => [['1', '2', '3'], ['4', '5', '6']]
    	     */
    	    var invokeMap = baseRest(function(collection, path, args) {
    	      var index = -1,
    	          isFunc = typeof path == 'function',
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value) {
    	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
    	      });
    	      return result;
    	    });

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the last element responsible for generating the key. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * var array = [
    	     *   { 'dir': 'left', 'code': 97 },
    	     *   { 'dir': 'right', 'code': 100 }
    	     * ];
    	     *
    	     * _.keyBy(array, function(o) {
    	     *   return String.fromCharCode(o.code);
    	     * });
    	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
    	     *
    	     * _.keyBy(array, 'dir');
    	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
    	     */
    	    var keyBy = createAggregator(function(result, value, key) {
    	      baseAssignValue(result, key, value);
    	    });

    	    /**
    	     * Creates an array of values by running each element in `collection` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
    	     *
    	     * The guarded methods are:
    	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
    	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
    	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
    	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * _.map([4, 8], square);
    	     * // => [16, 64]
    	     *
    	     * _.map({ 'a': 4, 'b': 8 }, square);
    	     * // => [16, 64] (iteration order is not guaranteed)
    	     *
    	     * var users = [
    	     *   { 'user': 'barney' },
    	     *   { 'user': 'fred' }
    	     * ];
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, 'user');
    	     * // => ['barney', 'fred']
    	     */
    	    function map(collection, iteratee) {
    	      var func = isArray(collection) ? arrayMap : baseMap;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.sortBy` except that it allows specifying the sort
    	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
    	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
    	     * descending or "asc" for ascending sort order of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @param {string[]} [orders] The sort orders of `iteratees`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 34 },
    	     *   { 'user': 'fred',   'age': 40 },
    	     *   { 'user': 'barney', 'age': 36 }
    	     * ];
    	     *
    	     * // Sort by `user` in ascending order and by `age` in descending order.
    	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     */
    	    function orderBy(collection, iteratees, orders, guard) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      if (!isArray(iteratees)) {
    	        iteratees = iteratees == null ? [] : [iteratees];
    	      }
    	      orders = guard ? undefined$1 : orders;
    	      if (!isArray(orders)) {
    	        orders = orders == null ? [] : [orders];
    	      }
    	      return baseOrderBy(collection, iteratees, orders);
    	    }

    	    /**
    	     * Creates an array of elements split into two groups, the first of which
    	     * contains elements `predicate` returns truthy for, the second of which
    	     * contains elements `predicate` returns falsey for. The predicate is
    	     * invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of grouped elements.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': false },
    	     *   { 'user': 'fred',    'age': 40, 'active': true },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
    	     * ];
    	     *
    	     * _.partition(users, function(o) { return o.active; });
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.partition(users, { 'age': 1, 'active': false });
    	     * // => objects for [['pebbles'], ['barney', 'fred']]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.partition(users, ['active', false]);
    	     * // => objects for [['barney', 'pebbles'], ['fred']]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.partition(users, 'active');
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     */
    	    var partition = createAggregator(function(result, value, key) {
    	      result[key ? 0 : 1].push(value);
    	    }, function() { return [[], []]; });

    	    /**
    	     * Reduces `collection` to a value which is the accumulated result of running
    	     * each element in `collection` thru `iteratee`, where each successive
    	     * invocation is supplied the return value of the previous. If `accumulator`
    	     * is not given, the first element of `collection` is used as the initial
    	     * value. The iteratee is invoked with four arguments:
    	     * (accumulator, value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
    	     *
    	     * The guarded methods are:
    	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
    	     * and `sortBy`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduceRight
    	     * @example
    	     *
    	     * _.reduce([1, 2], function(sum, n) {
    	     *   return sum + n;
    	     * }, 0);
    	     * // => 3
    	     *
    	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     *   return result;
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
    	     */
    	    function reduce(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduce : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    	    }

    	    /**
    	     * This method is like `_.reduce` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduce
    	     * @example
    	     *
    	     * var array = [[0, 1], [2, 3], [4, 5]];
    	     *
    	     * _.reduceRight(array, function(flattened, other) {
    	     *   return flattened.concat(other);
    	     * }, []);
    	     * // => [4, 5, 2, 3, 0, 1]
    	     */
    	    function reduceRight(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    	    }

    	    /**
    	     * The opposite of `_.filter`; this method returns the elements of `collection`
    	     * that `predicate` does **not** return truthy for.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.filter
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': true }
    	     * ];
    	     *
    	     * _.reject(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.reject(users, { 'age': 40, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.reject(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.reject(users, 'active');
    	     * // => objects for ['barney']
    	     */
    	    function reject(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, negate(getIteratee(predicate, 3)));
    	    }

    	    /**
    	     * Gets a random element from `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     * @example
    	     *
    	     * _.sample([1, 2, 3, 4]);
    	     * // => 2
    	     */
    	    function sample(collection) {
    	      var func = isArray(collection) ? arraySample : baseSample;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets `n` random elements at unique keys from `collection` up to the
    	     * size of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} [n=1] The number of elements to sample.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the random elements.
    	     * @example
    	     *
    	     * _.sampleSize([1, 2, 3], 2);
    	     * // => [3, 1]
    	     *
    	     * _.sampleSize([1, 2, 3], 4);
    	     * // => [2, 3, 1]
    	     */
    	    function sampleSize(collection, n, guard) {
    	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
    	      return func(collection, n);
    	    }

    	    /**
    	     * Creates an array of shuffled values, using a version of the
    	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     * @example
    	     *
    	     * _.shuffle([1, 2, 3, 4]);
    	     * // => [4, 1, 3, 2]
    	     */
    	    function shuffle(collection) {
    	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets the size of `collection` by returning its length for array-like
    	     * values or the number of own enumerable string keyed properties for objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @returns {number} Returns the collection size.
    	     * @example
    	     *
    	     * _.size([1, 2, 3]);
    	     * // => 3
    	     *
    	     * _.size({ 'a': 1, 'b': 2 });
    	     * // => 2
    	     *
    	     * _.size('pebbles');
    	     * // => 7
    	     */
    	    function size(collection) {
    	      if (collection == null) {
    	        return 0;
    	      }
    	      if (isArrayLike(collection)) {
    	        return isString(collection) ? stringSize(collection) : collection.length;
    	      }
    	      var tag = getTag(collection);
    	      if (tag == mapTag || tag == setTag) {
    	        return collection.size;
    	      }
    	      return baseKeys(collection).length;
    	    }

    	    /**
    	     * Checks if `predicate` returns truthy for **any** element of `collection`.
    	     * Iteration is stopped once `predicate` returns truthy. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.some([null, 0, 'yes', false], Boolean);
    	     * // => true
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'active': true },
    	     *   { 'user': 'fred',   'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.some(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.some(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.some(users, 'active');
    	     * // => true
    	     */
    	    function some(collection, predicate, guard) {
    	      var func = isArray(collection) ? arraySome : baseSome;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Creates an array of elements, sorted in ascending order by the results of
    	     * running each element in a collection thru each iteratee. This method
    	     * performs a stable sort, that is, it preserves the original sort order of
    	     * equal elements. The iteratees are invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 30 },
    	     *   { 'user': 'barney', 'age': 34 }
    	     * ];
    	     *
    	     * _.sortBy(users, [function(o) { return o.user; }]);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
    	     *
    	     * _.sortBy(users, ['user', 'age']);
    	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
    	     */
    	    var sortBy = baseRest(function(collection, iteratees) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      var length = iteratees.length;
    	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    	        iteratees = [];
    	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    	        iteratees = [iteratees[0]];
    	      }
    	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Gets the timestamp of the number of milliseconds that have elapsed since
    	     * the Unix epoch (1 January 1970 00:00:00 UTC).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Date
    	     * @returns {number} Returns the timestamp.
    	     * @example
    	     *
    	     * _.defer(function(stamp) {
    	     *   console.log(_.now() - stamp);
    	     * }, _.now());
    	     * // => Logs the number of milliseconds it took for the deferred invocation.
    	     */
    	    var now = ctxNow || function() {
    	      return root.Date.now();
    	    };

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The opposite of `_.before`; this method creates a function that invokes
    	     * `func` once it's called `n` or more times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {number} n The number of calls before `func` is invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var saves = ['profile', 'settings'];
    	     *
    	     * var done = _.after(saves.length, function() {
    	     *   console.log('done saving!');
    	     * });
    	     *
    	     * _.forEach(saves, function(type) {
    	     *   asyncSave({ 'type': type, 'complete': done });
    	     * });
    	     * // => Logs 'done saving!' after the two async saves have completed.
    	     */
    	    function after(n, func) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n < 1) {
    	          return func.apply(this, arguments);
    	        }
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with up to `n` arguments,
    	     * ignoring any additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @param {number} [n=func.length] The arity cap.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
    	     * // => [6, 8, 10]
    	     */
    	    function ary(func, n, guard) {
    	      n = guard ? undefined$1 : n;
    	      n = (func && n == null) ? func.length : n;
    	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with the `this` binding and arguments
    	     * of the created function, while it's called less than `n` times. Subsequent
    	     * calls to the created function return the result of the last `func` invocation.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {number} n The number of calls at which `func` is no longer invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * jQuery(element).on('click', _.before(5, addContactToList));
    	     * // => Allows adding up to 4 contacts to the list.
    	     */
    	    function before(n, func) {
    	      var result;
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n > 0) {
    	          result = func.apply(this, arguments);
    	        }
    	        if (n <= 1) {
    	          func = undefined$1;
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
    	     * and `partials` prepended to the arguments it receives.
    	     *
    	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
    	     * property of bound functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to bind.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * function greet(greeting, punctuation) {
    	     *   return greeting + ' ' + this.user + punctuation;
    	     * }
    	     *
    	     * var object = { 'user': 'fred' };
    	     *
    	     * var bound = _.bind(greet, object, 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bind(greet, object, _, '!');
    	     * bound('hi');
    	     * // => 'hi fred!'
    	     */
    	    var bind = baseRest(function(func, thisArg, partials) {
    	      var bitmask = WRAP_BIND_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bind));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(func, bitmask, thisArg, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes the method at `object[key]` with `partials`
    	     * prepended to the arguments it receives.
    	     *
    	     * This method differs from `_.bind` by allowing bound functions to reference
    	     * methods that may be redefined or don't yet exist. See
    	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
    	     * for more details.
    	     *
    	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Function
    	     * @param {Object} object The object to invoke the method on.
    	     * @param {string} key The key of the method.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * var object = {
    	     *   'user': 'fred',
    	     *   'greet': function(greeting, punctuation) {
    	     *     return greeting + ' ' + this.user + punctuation;
    	     *   }
    	     * };
    	     *
    	     * var bound = _.bindKey(object, 'greet', 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * object.greet = function(greeting, punctuation) {
    	     *   return greeting + 'ya ' + this.user + punctuation;
    	     * };
    	     *
    	     * bound('!');
    	     * // => 'hiya fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bindKey(object, 'greet', _, '!');
    	     * bound('hi');
    	     * // => 'hiya fred!'
    	     */
    	    var bindKey = baseRest(function(object, key, partials) {
    	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bindKey));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(key, bitmask, object, partials, holders);
    	    });

    	    /**
    	     * Creates a function that accepts arguments of `func` and either invokes
    	     * `func` returning its result, if at least `arity` number of arguments have
    	     * been provided, or returns a function that accepts the remaining `func`
    	     * arguments, and so on. The arity of `func` may be specified if `func.length`
    	     * is not sufficient.
    	     *
    	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curry(abc);
    	     *
    	     * curried(1)(2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(1)(_, 3)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curry(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curry.placeholder;
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.curry` except that arguments are applied to `func`
    	     * in the manner of `_.partialRight` instead of `_.partial`.
    	     *
    	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curryRight(abc);
    	     *
    	     * curried(3)(2)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(2, 3)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(3)(1, _)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curryRight(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curryRight.placeholder;
    	      return result;
    	    }

    	    /**
    	     * Creates a debounced function that delays invoking `func` until after `wait`
    	     * milliseconds have elapsed since the last time the debounced function was
    	     * invoked. The debounced function comes with a `cancel` method to cancel
    	     * delayed `func` invocations and a `flush` method to immediately invoke them.
    	     * Provide `options` to indicate whether `func` should be invoked on the
    	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
    	     * with the last arguments provided to the debounced function. Subsequent
    	     * calls to the debounced function return the result of the last `func`
    	     * invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the debounced function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.debounce` and `_.throttle`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to debounce.
    	     * @param {number} [wait=0] The number of milliseconds to delay.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=false]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {number} [options.maxWait]
    	     *  The maximum time `func` is allowed to be delayed before it's invoked.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new debounced function.
    	     * @example
    	     *
    	     * // Avoid costly calculations while the window size is in flux.
    	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
    	     *
    	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
    	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
    	     *   'leading': true,
    	     *   'trailing': false
    	     * }));
    	     *
    	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
    	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
    	     * var source = new EventSource('/stream');
    	     * jQuery(source).on('message', debounced);
    	     *
    	     * // Cancel the trailing debounced invocation.
    	     * jQuery(window).on('popstate', debounced.cancel);
    	     */
    	    function debounce(func, wait, options) {
    	      var lastArgs,
    	          lastThis,
    	          maxWait,
    	          result,
    	          timerId,
    	          lastCallTime,
    	          lastInvokeTime = 0,
    	          leading = false,
    	          maxing = false,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      wait = toNumber(wait) || 0;
    	      if (isObject(options)) {
    	        leading = !!options.leading;
    	        maxing = 'maxWait' in options;
    	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }

    	      function invokeFunc(time) {
    	        var args = lastArgs,
    	            thisArg = lastThis;

    	        lastArgs = lastThis = undefined$1;
    	        lastInvokeTime = time;
    	        result = func.apply(thisArg, args);
    	        return result;
    	      }

    	      function leadingEdge(time) {
    	        // Reset any `maxWait` timer.
    	        lastInvokeTime = time;
    	        // Start the timer for the trailing edge.
    	        timerId = setTimeout(timerExpired, wait);
    	        // Invoke the leading edge.
    	        return leading ? invokeFunc(time) : result;
    	      }

    	      function remainingWait(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime,
    	            timeWaiting = wait - timeSinceLastCall;

    	        return maxing
    	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
    	          : timeWaiting;
    	      }

    	      function shouldInvoke(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime;

    	        // Either this is the first call, activity has stopped and we're at the
    	        // trailing edge, the system time has gone backwards and we're treating
    	        // it as the trailing edge, or we've hit the `maxWait` limit.
    	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
    	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    	      }

    	      function timerExpired() {
    	        var time = now();
    	        if (shouldInvoke(time)) {
    	          return trailingEdge(time);
    	        }
    	        // Restart the timer.
    	        timerId = setTimeout(timerExpired, remainingWait(time));
    	      }

    	      function trailingEdge(time) {
    	        timerId = undefined$1;

    	        // Only invoke if we have `lastArgs` which means `func` has been
    	        // debounced at least once.
    	        if (trailing && lastArgs) {
    	          return invokeFunc(time);
    	        }
    	        lastArgs = lastThis = undefined$1;
    	        return result;
    	      }

    	      function cancel() {
    	        if (timerId !== undefined$1) {
    	          clearTimeout(timerId);
    	        }
    	        lastInvokeTime = 0;
    	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
    	      }

    	      function flush() {
    	        return timerId === undefined$1 ? result : trailingEdge(now());
    	      }

    	      function debounced() {
    	        var time = now(),
    	            isInvoking = shouldInvoke(time);

    	        lastArgs = arguments;
    	        lastThis = this;
    	        lastCallTime = time;

    	        if (isInvoking) {
    	          if (timerId === undefined$1) {
    	            return leadingEdge(lastCallTime);
    	          }
    	          if (maxing) {
    	            // Handle invocations in a tight loop.
    	            clearTimeout(timerId);
    	            timerId = setTimeout(timerExpired, wait);
    	            return invokeFunc(lastCallTime);
    	          }
    	        }
    	        if (timerId === undefined$1) {
    	          timerId = setTimeout(timerExpired, wait);
    	        }
    	        return result;
    	      }
    	      debounced.cancel = cancel;
    	      debounced.flush = flush;
    	      return debounced;
    	    }

    	    /**
    	     * Defers invoking the `func` until the current call stack has cleared. Any
    	     * additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to defer.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.defer(function(text) {
    	     *   console.log(text);
    	     * }, 'deferred');
    	     * // => Logs 'deferred' after one millisecond.
    	     */
    	    var defer = baseRest(function(func, args) {
    	      return baseDelay(func, 1, args);
    	    });

    	    /**
    	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
    	     * provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.delay(function(text) {
    	     *   console.log(text);
    	     * }, 1000, 'later');
    	     * // => Logs 'later' after one second.
    	     */
    	    var delay = baseRest(function(func, wait, args) {
    	      return baseDelay(func, toNumber(wait) || 0, args);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments reversed.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to flip arguments for.
    	     * @returns {Function} Returns the new flipped function.
    	     * @example
    	     *
    	     * var flipped = _.flip(function() {
    	     *   return _.toArray(arguments);
    	     * });
    	     *
    	     * flipped('a', 'b', 'c', 'd');
    	     * // => ['d', 'c', 'b', 'a']
    	     */
    	    function flip(func) {
    	      return createWrap(func, WRAP_FLIP_FLAG);
    	    }

    	    /**
    	     * Creates a function that memoizes the result of `func`. If `resolver` is
    	     * provided, it determines the cache key for storing the result based on the
    	     * arguments provided to the memoized function. By default, the first argument
    	     * provided to the memoized function is used as the map cache key. The `func`
    	     * is invoked with the `this` binding of the memoized function.
    	     *
    	     * **Note:** The cache is exposed as the `cache` property on the memoized
    	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
    	     * constructor with one whose instances implement the
    	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
    	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to have its output memoized.
    	     * @param {Function} [resolver] The function to resolve the cache key.
    	     * @returns {Function} Returns the new memoized function.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     * var other = { 'c': 3, 'd': 4 };
    	     *
    	     * var values = _.memoize(_.values);
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * values(other);
    	     * // => [3, 4]
    	     *
    	     * object.a = 2;
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * // Modify the result cache.
    	     * values.cache.set(object, ['a', 'b']);
    	     * values(object);
    	     * // => ['a', 'b']
    	     *
    	     * // Replace `_.memoize.Cache`.
    	     * _.memoize.Cache = WeakMap;
    	     */
    	    function memoize(func, resolver) {
    	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var memoized = function() {
    	        var args = arguments,
    	            key = resolver ? resolver.apply(this, args) : args[0],
    	            cache = memoized.cache;

    	        if (cache.has(key)) {
    	          return cache.get(key);
    	        }
    	        var result = func.apply(this, args);
    	        memoized.cache = cache.set(key, result) || cache;
    	        return result;
    	      };
    	      memoized.cache = new (memoize.Cache || MapCache);
    	      return memoized;
    	    }

    	    // Expose `MapCache`.
    	    memoize.Cache = MapCache;

    	    /**
    	     * Creates a function that negates the result of the predicate `func`. The
    	     * `func` predicate is invoked with the `this` binding and arguments of the
    	     * created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} predicate The predicate to negate.
    	     * @returns {Function} Returns the new negated function.
    	     * @example
    	     *
    	     * function isEven(n) {
    	     *   return n % 2 == 0;
    	     * }
    	     *
    	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
    	     * // => [1, 3, 5]
    	     */
    	    function negate(predicate) {
    	      if (typeof predicate != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return function() {
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return !predicate.call(this);
    	          case 1: return !predicate.call(this, args[0]);
    	          case 2: return !predicate.call(this, args[0], args[1]);
    	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
    	        }
    	        return !predicate.apply(this, args);
    	      };
    	    }

    	    /**
    	     * Creates a function that is restricted to invoking `func` once. Repeat calls
    	     * to the function return the value of the first invocation. The `func` is
    	     * invoked with the `this` binding and arguments of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var initialize = _.once(createApplication);
    	     * initialize();
    	     * initialize();
    	     * // => `createApplication` is invoked once
    	     */
    	    function once(func) {
    	      return before(2, func);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with its arguments transformed.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Function
    	     * @param {Function} func The function to wrap.
    	     * @param {...(Function|Function[])} [transforms=[_.identity]]
    	     *  The argument transforms.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * function doubled(n) {
    	     *   return n * 2;
    	     * }
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var func = _.overArgs(function(x, y) {
    	     *   return [x, y];
    	     * }, [square, doubled]);
    	     *
    	     * func(9, 3);
    	     * // => [81, 6]
    	     *
    	     * func(10, 5);
    	     * // => [100, 10]
    	     */
    	    var overArgs = castRest(function(func, transforms) {
    	      transforms = (transforms.length == 1 && isArray(transforms[0]))
    	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
    	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

    	      var funcsLength = transforms.length;
    	      return baseRest(function(args) {
    	        var index = -1,
    	            length = nativeMin(args.length, funcsLength);

    	        while (++index < length) {
    	          args[index] = transforms[index].call(this, args[index]);
    	        }
    	        return apply(func, this, args);
    	      });
    	    });

    	    /**
    	     * Creates a function that invokes `func` with `partials` prepended to the
    	     * arguments it receives. This method is like `_.bind` except it does **not**
    	     * alter the `this` binding.
    	     *
    	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.2.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var sayHelloTo = _.partial(greet, 'hello');
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var greetFred = _.partial(greet, _, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     */
    	    var partial = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partial));
    	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * This method is like `_.partial` except that partially applied arguments
    	     * are appended to the arguments it receives.
    	     *
    	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var greetFred = _.partialRight(greet, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     */
    	    var partialRight = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partialRight));
    	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments arranged according
    	     * to the specified `indexes` where the argument value at the first index is
    	     * provided as the first argument, the argument value at the second index is
    	     * provided as the second argument, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to rearrange arguments for.
    	     * @param {...(number|number[])} indexes The arranged argument indexes.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var rearged = _.rearg(function(a, b, c) {
    	     *   return [a, b, c];
    	     * }, [2, 0, 1]);
    	     *
    	     * rearged('b', 'c', 'a')
    	     * // => ['a', 'b', 'c']
    	     */
    	    var rearg = flatRest(function(func, indexes) {
    	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * created function and arguments from `start` and beyond provided as
    	     * an array.
    	     *
    	     * **Note:** This method is based on the
    	     * [rest parameter](https://mdn.io/rest_parameters).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.rest(function(what, names) {
    	     *   return what + ' ' + _.initial(names).join(', ') +
    	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
    	     * });
    	     *
    	     * say('hello', 'fred', 'barney', 'pebbles');
    	     * // => 'hello fred, barney, & pebbles'
    	     */
    	    function rest(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start === undefined$1 ? start : toInteger(start);
    	      return baseRest(func, start);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * create function and an array of arguments much like
    	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
    	     *
    	     * **Note:** This method is based on the
    	     * [spread operator](https://mdn.io/spread_operator).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Function
    	     * @param {Function} func The function to spread arguments over.
    	     * @param {number} [start=0] The start position of the spread.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.spread(function(who, what) {
    	     *   return who + ' says ' + what;
    	     * });
    	     *
    	     * say(['fred', 'hello']);
    	     * // => 'fred says hello'
    	     *
    	     * var numbers = Promise.all([
    	     *   Promise.resolve(40),
    	     *   Promise.resolve(36)
    	     * ]);
    	     *
    	     * numbers.then(_.spread(function(x, y) {
    	     *   return x + y;
    	     * }));
    	     * // => a Promise of 76
    	     */
    	    function spread(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
    	      return baseRest(function(args) {
    	        var array = args[start],
    	            otherArgs = castSlice(args, 0, start);

    	        if (array) {
    	          arrayPush(otherArgs, array);
    	        }
    	        return apply(func, this, otherArgs);
    	      });
    	    }

    	    /**
    	     * Creates a throttled function that only invokes `func` at most once per
    	     * every `wait` milliseconds. The throttled function comes with a `cancel`
    	     * method to cancel delayed `func` invocations and a `flush` method to
    	     * immediately invoke them. Provide `options` to indicate whether `func`
    	     * should be invoked on the leading and/or trailing edge of the `wait`
    	     * timeout. The `func` is invoked with the last arguments provided to the
    	     * throttled function. Subsequent calls to the throttled function return the
    	     * result of the last `func` invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the throttled function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.throttle` and `_.debounce`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to throttle.
    	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=true]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new throttled function.
    	     * @example
    	     *
    	     * // Avoid excessively updating the position while scrolling.
    	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
    	     *
    	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
    	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
    	     * jQuery(element).on('click', throttled);
    	     *
    	     * // Cancel the trailing throttled invocation.
    	     * jQuery(window).on('popstate', throttled.cancel);
    	     */
    	    function throttle(func, wait, options) {
    	      var leading = true,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      if (isObject(options)) {
    	        leading = 'leading' in options ? !!options.leading : leading;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }
    	      return debounce(func, wait, {
    	        'leading': leading,
    	        'maxWait': wait,
    	        'trailing': trailing
    	      });
    	    }

    	    /**
    	     * Creates a function that accepts up to one argument, ignoring any
    	     * additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.unary(parseInt));
    	     * // => [6, 8, 10]
    	     */
    	    function unary(func) {
    	      return ary(func, 1);
    	    }

    	    /**
    	     * Creates a function that provides `value` to `wrapper` as its first
    	     * argument. Any additional arguments provided to the function are appended
    	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
    	     * binding of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {*} value The value to wrap.
    	     * @param {Function} [wrapper=identity] The wrapper function.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var p = _.wrap(_.escape, function(func, text) {
    	     *   return '<p>' + func(text) + '</p>';
    	     * });
    	     *
    	     * p('fred, barney, & pebbles');
    	     * // => '<p>fred, barney, &amp; pebbles</p>'
    	     */
    	    function wrap(value, wrapper) {
    	      return partial(castFunction(wrapper), value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Casts `value` as an array if it's not one.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Lang
    	     * @param {*} value The value to inspect.
    	     * @returns {Array} Returns the cast array.
    	     * @example
    	     *
    	     * _.castArray(1);
    	     * // => [1]
    	     *
    	     * _.castArray({ 'a': 1 });
    	     * // => [{ 'a': 1 }]
    	     *
    	     * _.castArray('abc');
    	     * // => ['abc']
    	     *
    	     * _.castArray(null);
    	     * // => [null]
    	     *
    	     * _.castArray(undefined);
    	     * // => [undefined]
    	     *
    	     * _.castArray();
    	     * // => []
    	     *
    	     * var array = [1, 2, 3];
    	     * console.log(_.castArray(array) === array);
    	     * // => true
    	     */
    	    function castArray() {
    	      if (!arguments.length) {
    	        return [];
    	      }
    	      var value = arguments[0];
    	      return isArray(value) ? value : [value];
    	    }

    	    /**
    	     * Creates a shallow clone of `value`.
    	     *
    	     * **Note:** This method is loosely based on the
    	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
    	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
    	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
    	     * arrays. The own enumerable properties of `arguments` objects are cloned
    	     * as plain objects. An empty object is returned for uncloneable values such
    	     * as error objects, functions, DOM nodes, and WeakMaps.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeep
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var shallow = _.clone(objects);
    	     * console.log(shallow[0] === objects[0]);
    	     * // => true
    	     */
    	    function clone(value) {
    	      return baseClone(value, CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it accepts `customizer` which
    	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
    	     * cloning is handled by the method instead. The `customizer` is invoked with
    	     * up to four arguments; (value [, index|key, object, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeepWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(false);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 0
    	     */
    	    function cloneWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.clone
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var deep = _.cloneDeep(objects);
    	     * console.log(deep[0] === objects[0]);
    	     * // => false
    	     */
    	    function cloneDeep(value) {
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.cloneWith` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.cloneWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(true);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneDeepWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 20
    	     */
    	    function cloneDeepWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * Checks if `object` conforms to `source` by invoking the predicate
    	     * properties of `source` with the corresponding property values of `object`.
    	     *
    	     * **Note:** This method is equivalent to `_.conforms` when `source` is
    	     * partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
    	     * // => true
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
    	     * // => false
    	     */
    	    function conformsTo(object, source) {
    	      return source == null || baseConformsTo(object, source, keys(source));
    	    }

    	    /**
    	     * Performs a
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * comparison between two values to determine if they are equivalent.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.eq(object, object);
    	     * // => true
    	     *
    	     * _.eq(object, other);
    	     * // => false
    	     *
    	     * _.eq('a', 'a');
    	     * // => true
    	     *
    	     * _.eq('a', Object('a'));
    	     * // => false
    	     *
    	     * _.eq(NaN, NaN);
    	     * // => true
    	     */
    	    function eq(value, other) {
    	      return value === other || (value !== value && other !== other);
    	    }

    	    /**
    	     * Checks if `value` is greater than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     * @see _.lt
    	     * @example
    	     *
    	     * _.gt(3, 1);
    	     * // => true
    	     *
    	     * _.gt(3, 3);
    	     * // => false
    	     *
    	     * _.gt(1, 3);
    	     * // => false
    	     */
    	    var gt = createRelationalOperation(baseGt);

    	    /**
    	     * Checks if `value` is greater than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
    	     *  `other`, else `false`.
    	     * @see _.lte
    	     * @example
    	     *
    	     * _.gte(3, 1);
    	     * // => true
    	     *
    	     * _.gte(3, 3);
    	     * // => true
    	     *
    	     * _.gte(1, 3);
    	     * // => false
    	     */
    	    var gte = createRelationalOperation(function(value, other) {
    	      return value >= other;
    	    });

    	    /**
    	     * Checks if `value` is likely an `arguments` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArguments(function() { return arguments; }());
    	     * // => true
    	     *
    	     * _.isArguments([1, 2, 3]);
    	     * // => false
    	     */
    	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    	        !propertyIsEnumerable.call(value, 'callee');
    	    };

    	    /**
    	     * Checks if `value` is classified as an `Array` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	     * @example
    	     *
    	     * _.isArray([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArray(document.body.children);
    	     * // => false
    	     *
    	     * _.isArray('abc');
    	     * // => false
    	     *
    	     * _.isArray(_.noop);
    	     * // => false
    	     */
    	    var isArray = Array.isArray;

    	    /**
    	     * Checks if `value` is classified as an `ArrayBuffer` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     * @example
    	     *
    	     * _.isArrayBuffer(new ArrayBuffer(2));
    	     * // => true
    	     *
    	     * _.isArrayBuffer(new Array(2));
    	     * // => false
    	     */
    	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    	    /**
    	     * Checks if `value` is array-like. A value is considered array-like if it's
    	     * not a function and has a `value.length` that's an integer greater than or
    	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	     * @example
    	     *
    	     * _.isArrayLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLike(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLike('abc');
    	     * // => true
    	     *
    	     * _.isArrayLike(_.noop);
    	     * // => false
    	     */
    	    function isArrayLike(value) {
    	      return value != null && isLength(value.length) && !isFunction(value);
    	    }

    	    /**
    	     * This method is like `_.isArrayLike` except that it also checks if `value`
    	     * is an object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array-like object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArrayLikeObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject('abc');
    	     * // => false
    	     *
    	     * _.isArrayLikeObject(_.noop);
    	     * // => false
    	     */
    	    function isArrayLikeObject(value) {
    	      return isObjectLike(value) && isArrayLike(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a boolean primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
    	     * @example
    	     *
    	     * _.isBoolean(false);
    	     * // => true
    	     *
    	     * _.isBoolean(null);
    	     * // => false
    	     */
    	    function isBoolean(value) {
    	      return value === true || value === false ||
    	        (isObjectLike(value) && baseGetTag(value) == boolTag);
    	    }

    	    /**
    	     * Checks if `value` is a buffer.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	     * @example
    	     *
    	     * _.isBuffer(new Buffer(2));
    	     * // => true
    	     *
    	     * _.isBuffer(new Uint8Array(2));
    	     * // => false
    	     */
    	    var isBuffer = nativeIsBuffer || stubFalse;

    	    /**
    	     * Checks if `value` is classified as a `Date` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     * @example
    	     *
    	     * _.isDate(new Date);
    	     * // => true
    	     *
    	     * _.isDate('Mon April 23 2012');
    	     * // => false
    	     */
    	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    	    /**
    	     * Checks if `value` is likely a DOM element.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
    	     * @example
    	     *
    	     * _.isElement(document.body);
    	     * // => true
    	     *
    	     * _.isElement('<body>');
    	     * // => false
    	     */
    	    function isElement(value) {
    	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    	    }

    	    /**
    	     * Checks if `value` is an empty object, collection, map, or set.
    	     *
    	     * Objects are considered empty if they have no own enumerable string keyed
    	     * properties.
    	     *
    	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
    	     * jQuery-like collections are considered empty if they have a `length` of `0`.
    	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
    	     * @example
    	     *
    	     * _.isEmpty(null);
    	     * // => true
    	     *
    	     * _.isEmpty(true);
    	     * // => true
    	     *
    	     * _.isEmpty(1);
    	     * // => true
    	     *
    	     * _.isEmpty([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isEmpty({ 'a': 1 });
    	     * // => false
    	     */
    	    function isEmpty(value) {
    	      if (value == null) {
    	        return true;
    	      }
    	      if (isArrayLike(value) &&
    	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
    	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    	        return !value.length;
    	      }
    	      var tag = getTag(value);
    	      if (tag == mapTag || tag == setTag) {
    	        return !value.size;
    	      }
    	      if (isPrototype(value)) {
    	        return !baseKeys(value).length;
    	      }
    	      for (var key in value) {
    	        if (hasOwnProperty.call(value, key)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * Performs a deep comparison between two values to determine if they are
    	     * equivalent.
    	     *
    	     * **Note:** This method supports comparing arrays, array buffers, booleans,
    	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
    	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
    	     * by their own, not inherited, enumerable properties. Functions and DOM
    	     * nodes are compared by strict equality, i.e. `===`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.isEqual(object, other);
    	     * // => true
    	     *
    	     * object === other;
    	     * // => false
    	     */
    	    function isEqual(value, other) {
    	      return baseIsEqual(value, other);
    	    }

    	    /**
    	     * This method is like `_.isEqual` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with up to
    	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, othValue) {
    	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var array = ['hello', 'goodbye'];
    	     * var other = ['hi', 'goodbye'];
    	     *
    	     * _.isEqualWith(array, other, customizer);
    	     * // => true
    	     */
    	    function isEqualWith(value, other, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      var result = customizer ? customizer(value, other) : undefined$1;
    	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    	    }

    	    /**
    	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
    	     * `SyntaxError`, `TypeError`, or `URIError` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
    	     * @example
    	     *
    	     * _.isError(new Error);
    	     * // => true
    	     *
    	     * _.isError(Error);
    	     * // => false
    	     */
    	    function isError(value) {
    	      if (!isObjectLike(value)) {
    	        return false;
    	      }
    	      var tag = baseGetTag(value);
    	      return tag == errorTag || tag == domExcTag ||
    	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    	    }

    	    /**
    	     * Checks if `value` is a finite primitive number.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
    	     * @example
    	     *
    	     * _.isFinite(3);
    	     * // => true
    	     *
    	     * _.isFinite(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isFinite(Infinity);
    	     * // => false
    	     *
    	     * _.isFinite('3');
    	     * // => false
    	     */
    	    function isFinite(value) {
    	      return typeof value == 'number' && nativeIsFinite(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Function` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	     * @example
    	     *
    	     * _.isFunction(_);
    	     * // => true
    	     *
    	     * _.isFunction(/abc/);
    	     * // => false
    	     */
    	    function isFunction(value) {
    	      if (!isObject(value)) {
    	        return false;
    	      }
    	      // The use of `Object#toString` avoids issues with the `typeof` operator
    	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
    	      var tag = baseGetTag(value);
    	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    	    }

    	    /**
    	     * Checks if `value` is an integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
    	     * @example
    	     *
    	     * _.isInteger(3);
    	     * // => true
    	     *
    	     * _.isInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isInteger('3');
    	     * // => false
    	     */
    	    function isInteger(value) {
    	      return typeof value == 'number' && value == toInteger(value);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like length.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	     * @example
    	     *
    	     * _.isLength(3);
    	     * // => true
    	     *
    	     * _.isLength(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isLength(Infinity);
    	     * // => false
    	     *
    	     * _.isLength('3');
    	     * // => false
    	     */
    	    function isLength(value) {
    	      return typeof value == 'number' &&
    	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is the
    	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	     * @example
    	     *
    	     * _.isObject({});
    	     * // => true
    	     *
    	     * _.isObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObject(_.noop);
    	     * // => true
    	     *
    	     * _.isObject(null);
    	     * // => false
    	     */
    	    function isObject(value) {
    	      var type = typeof value;
    	      return value != null && (type == 'object' || type == 'function');
    	    }

    	    /**
    	     * Checks if `value` is object-like. A value is object-like if it's not `null`
    	     * and has a `typeof` result of "object".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	     * @example
    	     *
    	     * _.isObjectLike({});
    	     * // => true
    	     *
    	     * _.isObjectLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObjectLike(_.noop);
    	     * // => false
    	     *
    	     * _.isObjectLike(null);
    	     * // => false
    	     */
    	    function isObjectLike(value) {
    	      return value != null && typeof value == 'object';
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Map` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     * @example
    	     *
    	     * _.isMap(new Map);
    	     * // => true
    	     *
    	     * _.isMap(new WeakMap);
    	     * // => false
    	     */
    	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    	    /**
    	     * Performs a partial deep comparison between `object` and `source` to
    	     * determine if `object` contains equivalent property values.
    	     *
    	     * **Note:** This method is equivalent to `_.matches` when `source` is
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.isMatch(object, { 'b': 2 });
    	     * // => true
    	     *
    	     * _.isMatch(object, { 'b': 1 });
    	     * // => false
    	     */
    	    function isMatch(object, source) {
    	      return object === source || baseIsMatch(object, source, getMatchData(source));
    	    }

    	    /**
    	     * This method is like `_.isMatch` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with five
    	     * arguments: (objValue, srcValue, index|key, object, source).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var object = { 'greeting': 'hello' };
    	     * var source = { 'greeting': 'hi' };
    	     *
    	     * _.isMatchWith(object, source, customizer);
    	     * // => true
    	     */
    	    function isMatchWith(object, source, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseIsMatch(object, source, getMatchData(source), customizer);
    	    }

    	    /**
    	     * Checks if `value` is `NaN`.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
    	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
    	     * `undefined` and other non-number values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	     * @example
    	     *
    	     * _.isNaN(NaN);
    	     * // => true
    	     *
    	     * _.isNaN(new Number(NaN));
    	     * // => true
    	     *
    	     * isNaN(undefined);
    	     * // => true
    	     *
    	     * _.isNaN(undefined);
    	     * // => false
    	     */
    	    function isNaN(value) {
    	      // An `NaN` primitive is the only value that is not equal to itself.
    	      // Perform the `toStringTag` check first to avoid errors with some
    	      // ActiveX objects in IE.
    	      return isNumber(value) && value != +value;
    	    }

    	    /**
    	     * Checks if `value` is a pristine native function.
    	     *
    	     * **Note:** This method can't reliably detect native functions in the presence
    	     * of the core-js package because core-js circumvents this kind of detection.
    	     * Despite multiple requests, the core-js maintainer has made it clear: any
    	     * attempt to fix the detection will be obstructed. As a result, we're left
    	     * with little choice but to throw an error. Unfortunately, this also affects
    	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
    	     * which rely on core-js.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isNative(Array.prototype.push);
    	     * // => true
    	     *
    	     * _.isNative(_);
    	     * // => false
    	     */
    	    function isNative(value) {
    	      if (isMaskable(value)) {
    	        throw new Error(CORE_ERROR_TEXT);
    	      }
    	      return baseIsNative(value);
    	    }

    	    /**
    	     * Checks if `value` is `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
    	     * @example
    	     *
    	     * _.isNull(null);
    	     * // => true
    	     *
    	     * _.isNull(void 0);
    	     * // => false
    	     */
    	    function isNull(value) {
    	      return value === null;
    	    }

    	    /**
    	     * Checks if `value` is `null` or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
    	     * @example
    	     *
    	     * _.isNil(null);
    	     * // => true
    	     *
    	     * _.isNil(void 0);
    	     * // => true
    	     *
    	     * _.isNil(NaN);
    	     * // => false
    	     */
    	    function isNil(value) {
    	      return value == null;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Number` primitive or object.
    	     *
    	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
    	     * classified as numbers, use the `_.isFinite` method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
    	     * @example
    	     *
    	     * _.isNumber(3);
    	     * // => true
    	     *
    	     * _.isNumber(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isNumber(Infinity);
    	     * // => true
    	     *
    	     * _.isNumber('3');
    	     * // => false
    	     */
    	    function isNumber(value) {
    	      return typeof value == 'number' ||
    	        (isObjectLike(value) && baseGetTag(value) == numberTag);
    	    }

    	    /**
    	     * Checks if `value` is a plain object, that is, an object created by the
    	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.8.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * _.isPlainObject(new Foo);
    	     * // => false
    	     *
    	     * _.isPlainObject([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isPlainObject({ 'x': 0, 'y': 0 });
    	     * // => true
    	     *
    	     * _.isPlainObject(Object.create(null));
    	     * // => true
    	     */
    	    function isPlainObject(value) {
    	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    	        return false;
    	      }
    	      var proto = getPrototype(value);
    	      if (proto === null) {
    	        return true;
    	      }
    	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    	        funcToString.call(Ctor) == objectCtorString;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `RegExp` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     * @example
    	     *
    	     * _.isRegExp(/abc/);
    	     * // => true
    	     *
    	     * _.isRegExp('/abc/');
    	     * // => false
    	     */
    	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    	    /**
    	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
    	     * double precision number which isn't the result of a rounded unsafe integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
    	     * @example
    	     *
    	     * _.isSafeInteger(3);
    	     * // => true
    	     *
    	     * _.isSafeInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isSafeInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isSafeInteger('3');
    	     * // => false
    	     */
    	    function isSafeInteger(value) {
    	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Set` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     * @example
    	     *
    	     * _.isSet(new Set);
    	     * // => true
    	     *
    	     * _.isSet(new WeakSet);
    	     * // => false
    	     */
    	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    	    /**
    	     * Checks if `value` is classified as a `String` primitive or object.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
    	     * @example
    	     *
    	     * _.isString('abc');
    	     * // => true
    	     *
    	     * _.isString(1);
    	     * // => false
    	     */
    	    function isString(value) {
    	      return typeof value == 'string' ||
    	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Symbol` primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
    	     * @example
    	     *
    	     * _.isSymbol(Symbol.iterator);
    	     * // => true
    	     *
    	     * _.isSymbol('abc');
    	     * // => false
    	     */
    	    function isSymbol(value) {
    	      return typeof value == 'symbol' ||
    	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a typed array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     * @example
    	     *
    	     * _.isTypedArray(new Uint8Array);
    	     * // => true
    	     *
    	     * _.isTypedArray([]);
    	     * // => false
    	     */
    	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	    /**
    	     * Checks if `value` is `undefined`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	     * @example
    	     *
    	     * _.isUndefined(void 0);
    	     * // => true
    	     *
    	     * _.isUndefined(null);
    	     * // => false
    	     */
    	    function isUndefined(value) {
    	      return value === undefined$1;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakMap` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
    	     * @example
    	     *
    	     * _.isWeakMap(new WeakMap);
    	     * // => true
    	     *
    	     * _.isWeakMap(new Map);
    	     * // => false
    	     */
    	    function isWeakMap(value) {
    	      return isObjectLike(value) && getTag(value) == weakMapTag;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakSet` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
    	     * @example
    	     *
    	     * _.isWeakSet(new WeakSet);
    	     * // => true
    	     *
    	     * _.isWeakSet(new Set);
    	     * // => false
    	     */
    	    function isWeakSet(value) {
    	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    	    }

    	    /**
    	     * Checks if `value` is less than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     * @see _.gt
    	     * @example
    	     *
    	     * _.lt(1, 3);
    	     * // => true
    	     *
    	     * _.lt(3, 3);
    	     * // => false
    	     *
    	     * _.lt(3, 1);
    	     * // => false
    	     */
    	    var lt = createRelationalOperation(baseLt);

    	    /**
    	     * Checks if `value` is less than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than or equal to
    	     *  `other`, else `false`.
    	     * @see _.gte
    	     * @example
    	     *
    	     * _.lte(1, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 1);
    	     * // => false
    	     */
    	    var lte = createRelationalOperation(function(value, other) {
    	      return value <= other;
    	    });

    	    /**
    	     * Converts `value` to an array.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the converted array.
    	     * @example
    	     *
    	     * _.toArray({ 'a': 1, 'b': 2 });
    	     * // => [1, 2]
    	     *
    	     * _.toArray('abc');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toArray(1);
    	     * // => []
    	     *
    	     * _.toArray(null);
    	     * // => []
    	     */
    	    function toArray(value) {
    	      if (!value) {
    	        return [];
    	      }
    	      if (isArrayLike(value)) {
    	        return isString(value) ? stringToArray(value) : copyArray(value);
    	      }
    	      if (symIterator && value[symIterator]) {
    	        return iteratorToArray(value[symIterator]());
    	      }
    	      var tag = getTag(value),
    	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

    	      return func(value);
    	    }

    	    /**
    	     * Converts `value` to a finite number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.12.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted number.
    	     * @example
    	     *
    	     * _.toFinite(3.2);
    	     * // => 3.2
    	     *
    	     * _.toFinite(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toFinite(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toFinite('3.2');
    	     * // => 3.2
    	     */
    	    function toFinite(value) {
    	      if (!value) {
    	        return value === 0 ? value : 0;
    	      }
    	      value = toNumber(value);
    	      if (value === INFINITY || value === -INFINITY) {
    	        var sign = (value < 0 ? -1 : 1);
    	        return sign * MAX_INTEGER;
    	      }
    	      return value === value ? value : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toInteger(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toInteger('3.2');
    	     * // => 3
    	     */
    	    function toInteger(value) {
    	      var result = toFinite(value),
    	          remainder = result % 1;

    	      return result === result ? (remainder ? result - remainder : result) : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer suitable for use as the length of an
    	     * array-like object.
    	     *
    	     * **Note:** This method is based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toLength(3.2);
    	     * // => 3
    	     *
    	     * _.toLength(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toLength(Infinity);
    	     * // => 4294967295
    	     *
    	     * _.toLength('3.2');
    	     * // => 3
    	     */
    	    function toLength(value) {
    	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    	    }

    	    /**
    	     * Converts `value` to a number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     * @example
    	     *
    	     * _.toNumber(3.2);
    	     * // => 3.2
    	     *
    	     * _.toNumber(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toNumber(Infinity);
    	     * // => Infinity
    	     *
    	     * _.toNumber('3.2');
    	     * // => 3.2
    	     */
    	    function toNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      if (isObject(value)) {
    	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    	        value = isObject(other) ? (other + '') : other;
    	      }
    	      if (typeof value != 'string') {
    	        return value === 0 ? value : +value;
    	      }
    	      value = baseTrim(value);
    	      var isBinary = reIsBinary.test(value);
    	      return (isBinary || reIsOctal.test(value))
    	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    	        : (reIsBadHex.test(value) ? NAN : +value);
    	    }

    	    /**
    	     * Converts `value` to a plain object flattening inherited enumerable string
    	     * keyed properties of `value` to own properties of the plain object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Object} Returns the converted plain object.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.assign({ 'a': 1 }, new Foo);
    	     * // => { 'a': 1, 'b': 2 }
    	     *
    	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    	     * // => { 'a': 1, 'b': 2, 'c': 3 }
    	     */
    	    function toPlainObject(value) {
    	      return copyObject(value, keysIn(value));
    	    }

    	    /**
    	     * Converts `value` to a safe integer. A safe integer can be compared and
    	     * represented correctly.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toSafeInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toSafeInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toSafeInteger(Infinity);
    	     * // => 9007199254740991
    	     *
    	     * _.toSafeInteger('3.2');
    	     * // => 3
    	     */
    	    function toSafeInteger(value) {
    	      return value
    	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
    	        : (value === 0 ? value : 0);
    	    }

    	    /**
    	     * Converts `value` to a string. An empty string is returned for `null`
    	     * and `undefined` values. The sign of `-0` is preserved.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.toString(null);
    	     * // => ''
    	     *
    	     * _.toString(-0);
    	     * // => '-0'
    	     *
    	     * _.toString([1, 2, 3]);
    	     * // => '1,2,3'
    	     */
    	    function toString(value) {
    	      return value == null ? '' : baseToString(value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Assigns own enumerable string keyed properties of source objects to the
    	     * destination object. Source objects are applied from left to right.
    	     * Subsequent sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object` and is loosely based on
    	     * [`Object.assign`](https://mdn.io/Object/assign).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assign({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var assign = createAssigner(function(object, source) {
    	      if (isPrototype(source) || isArrayLike(source)) {
    	        copyObject(source, keys(source), object);
    	        return;
    	      }
    	      for (var key in source) {
    	        if (hasOwnProperty.call(source, key)) {
    	          assignValue(object, key, source[key]);
    	        }
    	      }
    	    });

    	    /**
    	     * This method is like `_.assign` except that it iterates over own and
    	     * inherited source properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extend
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assign
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
    	     */
    	    var assignIn = createAssigner(function(object, source) {
    	      copyObject(source, keysIn(source), object);
    	    });

    	    /**
    	     * This method is like `_.assignIn` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extendWith
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignInWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keysIn(source), object, customizer);
    	    });

    	    /**
    	     * This method is like `_.assign` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignInWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keys(source), object, customizer);
    	    });

    	    /**
    	     * Creates an array of values corresponding to `paths` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Array} Returns the picked values.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _.at(object, ['a[0].b.c', 'a[1]']);
    	     * // => [3, 4]
    	     */
    	    var at = flatRest(baseAt);

    	    /**
    	     * Creates an object that inherits from the `prototype` object. If a
    	     * `properties` object is given, its own enumerable string keyed properties
    	     * are assigned to the created object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Object
    	     * @param {Object} prototype The object to inherit from.
    	     * @param {Object} [properties] The properties to assign to the object.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * function Shape() {
    	     *   this.x = 0;
    	     *   this.y = 0;
    	     * }
    	     *
    	     * function Circle() {
    	     *   Shape.call(this);
    	     * }
    	     *
    	     * Circle.prototype = _.create(Shape.prototype, {
    	     *   'constructor': Circle
    	     * });
    	     *
    	     * var circle = new Circle;
    	     * circle instanceof Circle;
    	     * // => true
    	     *
    	     * circle instanceof Shape;
    	     * // => true
    	     */
    	    function create(prototype, properties) {
    	      var result = baseCreate(prototype);
    	      return properties == null ? result : baseAssign(result, properties);
    	    }

    	    /**
    	     * Assigns own and inherited enumerable string keyed properties of source
    	     * objects to the destination object for all destination properties that
    	     * resolve to `undefined`. Source objects are applied from left to right.
    	     * Once a property is set, additional values of the same property are ignored.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaultsDeep
    	     * @example
    	     *
    	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var defaults = baseRest(function(object, sources) {
    	      object = Object(object);

    	      var index = -1;
    	      var length = sources.length;
    	      var guard = length > 2 ? sources[2] : undefined$1;

    	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	        length = 1;
    	      }

    	      while (++index < length) {
    	        var source = sources[index];
    	        var props = keysIn(source);
    	        var propsIndex = -1;
    	        var propsLength = props.length;

    	        while (++propsIndex < propsLength) {
    	          var key = props[propsIndex];
    	          var value = object[key];

    	          if (value === undefined$1 ||
    	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	            object[key] = source[key];
    	          }
    	        }
    	      }

    	      return object;
    	    });

    	    /**
    	     * This method is like `_.defaults` except that it recursively assigns
    	     * default properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaults
    	     * @example
    	     *
    	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
    	     * // => { 'a': { 'b': 2, 'c': 3 } }
    	     */
    	    var defaultsDeep = baseRest(function(args) {
    	      args.push(undefined$1, customDefaultsMerge);
    	      return apply(mergeWith, undefined$1, args);
    	    });

    	    /**
    	     * This method is like `_.find` except that it returns the key of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findKey(users, function(o) { return o.age < 40; });
    	     * // => 'barney' (iteration order is not guaranteed)
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findKey(users, { 'age': 1, 'active': true });
    	     * // => 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findKey(users, 'active');
    	     * // => 'barney'
    	     */
    	    function findKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    	    }

    	    /**
    	     * This method is like `_.findKey` except that it iterates over elements of
    	     * a collection in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findLastKey(users, function(o) { return o.age < 40; });
    	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastKey(users, { 'age': 36, 'active': true });
    	     * // => 'barney'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastKey(users, 'active');
    	     * // => 'pebbles'
    	     */
    	    function findLastKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    	    }

    	    /**
    	     * Iterates over own and inherited enumerable string keyed properties of an
    	     * object and invokes `iteratee` for each property. The iteratee is invoked
    	     * with three arguments: (value, key, object). Iteratee functions may exit
    	     * iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forInRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forIn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
    	     */
    	    function forIn(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * This method is like `_.forIn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forInRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
    	     */
    	    function forInRight(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * Iterates over own enumerable string keyed properties of an object and
    	     * invokes `iteratee` for each property. The iteratee is invoked with three
    	     * arguments: (value, key, object). Iteratee functions may exit iteration
    	     * early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwnRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forOwn(object, iteratee) {
    	      return object && baseForOwn(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forOwn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwnRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
    	     */
    	    function forOwnRight(object, iteratee) {
    	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an array of function property names from own enumerable properties
    	     * of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functionsIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functions(new Foo);
    	     * // => ['a', 'b']
    	     */
    	    function functions(object) {
    	      return object == null ? [] : baseFunctions(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of function property names from own and inherited
    	     * enumerable properties of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functions
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functionsIn(new Foo);
    	     * // => ['a', 'b', 'c']
    	     */
    	    function functionsIn(object) {
    	      return object == null ? [] : baseFunctions(object, keysIn(object));
    	    }

    	    /**
    	     * Gets the value at `path` of `object`. If the resolved value is
    	     * `undefined`, the `defaultValue` is returned in its place.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.get(object, 'a[0].b.c');
    	     * // => 3
    	     *
    	     * _.get(object, ['a', '0', 'b', 'c']);
    	     * // => 3
    	     *
    	     * _.get(object, 'a.b.c', 'default');
    	     * // => 'default'
    	     */
    	    function get(object, path, defaultValue) {
    	      var result = object == null ? undefined$1 : baseGet(object, path);
    	      return result === undefined$1 ? defaultValue : result;
    	    }

    	    /**
    	     * Checks if `path` is a direct property of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': { 'b': 2 } };
    	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.has(object, 'a');
    	     * // => true
    	     *
    	     * _.has(object, 'a.b');
    	     * // => true
    	     *
    	     * _.has(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.has(other, 'a');
    	     * // => false
    	     */
    	    function has(object, path) {
    	      return object != null && hasPath(object, path, baseHas);
    	    }

    	    /**
    	     * Checks if `path` is a direct or inherited property of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.hasIn(object, 'a');
    	     * // => true
    	     *
    	     * _.hasIn(object, 'a.b');
    	     * // => true
    	     *
    	     * _.hasIn(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.hasIn(object, 'b');
    	     * // => false
    	     */
    	    function hasIn(object, path) {
    	      return object != null && hasPath(object, path, baseHasIn);
    	    }

    	    /**
    	     * Creates an object composed of the inverted keys and values of `object`.
    	     * If `object` contains duplicate values, subsequent values overwrite
    	     * property assignments of previous values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invert(object);
    	     * // => { '1': 'c', '2': 'b' }
    	     */
    	    var invert = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      result[value] = key;
    	    }, constant(identity));

    	    /**
    	     * This method is like `_.invert` except that the inverted object is generated
    	     * from the results of running each element of `object` thru `iteratee`. The
    	     * corresponding inverted value of each inverted key is an array of keys
    	     * responsible for generating the inverted value. The iteratee is invoked
    	     * with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invertBy(object);
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     *
    	     * _.invertBy(object, function(value) {
    	     *   return 'group' + value;
    	     * });
    	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
    	     */
    	    var invertBy = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      if (hasOwnProperty.call(result, value)) {
    	        result[value].push(key);
    	      } else {
    	        result[value] = [key];
    	      }
    	    }, getIteratee);

    	    /**
    	     * Invokes the method at `path` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
    	     *
    	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
    	     * // => [2, 3]
    	     */
    	    var invoke = baseRest(baseInvoke);

    	    /**
    	     * Creates an array of the own enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects. See the
    	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * for more details.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keys(new Foo);
    	     * // => ['a', 'b'] (iteration order is not guaranteed)
    	     *
    	     * _.keys('hi');
    	     * // => ['0', '1']
    	     */
    	    function keys(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keysIn(new Foo);
    	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
    	     */
    	    function keysIn(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    	    }

    	    /**
    	     * The opposite of `_.mapValues`; this method creates an object with the
    	     * same values as `object` and keys generated by running each own enumerable
    	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
    	     * with three arguments: (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapValues
    	     * @example
    	     *
    	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   return key + value;
    	     * });
    	     * // => { 'a1': 1, 'b2': 2 }
    	     */
    	    function mapKeys(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, iteratee(value, key, object), value);
    	      });
    	      return result;
    	    }

    	    /**
    	     * Creates an object with the same keys as `object` and values generated
    	     * by running each own enumerable string keyed property of `object` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapKeys
    	     * @example
    	     *
    	     * var users = {
    	     *   'fred':    { 'user': 'fred',    'age': 40 },
    	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
    	     * };
    	     *
    	     * _.mapValues(users, function(o) { return o.age; });
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.mapValues(users, 'age');
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     */
    	    function mapValues(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, key, iteratee(value, key, object));
    	      });
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.assign` except that it recursively merges own and
    	     * inherited enumerable string keyed properties of source objects into the
    	     * destination object. Source properties that resolve to `undefined` are
    	     * skipped if a destination value exists. Array and plain object properties
    	     * are merged recursively. Other objects and value types are overridden by
    	     * assignment. Source objects are applied from left to right. Subsequent
    	     * sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {
    	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
    	     * };
    	     *
    	     * var other = {
    	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
    	     * };
    	     *
    	     * _.merge(object, other);
    	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
    	     */
    	    var merge = createAssigner(function(object, source, srcIndex) {
    	      baseMerge(object, source, srcIndex);
    	    });

    	    /**
    	     * This method is like `_.merge` except that it accepts `customizer` which
    	     * is invoked to produce the merged values of the destination and source
    	     * properties. If `customizer` returns `undefined`, merging is handled by the
    	     * method instead. The `customizer` is invoked with six arguments:
    	     * (objValue, srcValue, key, object, source, stack).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} customizer The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (_.isArray(objValue)) {
    	     *     return objValue.concat(srcValue);
    	     *   }
    	     * }
    	     *
    	     * var object = { 'a': [1], 'b': [2] };
    	     * var other = { 'a': [3], 'b': [4] };
    	     *
    	     * _.mergeWith(object, other, customizer);
    	     * // => { 'a': [1, 3], 'b': [2, 4] }
    	     */
    	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      baseMerge(object, source, srcIndex, customizer);
    	    });

    	    /**
    	     * The opposite of `_.pick`; this method creates an object composed of the
    	     * own and inherited enumerable property paths of `object` that are not omitted.
    	     *
    	     * **Note:** This method is considerably slower than `_.pick`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to omit.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omit(object, ['a', 'c']);
    	     * // => { 'b': '2' }
    	     */
    	    var omit = flatRest(function(object, paths) {
    	      var result = {};
    	      if (object == null) {
    	        return result;
    	      }
    	      var isDeep = false;
    	      paths = arrayMap(paths, function(path) {
    	        path = castPath(path, object);
    	        isDeep || (isDeep = path.length > 1);
    	        return path;
    	      });
    	      copyObject(object, getAllKeysIn(object), result);
    	      if (isDeep) {
    	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    	      }
    	      var length = paths.length;
    	      while (length--) {
    	        baseUnset(result, paths[length]);
    	      }
    	      return result;
    	    });

    	    /**
    	     * The opposite of `_.pickBy`; this method creates an object composed of
    	     * the own and inherited enumerable string keyed properties of `object` that
    	     * `predicate` doesn't return truthy for. The predicate is invoked with two
    	     * arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omitBy(object, _.isNumber);
    	     * // => { 'b': '2' }
    	     */
    	    function omitBy(object, predicate) {
    	      return pickBy(object, negate(getIteratee(predicate)));
    	    }

    	    /**
    	     * Creates an object composed of the picked `object` properties.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pick(object, ['a', 'c']);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var pick = flatRest(function(object, paths) {
    	      return object == null ? {} : basePick(object, paths);
    	    });

    	    /**
    	     * Creates an object composed of the `object` properties `predicate` returns
    	     * truthy for. The predicate is invoked with two arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pickBy(object, _.isNumber);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    function pickBy(object, predicate) {
    	      if (object == null) {
    	        return {};
    	      }
    	      var props = arrayMap(getAllKeysIn(object), function(prop) {
    	        return [prop];
    	      });
    	      predicate = getIteratee(predicate);
    	      return basePickBy(object, props, function(value, path) {
    	        return predicate(value, path[0]);
    	      });
    	    }

    	    /**
    	     * This method is like `_.get` except that if the resolved value is a
    	     * function it's invoked with the `this` binding of its parent object and
    	     * its result is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to resolve.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
    	     *
    	     * _.result(object, 'a[0].b.c1');
    	     * // => 3
    	     *
    	     * _.result(object, 'a[0].b.c2');
    	     * // => 4
    	     *
    	     * _.result(object, 'a[0].b.c3', 'default');
    	     * // => 'default'
    	     *
    	     * _.result(object, 'a[0].b.c3', _.constant('default'));
    	     * // => 'default'
    	     */
    	    function result(object, path, defaultValue) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length;

    	      // Ensure the loop is entered when path is empty.
    	      if (!length) {
    	        length = 1;
    	        object = undefined$1;
    	      }
    	      while (++index < length) {
    	        var value = object == null ? undefined$1 : object[toKey(path[index])];
    	        if (value === undefined$1) {
    	          index = length;
    	          value = defaultValue;
    	        }
    	        object = isFunction(value) ? value.call(object) : value;
    	      }
    	      return object;
    	    }

    	    /**
    	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
    	     * it's created. Arrays are created for missing index properties while objects
    	     * are created for all other missing properties. Use `_.setWith` to customize
    	     * `path` creation.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.set(object, 'a[0].b.c', 4);
    	     * console.log(object.a[0].b.c);
    	     * // => 4
    	     *
    	     * _.set(object, ['x', '0', 'y', 'z'], 5);
    	     * console.log(object.x[0].y.z);
    	     * // => 5
    	     */
    	    function set(object, path, value) {
    	      return object == null ? object : baseSet(object, path, value);
    	    }

    	    /**
    	     * This method is like `_.set` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.setWith(object, '[0][1]', 'a', Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function setWith(object, path, value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseSet(object, path, value, customizer);
    	    }

    	    /**
    	     * Creates an array of own enumerable string keyed-value pairs for `object`
    	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
    	     * entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entries
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairs(new Foo);
    	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
    	     */
    	    var toPairs = createToPairs(keys);

    	    /**
    	     * Creates an array of own and inherited enumerable string keyed-value pairs
    	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
    	     * or set, its entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entriesIn
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairsIn(new Foo);
    	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
    	     */
    	    var toPairsIn = createToPairs(keysIn);

    	    /**
    	     * An alternative to `_.reduce`; this method transforms `object` to a new
    	     * `accumulator` object which is the result of running each of its own
    	     * enumerable string keyed properties thru `iteratee`, with each invocation
    	     * potentially mutating the `accumulator` object. If `accumulator` is not
    	     * provided, a new object with the same `[[Prototype]]` will be used. The
    	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The custom accumulator value.
    	     * @returns {*} Returns the accumulated value.
    	     * @example
    	     *
    	     * _.transform([2, 3, 4], function(result, n) {
    	     *   result.push(n *= n);
    	     *   return n % 2 == 0;
    	     * }, []);
    	     * // => [4, 9]
    	     *
    	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     */
    	    function transform(object, iteratee, accumulator) {
    	      var isArr = isArray(object),
    	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

    	      iteratee = getIteratee(iteratee, 4);
    	      if (accumulator == null) {
    	        var Ctor = object && object.constructor;
    	        if (isArrLike) {
    	          accumulator = isArr ? new Ctor : [];
    	        }
    	        else if (isObject(object)) {
    	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    	        }
    	        else {
    	          accumulator = {};
    	        }
    	      }
    	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    	        return iteratee(accumulator, value, index, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * Removes the property at `path` of `object`.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
    	     * _.unset(object, 'a[0].b.c');
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     *
    	     * _.unset(object, ['a', '0', 'b', 'c']);
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     */
    	    function unset(object, path) {
    	      return object == null ? true : baseUnset(object, path);
    	    }

    	    /**
    	     * This method is like `_.set` except that accepts `updater` to produce the
    	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
    	     * is invoked with one argument: (value).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
    	     * console.log(object.a[0].b.c);
    	     * // => 9
    	     *
    	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
    	     * console.log(object.x[0].y.z);
    	     * // => 0
    	     */
    	    function update(object, path, updater) {
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    	    }

    	    /**
    	     * This method is like `_.update` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function updateWith(object, path, updater, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    	    }

    	    /**
    	     * Creates an array of the own enumerable string keyed property values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.values(new Foo);
    	     * // => [1, 2] (iteration order is not guaranteed)
    	     *
    	     * _.values('hi');
    	     * // => ['h', 'i']
    	     */
    	    function values(object) {
    	      return object == null ? [] : baseValues(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable string keyed property
    	     * values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.valuesIn(new Foo);
    	     * // => [1, 2, 3] (iteration order is not guaranteed)
    	     */
    	    function valuesIn(object) {
    	      return object == null ? [] : baseValues(object, keysIn(object));
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Number
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     * @example
    	     *
    	     * _.clamp(-10, -5, 5);
    	     * // => -5
    	     *
    	     * _.clamp(10, -5, 5);
    	     * // => 5
    	     */
    	    function clamp(number, lower, upper) {
    	      if (upper === undefined$1) {
    	        upper = lower;
    	        lower = undefined$1;
    	      }
    	      if (upper !== undefined$1) {
    	        upper = toNumber(upper);
    	        upper = upper === upper ? upper : 0;
    	      }
    	      if (lower !== undefined$1) {
    	        lower = toNumber(lower);
    	        lower = lower === lower ? lower : 0;
    	      }
    	      return baseClamp(toNumber(number), lower, upper);
    	    }

    	    /**
    	     * Checks if `n` is between `start` and up to, but not including, `end`. If
    	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
    	     * If `start` is greater than `end` the params are swapped to support
    	     * negative ranges.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.3.0
    	     * @category Number
    	     * @param {number} number The number to check.
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     * @see _.range, _.rangeRight
    	     * @example
    	     *
    	     * _.inRange(3, 2, 4);
    	     * // => true
    	     *
    	     * _.inRange(4, 8);
    	     * // => true
    	     *
    	     * _.inRange(4, 2);
    	     * // => false
    	     *
    	     * _.inRange(2, 2);
    	     * // => false
    	     *
    	     * _.inRange(1.2, 2);
    	     * // => true
    	     *
    	     * _.inRange(5.2, 4);
    	     * // => false
    	     *
    	     * _.inRange(-3, -2, -6);
    	     * // => true
    	     */
    	    function inRange(number, start, end) {
    	      start = toFinite(start);
    	      if (end === undefined$1) {
    	        end = start;
    	        start = 0;
    	      } else {
    	        end = toFinite(end);
    	      }
    	      number = toNumber(number);
    	      return baseInRange(number, start, end);
    	    }

    	    /**
    	     * Produces a random number between the inclusive `lower` and `upper` bounds.
    	     * If only one argument is provided a number between `0` and the given number
    	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
    	     * floats, a floating-point number is returned instead of an integer.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Number
    	     * @param {number} [lower=0] The lower bound.
    	     * @param {number} [upper=1] The upper bound.
    	     * @param {boolean} [floating] Specify returning a floating-point number.
    	     * @returns {number} Returns the random number.
    	     * @example
    	     *
    	     * _.random(0, 5);
    	     * // => an integer between 0 and 5
    	     *
    	     * _.random(5);
    	     * // => also an integer between 0 and 5
    	     *
    	     * _.random(5, true);
    	     * // => a floating-point number between 0 and 5
    	     *
    	     * _.random(1.2, 5.2);
    	     * // => a floating-point number between 1.2 and 5.2
    	     */
    	    function random(lower, upper, floating) {
    	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    	        upper = floating = undefined$1;
    	      }
    	      if (floating === undefined$1) {
    	        if (typeof upper == 'boolean') {
    	          floating = upper;
    	          upper = undefined$1;
    	        }
    	        else if (typeof lower == 'boolean') {
    	          floating = lower;
    	          lower = undefined$1;
    	        }
    	      }
    	      if (lower === undefined$1 && upper === undefined$1) {
    	        lower = 0;
    	        upper = 1;
    	      }
    	      else {
    	        lower = toFinite(lower);
    	        if (upper === undefined$1) {
    	          upper = lower;
    	          lower = 0;
    	        } else {
    	          upper = toFinite(upper);
    	        }
    	      }
    	      if (lower > upper) {
    	        var temp = lower;
    	        lower = upper;
    	        upper = temp;
    	      }
    	      if (floating || lower % 1 || upper % 1) {
    	        var rand = nativeRandom();
    	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
    	      }
    	      return baseRandom(lower, upper);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the camel cased string.
    	     * @example
    	     *
    	     * _.camelCase('Foo Bar');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('--foo-bar--');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('__FOO_BAR__');
    	     * // => 'fooBar'
    	     */
    	    var camelCase = createCompounder(function(result, word, index) {
    	      word = word.toLowerCase();
    	      return result + (index ? capitalize(word) : word);
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case and the remaining
    	     * to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to capitalize.
    	     * @returns {string} Returns the capitalized string.
    	     * @example
    	     *
    	     * _.capitalize('FRED');
    	     * // => 'Fred'
    	     */
    	    function capitalize(string) {
    	      return upperFirst(toString(string).toLowerCase());
    	    }

    	    /**
    	     * Deburrs `string` by converting
    	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
    	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
    	     * letters to basic Latin letters and removing
    	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to deburr.
    	     * @returns {string} Returns the deburred string.
    	     * @example
    	     *
    	     * _.deburr('déjà vu');
    	     * // => 'deja vu'
    	     */
    	    function deburr(string) {
    	      string = toString(string);
    	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    	    }

    	    /**
    	     * Checks if `string` ends with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=string.length] The position to search up to.
    	     * @returns {boolean} Returns `true` if `string` ends with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.endsWith('abc', 'c');
    	     * // => true
    	     *
    	     * _.endsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.endsWith('abc', 'b', 2);
    	     * // => true
    	     */
    	    function endsWith(string, target, position) {
    	      string = toString(string);
    	      target = baseToString(target);

    	      var length = string.length;
    	      position = position === undefined$1
    	        ? length
    	        : baseClamp(toInteger(position), 0, length);

    	      var end = position;
    	      position -= target.length;
    	      return position >= 0 && string.slice(position, end) == target;
    	    }

    	    /**
    	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
    	     * corresponding HTML entities.
    	     *
    	     * **Note:** No other characters are escaped. To escape additional
    	     * characters use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * Though the ">" character is escaped for symmetry, characters like
    	     * ">" and "/" don't need escaping in HTML and have no special meaning
    	     * unless they're part of a tag or unquoted attribute value. See
    	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
    	     * (under "semi-related fun fact") for more details.
    	     *
    	     * When working with HTML you should always
    	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
    	     * XSS vectors.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escape('fred, barney, & pebbles');
    	     * // => 'fred, barney, &amp; pebbles'
    	     */
    	    function escape(string) {
    	      string = toString(string);
    	      return (string && reHasUnescapedHtml.test(string))
    	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
    	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escapeRegExp('[lodash](https://lodash.com/)');
    	     * // => '\[lodash\]\(https://lodash\.com/\)'
    	     */
    	    function escapeRegExp(string) {
    	      string = toString(string);
    	      return (string && reHasRegExpChar.test(string))
    	        ? string.replace(reRegExpChar, '\\$&')
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to
    	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the kebab cased string.
    	     * @example
    	     *
    	     * _.kebabCase('Foo Bar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('fooBar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('__FOO_BAR__');
    	     * // => 'foo-bar'
    	     */
    	    var kebabCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '-' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts `string`, as space separated words, to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.lowerCase('--Foo-Bar--');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('fooBar');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('__FOO_BAR__');
    	     * // => 'foo bar'
    	     */
    	    var lowerCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.lowerFirst('Fred');
    	     * // => 'fred'
    	     *
    	     * _.lowerFirst('FRED');
    	     * // => 'fRED'
    	     */
    	    var lowerFirst = createCaseFirst('toLowerCase');

    	    /**
    	     * Pads `string` on the left and right sides if it's shorter than `length`.
    	     * Padding characters are truncated if they can't be evenly divided by `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.pad('abc', 8);
    	     * // => '  abc   '
    	     *
    	     * _.pad('abc', 8, '_-');
    	     * // => '_-abc_-_'
    	     *
    	     * _.pad('abc', 3);
    	     * // => 'abc'
    	     */
    	    function pad(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      if (!length || strLength >= length) {
    	        return string;
    	      }
    	      var mid = (length - strLength) / 2;
    	      return (
    	        createPadding(nativeFloor(mid), chars) +
    	        string +
    	        createPadding(nativeCeil(mid), chars)
    	      );
    	    }

    	    /**
    	     * Pads `string` on the right side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padEnd('abc', 6);
    	     * // => 'abc   '
    	     *
    	     * _.padEnd('abc', 6, '_-');
    	     * // => 'abc_-_'
    	     *
    	     * _.padEnd('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padEnd(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (string + createPadding(length - strLength, chars))
    	        : string;
    	    }

    	    /**
    	     * Pads `string` on the left side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padStart('abc', 6);
    	     * // => '   abc'
    	     *
    	     * _.padStart('abc', 6, '_-');
    	     * // => '_-_abc'
    	     *
    	     * _.padStart('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padStart(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (createPadding(length - strLength, chars) + string)
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to an integer of the specified radix. If `radix` is
    	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
    	     * hexadecimal, in which case a `radix` of `16` is used.
    	     *
    	     * **Note:** This method aligns with the
    	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category String
    	     * @param {string} string The string to convert.
    	     * @param {number} [radix=10] The radix to interpret `value` by.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.parseInt('08');
    	     * // => 8
    	     *
    	     * _.map(['6', '08', '10'], _.parseInt);
    	     * // => [6, 8, 10]
    	     */
    	    function parseInt(string, radix, guard) {
    	      if (guard || radix == null) {
    	        radix = 0;
    	      } else if (radix) {
    	        radix = +radix;
    	      }
    	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    	    }

    	    /**
    	     * Repeats the given string `n` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to repeat.
    	     * @param {number} [n=1] The number of times to repeat the string.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the repeated string.
    	     * @example
    	     *
    	     * _.repeat('*', 3);
    	     * // => '***'
    	     *
    	     * _.repeat('abc', 2);
    	     * // => 'abcabc'
    	     *
    	     * _.repeat('abc', 0);
    	     * // => ''
    	     */
    	    function repeat(string, n, guard) {
    	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      return baseRepeat(toString(string), n);
    	    }

    	    /**
    	     * Replaces matches for `pattern` in `string` with `replacement`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#replace`](https://mdn.io/String/replace).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to modify.
    	     * @param {RegExp|string} pattern The pattern to replace.
    	     * @param {Function|string} replacement The match replacement.
    	     * @returns {string} Returns the modified string.
    	     * @example
    	     *
    	     * _.replace('Hi Fred', 'Fred', 'Barney');
    	     * // => 'Hi Barney'
    	     */
    	    function replace() {
    	      var args = arguments,
    	          string = toString(args[0]);

    	      return args.length < 3 ? string : string.replace(args[1], args[2]);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the snake cased string.
    	     * @example
    	     *
    	     * _.snakeCase('Foo Bar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('fooBar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('--FOO-BAR--');
    	     * // => 'foo_bar'
    	     */
    	    var snakeCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '_' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Splits `string` by `separator`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#split`](https://mdn.io/String/split).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to split.
    	     * @param {RegExp|string} separator The separator pattern to split by.
    	     * @param {number} [limit] The length to truncate results to.
    	     * @returns {Array} Returns the string segments.
    	     * @example
    	     *
    	     * _.split('a-b-c', '-', 2);
    	     * // => ['a', 'b']
    	     */
    	    function split(string, separator, limit) {
    	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    	        separator = limit = undefined$1;
    	      }
    	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
    	      if (!limit) {
    	        return [];
    	      }
    	      string = toString(string);
    	      if (string && (
    	            typeof separator == 'string' ||
    	            (separator != null && !isRegExp(separator))
    	          )) {
    	        separator = baseToString(separator);
    	        if (!separator && hasUnicode(string)) {
    	          return castSlice(stringToArray(string), 0, limit);
    	        }
    	      }
    	      return string.split(separator, limit);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.1.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the start cased string.
    	     * @example
    	     *
    	     * _.startCase('--foo-bar--');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('fooBar');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('__FOO_BAR__');
    	     * // => 'FOO BAR'
    	     */
    	    var startCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + upperFirst(word);
    	    });

    	    /**
    	     * Checks if `string` starts with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=0] The position to search from.
    	     * @returns {boolean} Returns `true` if `string` starts with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.startsWith('abc', 'a');
    	     * // => true
    	     *
    	     * _.startsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.startsWith('abc', 'b', 1);
    	     * // => true
    	     */
    	    function startsWith(string, target, position) {
    	      string = toString(string);
    	      position = position == null
    	        ? 0
    	        : baseClamp(toInteger(position), 0, string.length);

    	      target = baseToString(target);
    	      return string.slice(position, position + target.length) == target;
    	    }

    	    /**
    	     * Creates a compiled template function that can interpolate data properties
    	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
    	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
    	     * properties may be accessed as free variables in the template. If a setting
    	     * object is given, it takes precedence over `_.templateSettings` values.
    	     *
    	     * **Note:** In the development build `_.template` utilizes
    	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
    	     * for easier debugging.
    	     *
    	     * For more information on precompiling templates see
    	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
    	     *
    	     * For more information on Chrome extension sandboxes see
    	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The template string.
    	     * @param {Object} [options={}] The options object.
    	     * @param {RegExp} [options.escape=_.templateSettings.escape]
    	     *  The HTML "escape" delimiter.
    	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
    	     *  The "evaluate" delimiter.
    	     * @param {Object} [options.imports=_.templateSettings.imports]
    	     *  An object to import into the template as free variables.
    	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
    	     *  The "interpolate" delimiter.
    	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
    	     *  The sourceURL of the compiled template.
    	     * @param {string} [options.variable='obj']
    	     *  The data object variable name.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the compiled template function.
    	     * @example
    	     *
    	     * // Use the "interpolate" delimiter to create a compiled template.
    	     * var compiled = _.template('hello <%= user %>!');
    	     * compiled({ 'user': 'fred' });
    	     * // => 'hello fred!'
    	     *
    	     * // Use the HTML "escape" delimiter to escape data property values.
    	     * var compiled = _.template('<b><%- value %></b>');
    	     * compiled({ 'value': '<script>' });
    	     * // => '<b>&lt;script&gt;</b>'
    	     *
    	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
    	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the internal `print` function in "evaluate" delimiters.
    	     * var compiled = _.template('<% print("hello " + user); %>!');
    	     * compiled({ 'user': 'barney' });
    	     * // => 'hello barney!'
    	     *
    	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
    	     * // Disable support by replacing the "interpolate" delimiter.
    	     * var compiled = _.template('hello ${ user }!');
    	     * compiled({ 'user': 'pebbles' });
    	     * // => 'hello pebbles!'
    	     *
    	     * // Use backslashes to treat delimiters as plain text.
    	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
    	     * compiled({ 'value': 'ignored' });
    	     * // => '<%- value %>'
    	     *
    	     * // Use the `imports` option to import `jQuery` as `jq`.
    	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
    	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
    	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
    	     * compiled(data);
    	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
    	     *
    	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
    	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
    	     * compiled.source;
    	     * // => function(data) {
    	     * //   var __t, __p = '';
    	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
    	     * //   return __p;
    	     * // }
    	     *
    	     * // Use custom template delimiters.
    	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    	     * var compiled = _.template('hello {{ user }}!');
    	     * compiled({ 'user': 'mustache' });
    	     * // => 'hello mustache!'
    	     *
    	     * // Use the `source` property to inline compiled templates for meaningful
    	     * // line numbers in error messages and stack traces.
    	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
    	     *   var JST = {\
    	     *     "main": ' + _.template(mainText).source + '\
    	     *   };\
    	     * ');
    	     */
    	    function template(string, options, guard) {
    	      // Based on John Resig's `tmpl` implementation
    	      // (http://ejohn.org/blog/javascript-micro-templating/)
    	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    	      var settings = lodash.templateSettings;

    	      if (guard && isIterateeCall(string, options, guard)) {
    	        options = undefined$1;
    	      }
    	      string = toString(string);
    	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

    	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
    	          importsKeys = keys(imports),
    	          importsValues = baseValues(imports, importsKeys);

    	      var isEscaping,
    	          isEvaluating,
    	          index = 0,
    	          interpolate = options.interpolate || reNoMatch,
    	          source = "__p += '";

    	      // Compile the regexp to match each delimiter.
    	      var reDelimiters = RegExp(
    	        (options.escape || reNoMatch).source + '|' +
    	        interpolate.source + '|' +
    	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
    	        (options.evaluate || reNoMatch).source + '|$'
    	      , 'g');

    	      // Use a sourceURL for easier debugging.
    	      // The sourceURL gets injected into the source that's eval-ed, so be careful
    	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    	      // and escape the comment, thus injecting code that gets evaled.
    	      var sourceURL = '//# sourceURL=' +
    	        (hasOwnProperty.call(options, 'sourceURL')
    	          ? (options.sourceURL + '').replace(/\s/g, ' ')
    	          : ('lodash.templateSources[' + (++templateCounter) + ']')
    	        ) + '\n';

    	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    	        interpolateValue || (interpolateValue = esTemplateValue);

    	        // Escape characters that can't be included in string literals.
    	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

    	        // Replace delimiters with snippets.
    	        if (escapeValue) {
    	          isEscaping = true;
    	          source += "' +\n__e(" + escapeValue + ") +\n'";
    	        }
    	        if (evaluateValue) {
    	          isEvaluating = true;
    	          source += "';\n" + evaluateValue + ";\n__p += '";
    	        }
    	        if (interpolateValue) {
    	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    	        }
    	        index = offset + match.length;

    	        // The JS engine embedded in Adobe products needs `match` returned in
    	        // order to produce the correct `offset` value.
    	        return match;
    	      });

    	      source += "';\n";

    	      // If `variable` is not specified wrap a with-statement around the generated
    	      // code to add the data object to the top of the scope chain.
    	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
    	      if (!variable) {
    	        source = 'with (obj) {\n' + source + '\n}\n';
    	      }
    	      // Throw an error if a forbidden character was found in `variable`, to prevent
    	      // potential command injection attacks.
    	      else if (reForbiddenIdentifierChars.test(variable)) {
    	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    	      }

    	      // Cleanup code by stripping empty strings.
    	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
    	        .replace(reEmptyStringMiddle, '$1')
    	        .replace(reEmptyStringTrailing, '$1;');

    	      // Frame code as the function body.
    	      source = 'function(' + (variable || 'obj') + ') {\n' +
    	        (variable
    	          ? ''
    	          : 'obj || (obj = {});\n'
    	        ) +
    	        "var __t, __p = ''" +
    	        (isEscaping
    	           ? ', __e = _.escape'
    	           : ''
    	        ) +
    	        (isEvaluating
    	          ? ', __j = Array.prototype.join;\n' +
    	            "function print() { __p += __j.call(arguments, '') }\n"
    	          : ';\n'
    	        ) +
    	        source +
    	        'return __p\n}';

    	      var result = attempt(function() {
    	        return Function(importsKeys, sourceURL + 'return ' + source)
    	          .apply(undefined$1, importsValues);
    	      });

    	      // Provide the compiled function's source by its `toString` method or
    	      // the `source` property as a convenience for inlining compiled templates.
    	      result.source = source;
    	      if (isError(result)) {
    	        throw result;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `string`, as a whole, to lower case just like
    	     * [String#toLowerCase](https://mdn.io/toLowerCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.toLower('--Foo-Bar--');
    	     * // => '--foo-bar--'
    	     *
    	     * _.toLower('fooBar');
    	     * // => 'foobar'
    	     *
    	     * _.toLower('__FOO_BAR__');
    	     * // => '__foo_bar__'
    	     */
    	    function toLower(value) {
    	      return toString(value).toLowerCase();
    	    }

    	    /**
    	     * Converts `string`, as a whole, to upper case just like
    	     * [String#toUpperCase](https://mdn.io/toUpperCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.toUpper('--foo-bar--');
    	     * // => '--FOO-BAR--'
    	     *
    	     * _.toUpper('fooBar');
    	     * // => 'FOOBAR'
    	     *
    	     * _.toUpper('__foo_bar__');
    	     * // => '__FOO_BAR__'
    	     */
    	    function toUpper(value) {
    	      return toString(value).toUpperCase();
    	    }

    	    /**
    	     * Removes leading and trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trim('  abc  ');
    	     * // => 'abc'
    	     *
    	     * _.trim('-_-abc-_-', '_-');
    	     * // => 'abc'
    	     *
    	     * _.map(['  foo  ', '  bar  '], _.trim);
    	     * // => ['foo', 'bar']
    	     */
    	    function trim(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return baseTrim(string);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          chrSymbols = stringToArray(chars),
    	          start = charsStartIndex(strSymbols, chrSymbols),
    	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

    	      return castSlice(strSymbols, start, end).join('');
    	    }

    	    /**
    	     * Removes trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimEnd('  abc  ');
    	     * // => '  abc'
    	     *
    	     * _.trimEnd('-_-abc-_-', '_-');
    	     * // => '-_-abc'
    	     */
    	    function trimEnd(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.slice(0, trimmedEndIndex(string) + 1);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

    	      return castSlice(strSymbols, 0, end).join('');
    	    }

    	    /**
    	     * Removes leading whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimStart('  abc  ');
    	     * // => 'abc  '
    	     *
    	     * _.trimStart('-_-abc-_-', '_-');
    	     * // => 'abc-_-'
    	     */
    	    function trimStart(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.replace(reTrimStart, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          start = charsStartIndex(strSymbols, stringToArray(chars));

    	      return castSlice(strSymbols, start).join('');
    	    }

    	    /**
    	     * Truncates `string` if it's longer than the given maximum string length.
    	     * The last characters of the truncated string are replaced with the omission
    	     * string which defaults to "...".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to truncate.
    	     * @param {Object} [options={}] The options object.
    	     * @param {number} [options.length=30] The maximum string length.
    	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
    	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
    	     * @returns {string} Returns the truncated string.
    	     * @example
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino');
    	     * // => 'hi-diddly-ho there, neighbo...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': ' '
    	     * });
    	     * // => 'hi-diddly-ho there,...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': /,? +/
    	     * });
    	     * // => 'hi-diddly-ho there...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'omission': ' [...]'
    	     * });
    	     * // => 'hi-diddly-ho there, neig [...]'
    	     */
    	    function truncate(string, options) {
    	      var length = DEFAULT_TRUNC_LENGTH,
    	          omission = DEFAULT_TRUNC_OMISSION;

    	      if (isObject(options)) {
    	        var separator = 'separator' in options ? options.separator : separator;
    	        length = 'length' in options ? toInteger(options.length) : length;
    	        omission = 'omission' in options ? baseToString(options.omission) : omission;
    	      }
    	      string = toString(string);

    	      var strLength = string.length;
    	      if (hasUnicode(string)) {
    	        var strSymbols = stringToArray(string);
    	        strLength = strSymbols.length;
    	      }
    	      if (length >= strLength) {
    	        return string;
    	      }
    	      var end = length - stringSize(omission);
    	      if (end < 1) {
    	        return omission;
    	      }
    	      var result = strSymbols
    	        ? castSlice(strSymbols, 0, end).join('')
    	        : string.slice(0, end);

    	      if (separator === undefined$1) {
    	        return result + omission;
    	      }
    	      if (strSymbols) {
    	        end += (result.length - end);
    	      }
    	      if (isRegExp(separator)) {
    	        if (string.slice(end).search(separator)) {
    	          var match,
    	              substring = result;

    	          if (!separator.global) {
    	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
    	          }
    	          separator.lastIndex = 0;
    	          while ((match = separator.exec(substring))) {
    	            var newEnd = match.index;
    	          }
    	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
    	        }
    	      } else if (string.indexOf(baseToString(separator), end) != end) {
    	        var index = result.lastIndexOf(separator);
    	        if (index > -1) {
    	          result = result.slice(0, index);
    	        }
    	      }
    	      return result + omission;
    	    }

    	    /**
    	     * The inverse of `_.escape`; this method converts the HTML entities
    	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
    	     * their corresponding characters.
    	     *
    	     * **Note:** No other HTML entities are unescaped. To unescape additional
    	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.6.0
    	     * @category String
    	     * @param {string} [string=''] The string to unescape.
    	     * @returns {string} Returns the unescaped string.
    	     * @example
    	     *
    	     * _.unescape('fred, barney, &amp; pebbles');
    	     * // => 'fred, barney, & pebbles'
    	     */
    	    function unescape(string) {
    	      string = toString(string);
    	      return (string && reHasEscapedHtml.test(string))
    	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Converts `string`, as space separated words, to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.upperCase('--foo-bar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('fooBar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('__foo_bar__');
    	     * // => 'FOO BAR'
    	     */
    	    var upperCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toUpperCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.upperFirst('fred');
    	     * // => 'Fred'
    	     *
    	     * _.upperFirst('FRED');
    	     * // => 'FRED'
    	     */
    	    var upperFirst = createCaseFirst('toUpperCase');

    	    /**
    	     * Splits `string` into an array of its words.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {RegExp|string} [pattern] The pattern to match words.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the words of `string`.
    	     * @example
    	     *
    	     * _.words('fred, barney, & pebbles');
    	     * // => ['fred', 'barney', 'pebbles']
    	     *
    	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
    	     * // => ['fred', 'barney', '&', 'pebbles']
    	     */
    	    function words(string, pattern, guard) {
    	      string = toString(string);
    	      pattern = guard ? undefined$1 : pattern;

    	      if (pattern === undefined$1) {
    	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    	      }
    	      return string.match(pattern) || [];
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Attempts to invoke `func`, returning either the result or the caught error
    	     * object. Any additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Function} func The function to attempt.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {*} Returns the `func` result or error object.
    	     * @example
    	     *
    	     * // Avoid throwing errors for invalid selectors.
    	     * var elements = _.attempt(function(selector) {
    	     *   return document.querySelectorAll(selector);
    	     * }, '>_>');
    	     *
    	     * if (_.isError(elements)) {
    	     *   elements = [];
    	     * }
    	     */
    	    var attempt = baseRest(function(func, args) {
    	      try {
    	        return apply(func, undefined$1, args);
    	      } catch (e) {
    	        return isError(e) ? e : new Error(e);
    	      }
    	    });

    	    /**
    	     * Binds methods of an object to the object itself, overwriting the existing
    	     * method.
    	     *
    	     * **Note:** This method doesn't set the "length" property of bound functions.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Object} object The object to bind and assign the bound methods to.
    	     * @param {...(string|string[])} methodNames The object method names to bind.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var view = {
    	     *   'label': 'docs',
    	     *   'click': function() {
    	     *     console.log('clicked ' + this.label);
    	     *   }
    	     * };
    	     *
    	     * _.bindAll(view, ['click']);
    	     * jQuery(element).on('click', view.click);
    	     * // => Logs 'clicked docs' when clicked.
    	     */
    	    var bindAll = flatRest(function(object, methodNames) {
    	      arrayEach(methodNames, function(key) {
    	        key = toKey(key);
    	        baseAssignValue(object, key, bind(object[key], object));
    	      });
    	      return object;
    	    });

    	    /**
    	     * Creates a function that iterates over `pairs` and invokes the corresponding
    	     * function of the first predicate to return truthy. The predicate-function
    	     * pairs are invoked with the `this` binding and arguments of the created
    	     * function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Array} pairs The predicate-function pairs.
    	     * @returns {Function} Returns the new composite function.
    	     * @example
    	     *
    	     * var func = _.cond([
    	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
    	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
    	     *   [_.stubTrue,                      _.constant('no match')]
    	     * ]);
    	     *
    	     * func({ 'a': 1, 'b': 2 });
    	     * // => 'matches A'
    	     *
    	     * func({ 'a': 0, 'b': 1 });
    	     * // => 'matches B'
    	     *
    	     * func({ 'a': '1', 'b': '2' });
    	     * // => 'no match'
    	     */
    	    function cond(pairs) {
    	      var length = pairs == null ? 0 : pairs.length,
    	          toIteratee = getIteratee();

    	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
    	        if (typeof pair[1] != 'function') {
    	          throw new TypeError(FUNC_ERROR_TEXT);
    	        }
    	        return [toIteratee(pair[0]), pair[1]];
    	      });

    	      return baseRest(function(args) {
    	        var index = -1;
    	        while (++index < length) {
    	          var pair = pairs[index];
    	          if (apply(pair[0], this, args)) {
    	            return apply(pair[1], this, args);
    	          }
    	        }
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes the predicate properties of `source` with
    	     * the corresponding property values of a given object, returning `true` if
    	     * all predicates return truthy, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.conformsTo` with
    	     * `source` partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 2, 'b': 1 },
    	     *   { 'a': 1, 'b': 2 }
    	     * ];
    	     *
    	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
    	     * // => [{ 'a': 1, 'b': 2 }]
    	     */
    	    function conforms(source) {
    	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that returns `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {*} value The value to return from the new function.
    	     * @returns {Function} Returns the new constant function.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.constant({ 'a': 1 }));
    	     *
    	     * console.log(objects);
    	     * // => [{ 'a': 1 }, { 'a': 1 }]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => true
    	     */
    	    function constant(value) {
    	      return function() {
    	        return value;
    	      };
    	    }

    	    /**
    	     * Checks `value` to determine whether a default value should be returned in
    	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
    	     * or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Util
    	     * @param {*} value The value to check.
    	     * @param {*} defaultValue The default value.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * _.defaultTo(1, 10);
    	     * // => 1
    	     *
    	     * _.defaultTo(undefined, 10);
    	     * // => 10
    	     */
    	    function defaultTo(value, defaultValue) {
    	      return (value == null || value !== value) ? defaultValue : value;
    	    }

    	    /**
    	     * Creates a function that returns the result of invoking the given functions
    	     * with the `this` binding of the created function, where each successive
    	     * invocation is supplied the return value of the previous.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flowRight
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flow([_.add, square]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flow = createFlow();

    	    /**
    	     * This method is like `_.flow` except that it creates a function that
    	     * invokes the given functions from right to left.
    	     *
    	     * @static
    	     * @since 3.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flow
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flowRight([square, _.add]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flowRight = createFlow(true);

    	    /**
    	     * This method returns the first argument it receives.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} value Any value.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     *
    	     * console.log(_.identity(object) === object);
    	     * // => true
    	     */
    	    function identity(value) {
    	      return value;
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the arguments of the created
    	     * function. If `func` is a property name, the created function returns the
    	     * property value for a given element. If `func` is an array or object, the
    	     * created function returns `true` for elements that contain the equivalent
    	     * source properties, otherwise it returns `false`.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} [func=_.identity] The value to convert to a callback.
    	     * @returns {Function} Returns the callback.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
    	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, _.iteratee(['user', 'fred']));
    	     * // => [{ 'user': 'fred', 'age': 40 }]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, _.iteratee('user'));
    	     * // => ['barney', 'fred']
    	     *
    	     * // Create custom iteratee shorthands.
    	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
    	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
    	     *     return func.test(string);
    	     *   };
    	     * });
    	     *
    	     * _.filter(['abc', 'def'], /ef/);
    	     * // => ['def']
    	     */
    	    function iteratee(func) {
    	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between a given
    	     * object and `source`, returning `true` if the given object has equivalent
    	     * property values, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
    	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matches(source) {
    	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between the
    	     * value at `path` of a given object to `srcValue`, returning `true` if the
    	     * object value is equivalent, else `false`.
    	     *
    	     * **Note:** Partial comparisons will match empty array and empty object
    	     * `srcValue` values against any array or object value, respectively. See
    	     * `_.isEqual` for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.find(objects, _.matchesProperty('a', 4));
    	     * // => { 'a': 4, 'b': 5, 'c': 6 }
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matchesProperty(path, srcValue) {
    	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that invokes the method at `path` of a given object.
    	     * Any additional arguments are provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': _.constant(2) } },
    	     *   { 'a': { 'b': _.constant(1) } }
    	     * ];
    	     *
    	     * _.map(objects, _.method('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(objects, _.method(['a', 'b']));
    	     * // => [2, 1]
    	     */
    	    var method = baseRest(function(path, args) {
    	      return function(object) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * The opposite of `_.method`; this method creates a function that invokes
    	     * the method at a given path of `object`. Any additional arguments are
    	     * provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var array = _.times(3, _.constant),
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
    	     * // => [2, 0]
    	     */
    	    var methodOf = baseRest(function(object, args) {
    	      return function(path) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * Adds all own enumerable string keyed function properties of a source
    	     * object to the destination object. If `object` is a function, then methods
    	     * are added to its prototype as well.
    	     *
    	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
    	     * avoid conflicts caused by modifying the original.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Function|Object} [object=lodash] The destination object.
    	     * @param {Object} source The object of functions to add.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
    	     * @returns {Function|Object} Returns `object`.
    	     * @example
    	     *
    	     * function vowels(string) {
    	     *   return _.filter(string, function(v) {
    	     *     return /[aeiou]/i.test(v);
    	     *   });
    	     * }
    	     *
    	     * _.mixin({ 'vowels': vowels });
    	     * _.vowels('fred');
    	     * // => ['e']
    	     *
    	     * _('fred').vowels().value();
    	     * // => ['e']
    	     *
    	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
    	     * _('fred').vowels();
    	     * // => ['e']
    	     */
    	    function mixin(object, source, options) {
    	      var props = keys(source),
    	          methodNames = baseFunctions(source, props);

    	      if (options == null &&
    	          !(isObject(source) && (methodNames.length || !props.length))) {
    	        options = source;
    	        source = object;
    	        object = this;
    	        methodNames = baseFunctions(source, keys(source));
    	      }
    	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
    	          isFunc = isFunction(object);

    	      arrayEach(methodNames, function(methodName) {
    	        var func = source[methodName];
    	        object[methodName] = func;
    	        if (isFunc) {
    	          object.prototype[methodName] = function() {
    	            var chainAll = this.__chain__;
    	            if (chain || chainAll) {
    	              var result = object(this.__wrapped__),
    	                  actions = result.__actions__ = copyArray(this.__actions__);

    	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
    	              result.__chain__ = chainAll;
    	              return result;
    	            }
    	            return func.apply(object, arrayPush([this.value()], arguments));
    	          };
    	        }
    	      });

    	      return object;
    	    }

    	    /**
    	     * Reverts the `_` variable to its previous value and returns a reference to
    	     * the `lodash` function.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @returns {Function} Returns the `lodash` function.
    	     * @example
    	     *
    	     * var lodash = _.noConflict();
    	     */
    	    function noConflict() {
    	      if (root._ === this) {
    	        root._ = oldDash;
    	      }
    	      return this;
    	    }

    	    /**
    	     * This method returns `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Util
    	     * @example
    	     *
    	     * _.times(2, _.noop);
    	     * // => [undefined, undefined]
    	     */
    	    function noop() {
    	      // No operation performed.
    	    }

    	    /**
    	     * Creates a function that gets the argument at index `n`. If `n` is negative,
    	     * the nth argument from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [n=0] The index of the argument to return.
    	     * @returns {Function} Returns the new pass-thru function.
    	     * @example
    	     *
    	     * var func = _.nthArg(1);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'b'
    	     *
    	     * var func = _.nthArg(-2);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'c'
    	     */
    	    function nthArg(n) {
    	      n = toInteger(n);
    	      return baseRest(function(args) {
    	        return baseNth(args, n);
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes `iteratees` with the arguments it receives
    	     * and returns their results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to invoke.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.over([Math.max, Math.min]);
    	     *
    	     * func(1, 2, 3, 4);
    	     * // => [4, 1]
    	     */
    	    var over = createOver(arrayMap);

    	    /**
    	     * Creates a function that checks if **all** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overEvery([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => false
    	     *
    	     * func(NaN);
    	     * // => false
    	     */
    	    var overEvery = createOver(arrayEvery);

    	    /**
    	     * Creates a function that checks if **any** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overSome([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => true
    	     *
    	     * func(NaN);
    	     * // => false
    	     *
    	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
    	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
    	     */
    	    var overSome = createOver(arraySome);

    	    /**
    	     * Creates a function that returns the value at `path` of a given object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': 2 } },
    	     *   { 'a': { 'b': 1 } }
    	     * ];
    	     *
    	     * _.map(objects, _.property('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    	     * // => [1, 2]
    	     */
    	    function property(path) {
    	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    	    }

    	    /**
    	     * The opposite of `_.property`; this method creates a function that returns
    	     * the value at a given path of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var array = [0, 1, 2],
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
    	     * // => [2, 0]
    	     */
    	    function propertyOf(object) {
    	      return function(path) {
    	        return object == null ? undefined$1 : baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * Creates an array of numbers (positive and/or negative) progressing from
    	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
    	     * `start` is specified without an `end` or `step`. If `end` is not specified,
    	     * it's set to `start` with `start` then set to `0`.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.rangeRight
    	     * @example
    	     *
    	     * _.range(4);
    	     * // => [0, 1, 2, 3]
    	     *
    	     * _.range(-4);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 5);
    	     * // => [1, 2, 3, 4]
    	     *
    	     * _.range(0, 20, 5);
    	     * // => [0, 5, 10, 15]
    	     *
    	     * _.range(0, -4, -1);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.range(0);
    	     * // => []
    	     */
    	    var range = createRange();

    	    /**
    	     * This method is like `_.range` except that it populates values in
    	     * descending order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.range
    	     * @example
    	     *
    	     * _.rangeRight(4);
    	     * // => [3, 2, 1, 0]
    	     *
    	     * _.rangeRight(-4);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 5);
    	     * // => [4, 3, 2, 1]
    	     *
    	     * _.rangeRight(0, 20, 5);
    	     * // => [15, 10, 5, 0]
    	     *
    	     * _.rangeRight(0, -4, -1);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.rangeRight(0);
    	     * // => []
    	     */
    	    var rangeRight = createRange(true);

    	    /**
    	     * This method returns a new empty array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Array} Returns the new empty array.
    	     * @example
    	     *
    	     * var arrays = _.times(2, _.stubArray);
    	     *
    	     * console.log(arrays);
    	     * // => [[], []]
    	     *
    	     * console.log(arrays[0] === arrays[1]);
    	     * // => false
    	     */
    	    function stubArray() {
    	      return [];
    	    }

    	    /**
    	     * This method returns `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `false`.
    	     * @example
    	     *
    	     * _.times(2, _.stubFalse);
    	     * // => [false, false]
    	     */
    	    function stubFalse() {
    	      return false;
    	    }

    	    /**
    	     * This method returns a new empty object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Object} Returns the new empty object.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.stubObject);
    	     *
    	     * console.log(objects);
    	     * // => [{}, {}]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => false
    	     */
    	    function stubObject() {
    	      return {};
    	    }

    	    /**
    	     * This method returns an empty string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {string} Returns the empty string.
    	     * @example
    	     *
    	     * _.times(2, _.stubString);
    	     * // => ['', '']
    	     */
    	    function stubString() {
    	      return '';
    	    }

    	    /**
    	     * This method returns `true`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `true`.
    	     * @example
    	     *
    	     * _.times(2, _.stubTrue);
    	     * // => [true, true]
    	     */
    	    function stubTrue() {
    	      return true;
    	    }

    	    /**
    	     * Invokes the iteratee `n` times, returning an array of the results of
    	     * each invocation. The iteratee is invoked with one argument; (index).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} n The number of times to invoke `iteratee`.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.times(3, String);
    	     * // => ['0', '1', '2']
    	     *
    	     *  _.times(4, _.constant(0));
    	     * // => [0, 0, 0, 0]
    	     */
    	    function times(n, iteratee) {
    	      n = toInteger(n);
    	      if (n < 1 || n > MAX_SAFE_INTEGER) {
    	        return [];
    	      }
    	      var index = MAX_ARRAY_LENGTH,
    	          length = nativeMin(n, MAX_ARRAY_LENGTH);

    	      iteratee = getIteratee(iteratee);
    	      n -= MAX_ARRAY_LENGTH;

    	      var result = baseTimes(length, iteratee);
    	      while (++index < n) {
    	        iteratee(index);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a property path array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the new property path array.
    	     * @example
    	     *
    	     * _.toPath('a.b.c');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toPath('a[0].b.c');
    	     * // => ['a', '0', 'b', 'c']
    	     */
    	    function toPath(value) {
    	      if (isArray(value)) {
    	        return arrayMap(value, toKey);
    	      }
    	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    	    }

    	    /**
    	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {string} [prefix=''] The value to prefix the ID with.
    	     * @returns {string} Returns the unique ID.
    	     * @example
    	     *
    	     * _.uniqueId('contact_');
    	     * // => 'contact_104'
    	     *
    	     * _.uniqueId();
    	     * // => '105'
    	     */
    	    function uniqueId(prefix) {
    	      var id = ++idCounter;
    	      return toString(prefix) + id;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Adds two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {number} augend The first number in an addition.
    	     * @param {number} addend The second number in an addition.
    	     * @returns {number} Returns the total.
    	     * @example
    	     *
    	     * _.add(6, 4);
    	     * // => 10
    	     */
    	    var add = createMathOperation(function(augend, addend) {
    	      return augend + addend;
    	    }, 0);

    	    /**
    	     * Computes `number` rounded up to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round up.
    	     * @param {number} [precision=0] The precision to round up to.
    	     * @returns {number} Returns the rounded up number.
    	     * @example
    	     *
    	     * _.ceil(4.006);
    	     * // => 5
    	     *
    	     * _.ceil(6.004, 2);
    	     * // => 6.01
    	     *
    	     * _.ceil(6040, -2);
    	     * // => 6100
    	     */
    	    var ceil = createRound('ceil');

    	    /**
    	     * Divide two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} dividend The first number in a division.
    	     * @param {number} divisor The second number in a division.
    	     * @returns {number} Returns the quotient.
    	     * @example
    	     *
    	     * _.divide(6, 4);
    	     * // => 1.5
    	     */
    	    var divide = createMathOperation(function(dividend, divisor) {
    	      return dividend / divisor;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded down to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round down.
    	     * @param {number} [precision=0] The precision to round down to.
    	     * @returns {number} Returns the rounded down number.
    	     * @example
    	     *
    	     * _.floor(4.006);
    	     * // => 4
    	     *
    	     * _.floor(0.046, 2);
    	     * // => 0.04
    	     *
    	     * _.floor(4060, -2);
    	     * // => 4000
    	     */
    	    var floor = createRound('floor');

    	    /**
    	     * Computes the maximum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * _.max([4, 2, 8, 6]);
    	     * // => 8
    	     *
    	     * _.max([]);
    	     * // => undefined
    	     */
    	    function max(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.max` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.maxBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.maxBy(objects, 'n');
    	     * // => { 'n': 2 }
    	     */
    	    function maxBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Computes the mean of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * _.mean([4, 2, 8, 6]);
    	     * // => 5
    	     */
    	    function mean(array) {
    	      return baseMean(array, identity);
    	    }

    	    /**
    	     * This method is like `_.mean` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be averaged.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.meanBy(objects, function(o) { return o.n; });
    	     * // => 5
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.meanBy(objects, 'n');
    	     * // => 5
    	     */
    	    function meanBy(array, iteratee) {
    	      return baseMean(array, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * Computes the minimum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * _.min([4, 2, 8, 6]);
    	     * // => 2
    	     *
    	     * _.min([]);
    	     * // => undefined
    	     */
    	    function min(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.min` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.minBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 1 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.minBy(objects, 'n');
    	     * // => { 'n': 1 }
    	     */
    	    function minBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Multiply two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} multiplier The first number in a multiplication.
    	     * @param {number} multiplicand The second number in a multiplication.
    	     * @returns {number} Returns the product.
    	     * @example
    	     *
    	     * _.multiply(6, 4);
    	     * // => 24
    	     */
    	    var multiply = createMathOperation(function(multiplier, multiplicand) {
    	      return multiplier * multiplicand;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round.
    	     * @param {number} [precision=0] The precision to round to.
    	     * @returns {number} Returns the rounded number.
    	     * @example
    	     *
    	     * _.round(4.006);
    	     * // => 4
    	     *
    	     * _.round(4.006, 2);
    	     * // => 4.01
    	     *
    	     * _.round(4060, -2);
    	     * // => 4100
    	     */
    	    var round = createRound('round');

    	    /**
    	     * Subtract two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {number} minuend The first number in a subtraction.
    	     * @param {number} subtrahend The second number in a subtraction.
    	     * @returns {number} Returns the difference.
    	     * @example
    	     *
    	     * _.subtract(6, 4);
    	     * // => 2
    	     */
    	    var subtract = createMathOperation(function(minuend, subtrahend) {
    	      return minuend - subtrahend;
    	    }, 0);

    	    /**
    	     * Computes the sum of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * _.sum([4, 2, 8, 6]);
    	     * // => 20
    	     */
    	    function sum(array) {
    	      return (array && array.length)
    	        ? baseSum(array, identity)
    	        : 0;
    	    }

    	    /**
    	     * This method is like `_.sum` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be summed.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.sumBy(objects, function(o) { return o.n; });
    	     * // => 20
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sumBy(objects, 'n');
    	     * // => 20
    	     */
    	    function sumBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSum(array, getIteratee(iteratee, 2))
    	        : 0;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return wrapped values in chain sequences.
    	    lodash.after = after;
    	    lodash.ary = ary;
    	    lodash.assign = assign;
    	    lodash.assignIn = assignIn;
    	    lodash.assignInWith = assignInWith;
    	    lodash.assignWith = assignWith;
    	    lodash.at = at;
    	    lodash.before = before;
    	    lodash.bind = bind;
    	    lodash.bindAll = bindAll;
    	    lodash.bindKey = bindKey;
    	    lodash.castArray = castArray;
    	    lodash.chain = chain;
    	    lodash.chunk = chunk;
    	    lodash.compact = compact;
    	    lodash.concat = concat;
    	    lodash.cond = cond;
    	    lodash.conforms = conforms;
    	    lodash.constant = constant;
    	    lodash.countBy = countBy;
    	    lodash.create = create;
    	    lodash.curry = curry;
    	    lodash.curryRight = curryRight;
    	    lodash.debounce = debounce;
    	    lodash.defaults = defaults;
    	    lodash.defaultsDeep = defaultsDeep;
    	    lodash.defer = defer;
    	    lodash.delay = delay;
    	    lodash.difference = difference;
    	    lodash.differenceBy = differenceBy;
    	    lodash.differenceWith = differenceWith;
    	    lodash.drop = drop;
    	    lodash.dropRight = dropRight;
    	    lodash.dropRightWhile = dropRightWhile;
    	    lodash.dropWhile = dropWhile;
    	    lodash.fill = fill;
    	    lodash.filter = filter;
    	    lodash.flatMap = flatMap;
    	    lodash.flatMapDeep = flatMapDeep;
    	    lodash.flatMapDepth = flatMapDepth;
    	    lodash.flatten = flatten;
    	    lodash.flattenDeep = flattenDeep;
    	    lodash.flattenDepth = flattenDepth;
    	    lodash.flip = flip;
    	    lodash.flow = flow;
    	    lodash.flowRight = flowRight;
    	    lodash.fromPairs = fromPairs;
    	    lodash.functions = functions;
    	    lodash.functionsIn = functionsIn;
    	    lodash.groupBy = groupBy;
    	    lodash.initial = initial;
    	    lodash.intersection = intersection;
    	    lodash.intersectionBy = intersectionBy;
    	    lodash.intersectionWith = intersectionWith;
    	    lodash.invert = invert;
    	    lodash.invertBy = invertBy;
    	    lodash.invokeMap = invokeMap;
    	    lodash.iteratee = iteratee;
    	    lodash.keyBy = keyBy;
    	    lodash.keys = keys;
    	    lodash.keysIn = keysIn;
    	    lodash.map = map;
    	    lodash.mapKeys = mapKeys;
    	    lodash.mapValues = mapValues;
    	    lodash.matches = matches;
    	    lodash.matchesProperty = matchesProperty;
    	    lodash.memoize = memoize;
    	    lodash.merge = merge;
    	    lodash.mergeWith = mergeWith;
    	    lodash.method = method;
    	    lodash.methodOf = methodOf;
    	    lodash.mixin = mixin;
    	    lodash.negate = negate;
    	    lodash.nthArg = nthArg;
    	    lodash.omit = omit;
    	    lodash.omitBy = omitBy;
    	    lodash.once = once;
    	    lodash.orderBy = orderBy;
    	    lodash.over = over;
    	    lodash.overArgs = overArgs;
    	    lodash.overEvery = overEvery;
    	    lodash.overSome = overSome;
    	    lodash.partial = partial;
    	    lodash.partialRight = partialRight;
    	    lodash.partition = partition;
    	    lodash.pick = pick;
    	    lodash.pickBy = pickBy;
    	    lodash.property = property;
    	    lodash.propertyOf = propertyOf;
    	    lodash.pull = pull;
    	    lodash.pullAll = pullAll;
    	    lodash.pullAllBy = pullAllBy;
    	    lodash.pullAllWith = pullAllWith;
    	    lodash.pullAt = pullAt;
    	    lodash.range = range;
    	    lodash.rangeRight = rangeRight;
    	    lodash.rearg = rearg;
    	    lodash.reject = reject;
    	    lodash.remove = remove;
    	    lodash.rest = rest;
    	    lodash.reverse = reverse;
    	    lodash.sampleSize = sampleSize;
    	    lodash.set = set;
    	    lodash.setWith = setWith;
    	    lodash.shuffle = shuffle;
    	    lodash.slice = slice;
    	    lodash.sortBy = sortBy;
    	    lodash.sortedUniq = sortedUniq;
    	    lodash.sortedUniqBy = sortedUniqBy;
    	    lodash.split = split;
    	    lodash.spread = spread;
    	    lodash.tail = tail;
    	    lodash.take = take;
    	    lodash.takeRight = takeRight;
    	    lodash.takeRightWhile = takeRightWhile;
    	    lodash.takeWhile = takeWhile;
    	    lodash.tap = tap;
    	    lodash.throttle = throttle;
    	    lodash.thru = thru;
    	    lodash.toArray = toArray;
    	    lodash.toPairs = toPairs;
    	    lodash.toPairsIn = toPairsIn;
    	    lodash.toPath = toPath;
    	    lodash.toPlainObject = toPlainObject;
    	    lodash.transform = transform;
    	    lodash.unary = unary;
    	    lodash.union = union;
    	    lodash.unionBy = unionBy;
    	    lodash.unionWith = unionWith;
    	    lodash.uniq = uniq;
    	    lodash.uniqBy = uniqBy;
    	    lodash.uniqWith = uniqWith;
    	    lodash.unset = unset;
    	    lodash.unzip = unzip;
    	    lodash.unzipWith = unzipWith;
    	    lodash.update = update;
    	    lodash.updateWith = updateWith;
    	    lodash.values = values;
    	    lodash.valuesIn = valuesIn;
    	    lodash.without = without;
    	    lodash.words = words;
    	    lodash.wrap = wrap;
    	    lodash.xor = xor;
    	    lodash.xorBy = xorBy;
    	    lodash.xorWith = xorWith;
    	    lodash.zip = zip;
    	    lodash.zipObject = zipObject;
    	    lodash.zipObjectDeep = zipObjectDeep;
    	    lodash.zipWith = zipWith;

    	    // Add aliases.
    	    lodash.entries = toPairs;
    	    lodash.entriesIn = toPairsIn;
    	    lodash.extend = assignIn;
    	    lodash.extendWith = assignInWith;

    	    // Add methods to `lodash.prototype`.
    	    mixin(lodash, lodash);

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return unwrapped values in chain sequences.
    	    lodash.add = add;
    	    lodash.attempt = attempt;
    	    lodash.camelCase = camelCase;
    	    lodash.capitalize = capitalize;
    	    lodash.ceil = ceil;
    	    lodash.clamp = clamp;
    	    lodash.clone = clone;
    	    lodash.cloneDeep = cloneDeep;
    	    lodash.cloneDeepWith = cloneDeepWith;
    	    lodash.cloneWith = cloneWith;
    	    lodash.conformsTo = conformsTo;
    	    lodash.deburr = deburr;
    	    lodash.defaultTo = defaultTo;
    	    lodash.divide = divide;
    	    lodash.endsWith = endsWith;
    	    lodash.eq = eq;
    	    lodash.escape = escape;
    	    lodash.escapeRegExp = escapeRegExp;
    	    lodash.every = every;
    	    lodash.find = find;
    	    lodash.findIndex = findIndex;
    	    lodash.findKey = findKey;
    	    lodash.findLast = findLast;
    	    lodash.findLastIndex = findLastIndex;
    	    lodash.findLastKey = findLastKey;
    	    lodash.floor = floor;
    	    lodash.forEach = forEach;
    	    lodash.forEachRight = forEachRight;
    	    lodash.forIn = forIn;
    	    lodash.forInRight = forInRight;
    	    lodash.forOwn = forOwn;
    	    lodash.forOwnRight = forOwnRight;
    	    lodash.get = get;
    	    lodash.gt = gt;
    	    lodash.gte = gte;
    	    lodash.has = has;
    	    lodash.hasIn = hasIn;
    	    lodash.head = head;
    	    lodash.identity = identity;
    	    lodash.includes = includes;
    	    lodash.indexOf = indexOf;
    	    lodash.inRange = inRange;
    	    lodash.invoke = invoke;
    	    lodash.isArguments = isArguments;
    	    lodash.isArray = isArray;
    	    lodash.isArrayBuffer = isArrayBuffer;
    	    lodash.isArrayLike = isArrayLike;
    	    lodash.isArrayLikeObject = isArrayLikeObject;
    	    lodash.isBoolean = isBoolean;
    	    lodash.isBuffer = isBuffer;
    	    lodash.isDate = isDate;
    	    lodash.isElement = isElement;
    	    lodash.isEmpty = isEmpty;
    	    lodash.isEqual = isEqual;
    	    lodash.isEqualWith = isEqualWith;
    	    lodash.isError = isError;
    	    lodash.isFinite = isFinite;
    	    lodash.isFunction = isFunction;
    	    lodash.isInteger = isInteger;
    	    lodash.isLength = isLength;
    	    lodash.isMap = isMap;
    	    lodash.isMatch = isMatch;
    	    lodash.isMatchWith = isMatchWith;
    	    lodash.isNaN = isNaN;
    	    lodash.isNative = isNative;
    	    lodash.isNil = isNil;
    	    lodash.isNull = isNull;
    	    lodash.isNumber = isNumber;
    	    lodash.isObject = isObject;
    	    lodash.isObjectLike = isObjectLike;
    	    lodash.isPlainObject = isPlainObject;
    	    lodash.isRegExp = isRegExp;
    	    lodash.isSafeInteger = isSafeInteger;
    	    lodash.isSet = isSet;
    	    lodash.isString = isString;
    	    lodash.isSymbol = isSymbol;
    	    lodash.isTypedArray = isTypedArray;
    	    lodash.isUndefined = isUndefined;
    	    lodash.isWeakMap = isWeakMap;
    	    lodash.isWeakSet = isWeakSet;
    	    lodash.join = join;
    	    lodash.kebabCase = kebabCase;
    	    lodash.last = last;
    	    lodash.lastIndexOf = lastIndexOf;
    	    lodash.lowerCase = lowerCase;
    	    lodash.lowerFirst = lowerFirst;
    	    lodash.lt = lt;
    	    lodash.lte = lte;
    	    lodash.max = max;
    	    lodash.maxBy = maxBy;
    	    lodash.mean = mean;
    	    lodash.meanBy = meanBy;
    	    lodash.min = min;
    	    lodash.minBy = minBy;
    	    lodash.stubArray = stubArray;
    	    lodash.stubFalse = stubFalse;
    	    lodash.stubObject = stubObject;
    	    lodash.stubString = stubString;
    	    lodash.stubTrue = stubTrue;
    	    lodash.multiply = multiply;
    	    lodash.nth = nth;
    	    lodash.noConflict = noConflict;
    	    lodash.noop = noop;
    	    lodash.now = now;
    	    lodash.pad = pad;
    	    lodash.padEnd = padEnd;
    	    lodash.padStart = padStart;
    	    lodash.parseInt = parseInt;
    	    lodash.random = random;
    	    lodash.reduce = reduce;
    	    lodash.reduceRight = reduceRight;
    	    lodash.repeat = repeat;
    	    lodash.replace = replace;
    	    lodash.result = result;
    	    lodash.round = round;
    	    lodash.runInContext = runInContext;
    	    lodash.sample = sample;
    	    lodash.size = size;
    	    lodash.snakeCase = snakeCase;
    	    lodash.some = some;
    	    lodash.sortedIndex = sortedIndex;
    	    lodash.sortedIndexBy = sortedIndexBy;
    	    lodash.sortedIndexOf = sortedIndexOf;
    	    lodash.sortedLastIndex = sortedLastIndex;
    	    lodash.sortedLastIndexBy = sortedLastIndexBy;
    	    lodash.sortedLastIndexOf = sortedLastIndexOf;
    	    lodash.startCase = startCase;
    	    lodash.startsWith = startsWith;
    	    lodash.subtract = subtract;
    	    lodash.sum = sum;
    	    lodash.sumBy = sumBy;
    	    lodash.template = template;
    	    lodash.times = times;
    	    lodash.toFinite = toFinite;
    	    lodash.toInteger = toInteger;
    	    lodash.toLength = toLength;
    	    lodash.toLower = toLower;
    	    lodash.toNumber = toNumber;
    	    lodash.toSafeInteger = toSafeInteger;
    	    lodash.toString = toString;
    	    lodash.toUpper = toUpper;
    	    lodash.trim = trim;
    	    lodash.trimEnd = trimEnd;
    	    lodash.trimStart = trimStart;
    	    lodash.truncate = truncate;
    	    lodash.unescape = unescape;
    	    lodash.uniqueId = uniqueId;
    	    lodash.upperCase = upperCase;
    	    lodash.upperFirst = upperFirst;

    	    // Add aliases.
    	    lodash.each = forEach;
    	    lodash.eachRight = forEachRight;
    	    lodash.first = head;

    	    mixin(lodash, (function() {
    	      var source = {};
    	      baseForOwn(lodash, function(func, methodName) {
    	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
    	          source[methodName] = func;
    	        }
    	      });
    	      return source;
    	    }()), { 'chain': false });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The semantic version number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {string}
    	     */
    	    lodash.VERSION = VERSION;

    	    // Assign default placeholders.
    	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
    	      lodash[methodName].placeholder = lodash;
    	    });

    	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    	    arrayEach(['drop', 'take'], function(methodName, index) {
    	      LazyWrapper.prototype[methodName] = function(n) {
    	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

    	        var result = (this.__filtered__ && !index)
    	          ? new LazyWrapper(this)
    	          : this.clone();

    	        if (result.__filtered__) {
    	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
    	        } else {
    	          result.__views__.push({
    	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
    	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
    	          });
    	        }
    	        return result;
    	      };

    	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
    	        return this.reverse()[methodName](n).reverse();
    	      };
    	    });

    	    // Add `LazyWrapper` methods that accept an `iteratee` value.
    	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    	      var type = index + 1,
    	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

    	      LazyWrapper.prototype[methodName] = function(iteratee) {
    	        var result = this.clone();
    	        result.__iteratees__.push({
    	          'iteratee': getIteratee(iteratee, 3),
    	          'type': type
    	        });
    	        result.__filtered__ = result.__filtered__ || isFilter;
    	        return result;
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    	    arrayEach(['head', 'last'], function(methodName, index) {
    	      var takeName = 'take' + (index ? 'Right' : '');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this[takeName](1).value()[0];
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    	    arrayEach(['initial', 'tail'], function(methodName, index) {
    	      var dropName = 'drop' + (index ? '' : 'Right');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    	      };
    	    });

    	    LazyWrapper.prototype.compact = function() {
    	      return this.filter(identity);
    	    };

    	    LazyWrapper.prototype.find = function(predicate) {
    	      return this.filter(predicate).head();
    	    };

    	    LazyWrapper.prototype.findLast = function(predicate) {
    	      return this.reverse().find(predicate);
    	    };

    	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
    	      if (typeof path == 'function') {
    	        return new LazyWrapper(this);
    	      }
    	      return this.map(function(value) {
    	        return baseInvoke(value, path, args);
    	      });
    	    });

    	    LazyWrapper.prototype.reject = function(predicate) {
    	      return this.filter(negate(getIteratee(predicate)));
    	    };

    	    LazyWrapper.prototype.slice = function(start, end) {
    	      start = toInteger(start);

    	      var result = this;
    	      if (result.__filtered__ && (start > 0 || end < 0)) {
    	        return new LazyWrapper(result);
    	      }
    	      if (start < 0) {
    	        result = result.takeRight(-start);
    	      } else if (start) {
    	        result = result.drop(start);
    	      }
    	      if (end !== undefined$1) {
    	        end = toInteger(end);
    	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    	      }
    	      return result;
    	    };

    	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
    	      return this.reverse().takeWhile(predicate).reverse();
    	    };

    	    LazyWrapper.prototype.toArray = function() {
    	      return this.take(MAX_ARRAY_LENGTH);
    	    };

    	    // Add `LazyWrapper` methods to `lodash.prototype`.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
    	          isTaker = /^(?:head|last)$/.test(methodName),
    	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
    	          retUnwrapped = isTaker || /^find/.test(methodName);

    	      if (!lodashFunc) {
    	        return;
    	      }
    	      lodash.prototype[methodName] = function() {
    	        var value = this.__wrapped__,
    	            args = isTaker ? [1] : arguments,
    	            isLazy = value instanceof LazyWrapper,
    	            iteratee = args[0],
    	            useLazy = isLazy || isArray(value);

    	        var interceptor = function(value) {
    	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
    	          return (isTaker && chainAll) ? result[0] : result;
    	        };

    	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
    	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
    	          isLazy = useLazy = false;
    	        }
    	        var chainAll = this.__chain__,
    	            isHybrid = !!this.__actions__.length,
    	            isUnwrapped = retUnwrapped && !chainAll,
    	            onlyLazy = isLazy && !isHybrid;

    	        if (!retUnwrapped && useLazy) {
    	          value = onlyLazy ? value : new LazyWrapper(this);
    	          var result = func.apply(value, args);
    	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
    	          return new LodashWrapper(result, chainAll);
    	        }
    	        if (isUnwrapped && onlyLazy) {
    	          return func.apply(this, args);
    	        }
    	        result = this.thru(interceptor);
    	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    	      };
    	    });

    	    // Add `Array` methods to `lodash.prototype`.
    	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    	      var func = arrayProto[methodName],
    	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
    	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

    	      lodash.prototype[methodName] = function() {
    	        var args = arguments;
    	        if (retUnwrapped && !this.__chain__) {
    	          var value = this.value();
    	          return func.apply(isArray(value) ? value : [], args);
    	        }
    	        return this[chainName](function(value) {
    	          return func.apply(isArray(value) ? value : [], args);
    	        });
    	      };
    	    });

    	    // Map minified method names to their real names.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var lodashFunc = lodash[methodName];
    	      if (lodashFunc) {
    	        var key = lodashFunc.name + '';
    	        if (!hasOwnProperty.call(realNames, key)) {
    	          realNames[key] = [];
    	        }
    	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
    	      }
    	    });

    	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
    	      'name': 'wrapper',
    	      'func': undefined$1
    	    }];

    	    // Add methods to `LazyWrapper`.
    	    LazyWrapper.prototype.clone = lazyClone;
    	    LazyWrapper.prototype.reverse = lazyReverse;
    	    LazyWrapper.prototype.value = lazyValue;

    	    // Add chain sequence methods to the `lodash` wrapper.
    	    lodash.prototype.at = wrapperAt;
    	    lodash.prototype.chain = wrapperChain;
    	    lodash.prototype.commit = wrapperCommit;
    	    lodash.prototype.next = wrapperNext;
    	    lodash.prototype.plant = wrapperPlant;
    	    lodash.prototype.reverse = wrapperReverse;
    	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    	    // Add lazy aliases.
    	    lodash.prototype.first = lodash.prototype.head;

    	    if (symIterator) {
    	      lodash.prototype[symIterator] = wrapperToIterator;
    	    }
    	    return lodash;
    	  });

    	  /*--------------------------------------------------------------------------*/

    	  // Export lodash.
    	  var _ = runInContext();

    	  // Some AMD build optimizers, like r.js, check for condition patterns like:
    	  if (freeModule) {
    	    // Export for Node.js.
    	    (freeModule.exports = _)._ = _;
    	    // Export for CommonJS support.
    	    freeExports._ = _;
    	  }
    	  else {
    	    // Export to the global object.
    	    root._ = _;
    	  }
    	}.call(commonjsGlobal)); 
    } (lodash, lodash.exports));

    var lodashExports = lodash.exports;

    // Copyright 2016 gRPC authors.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //     http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    /**
     * See [grpc status_code_enum.h](https://github.com/grpc/grpc/blob/a19d8dcfb50caa81cddc25bc1a6afdd7a2f497b7/include/grpcpp/impl/codegen/status_code_enum.h#L24)
     *
     * Copyright 2020 Google LLC
     */
    var GrpcStatusCode;
    (function (GrpcStatusCode) {
        /**
         * Not an error; returned on success.
         */
        GrpcStatusCode[GrpcStatusCode["OK"] = 0] = "OK";
        /**
         * The operation was cancelled (typically by the caller).
         */
        GrpcStatusCode[GrpcStatusCode["CANCELLED"] = 1] = "CANCELLED";
        /**
         * Unknown error. An example of where this error may be returned is if a
         * Status value received from another address space belongs to an error-space
         * that is not known in this address space. Also errors raised by APIs that
         * do not return enough error information may be converted to this error.
         */
        GrpcStatusCode[GrpcStatusCode["UNKNOWN"] = 2] = "UNKNOWN";
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        GrpcStatusCode[GrpcStatusCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        GrpcStatusCode[GrpcStatusCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
        /**
         * Some requested entity (e.g., file or directory) was not found.
         */
        GrpcStatusCode[GrpcStatusCode["NOT_FOUND"] = 5] = "NOT_FOUND";
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        GrpcStatusCode[GrpcStatusCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        GrpcStatusCode[GrpcStatusCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        GrpcStatusCode[GrpcStatusCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        GrpcStatusCode[GrpcStatusCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
        /**
         * Operation was rejected because the system is not in a state required for
         * the operations execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        GrpcStatusCode[GrpcStatusCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        GrpcStatusCode[GrpcStatusCode["ABORTED"] = 10] = "ABORTED";
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        GrpcStatusCode[GrpcStatusCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
        /**
         * Operation is not implemented or not supported/enabled in this service.
         */
        GrpcStatusCode[GrpcStatusCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        GrpcStatusCode[GrpcStatusCode["INTERNAL"] = 13] = "INTERNAL";
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        GrpcStatusCode[GrpcStatusCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
        /**
         * Unrecoverable data loss or corruption.
         */
        GrpcStatusCode[GrpcStatusCode["DATA_LOSS"] = 15] = "DATA_LOSS";
    })(GrpcStatusCode || (GrpcStatusCode = {}));

    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Create fetch API headers for a grpc-web request.
     */
    function createGrpcWebRequestHeader(headers, format, timeout, meta, userAgent) {
        // add meta as headers
        if (meta) {
            for (let [k, v] of Object.entries(meta)) {
                if (typeof v == "string")
                    headers.append(k, v);
                else
                    for (let i of v)
                        headers.append(k, i);
            }
        }
        // set standard headers (possibly overwriting meta)
        headers.set('Content-Type', format === "text" ? "application/grpc-web-text" : "application/grpc-web+proto");
        if (format == "text") {
            // The client library should indicate to the server via the "Accept" header that
            // the response stream needs to be text encoded e.g. when XHR is used or due to
            // security policies with XHR
            headers.set("Accept", "application/grpc-web-text");
        }
        headers.set('X-Grpc-Web', "1");
        if (userAgent)
            headers.set("X-User-Agent", userAgent);
        if (typeof timeout === "number") {
            if (timeout <= 0) {
                // we raise an error ourselves because header "grpc-timeout" must be a positive integer
                throw new RpcError(`timeout ${timeout} ms exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);
            }
            headers.set('grpc-timeout', `${timeout}m`);
        }
        else if (timeout) {
            const deadline = timeout.getTime();
            const now = Date.now();
            if (deadline <= now) {
                // we raise an error ourselves because header "grpc-timeout" must be a positive integer
                throw new RpcError(`deadline ${timeout} exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);
            }
            headers.set('grpc-timeout', `${deadline - now}m`);
        }
        return headers;
    }
    function createGrpcWebRequestBody(message, format) {
        let body = new Uint8Array(5 + message.length); // we need 5 bytes for frame type + message length
        body[0] = GrpcWebFrame.DATA; // first byte is frame type
        // 4 bytes message length
        for (let msgLen = message.length, i = 4; i > 0; i--) {
            body[i] = (msgLen % 256);
            msgLen >>>= 8;
        }
        body.set(message, 5); // reset is message
        return format === "binary" ? body : base64encode(body);
    }
    function readGrpcWebResponseHeader(headersOrFetchResponse, httpStatus, httpStatusText) {
        if (arguments.length === 1) {
            let fetchResponse = headersOrFetchResponse;
            // Cloudflare Workers throw when the type property of a fetch response
            // is accessed, so wrap access with try/catch. See:
            // * https://developers.cloudflare.com/workers/runtime-apis/response/#properties
            // * https://github.com/cloudflare/miniflare/blob/72f046e/packages/core/src/standards/http.ts#L646
            let responseType;
            try {
                responseType = fetchResponse.type;
            }
            catch (_a) { }
            switch (responseType) {
                case "error":
                case "opaque":
                case "opaqueredirect":
                    // see https://developer.mozilla.org/en-US/docs/Web/API/Response/type
                    throw new RpcError(`fetch response type ${fetchResponse.type}`, GrpcStatusCode[GrpcStatusCode.UNKNOWN]);
            }
            return readGrpcWebResponseHeader(fetchHeadersToHttp(fetchResponse.headers), fetchResponse.status, fetchResponse.statusText);
        }
        let headers = headersOrFetchResponse, httpOk = httpStatus >= 200 && httpStatus < 300, responseMeta = parseMetadata(headers), [statusCode, statusDetail] = parseStatus(headers);
        if ((statusCode === undefined || statusCode === GrpcStatusCode.OK) && !httpOk) {
            statusCode = httpStatusToGrpc(httpStatus);
            statusDetail = httpStatusText;
        }
        return [statusCode, statusDetail, responseMeta];
    }
    /**
     * Parses a grpc status (code and optional text) and meta data from response
     * trailers.
     *
     * Response trailers are expected as a byte array, but are actually just an
     * ASCII string with HTTP headers. Just pass the data of a grpc-web trailer
     * frame.
     */
    function readGrpcWebResponseTrailer(data) {
        let headers = parseTrailer(data), [code, detail] = parseStatus(headers), meta = parseMetadata(headers);
        return [code !== null && code !== void 0 ? code : GrpcStatusCode.OK, detail, meta];
    }
    /**
     * A grpc-frame type. Can be used to determine type of frame emitted by
     * `readGrpcWebResponseBody()`.
     */
    var GrpcWebFrame;
    (function (GrpcWebFrame) {
        GrpcWebFrame[GrpcWebFrame["DATA"] = 0] = "DATA";
        GrpcWebFrame[GrpcWebFrame["TRAILER"] = 128] = "TRAILER";
    })(GrpcWebFrame || (GrpcWebFrame = {}));
    /**
     * Parses a grpc-web response (unary or server streaming) from a fetch API
     * stream.
     *
     * Emits grpc-web frames.
     *
     * The returned promise resolves when the response is complete.
     */
    function readGrpcWebResponseBody(stream, contentType, onFrame) {
        return __awaiter(this, void 0, void 0, function* () {
            let streamReader, base64queue = "", byteQueue = new Uint8Array(0), format = parseFormat(contentType);
            // allows to read streams from the 'node-fetch' polyfill which uses
            // node.js ReadableStream instead of the what-wg streams api ReadableStream
            if (isReadableStream(stream)) {
                let whatWgReadableStream = stream.getReader();
                streamReader = {
                    next: () => whatWgReadableStream.read()
                };
            }
            else {
                streamReader = stream[Symbol.asyncIterator]();
            }
            while (true) {
                let result = yield streamReader.next();
                if (result.value !== undefined) {
                    if (format === "text") {
                        // the statements below just decode base64 and append to `bytesUnread`
                        // add incoming base64 to queue
                        for (let i = 0; i < result.value.length; i++)
                            base64queue += String.fromCharCode(result.value[i]);
                        // if the base64 queue is not a multiple of 4,
                        // we have to wait for more data
                        let safeLen = base64queue.length - base64queue.length % 4;
                        if (safeLen === 0)
                            continue;
                        // decode safe chunk of base64 and add to byte queue
                        byteQueue = concatBytes(byteQueue, base64decode(base64queue.substring(0, safeLen)));
                        base64queue = base64queue.substring(safeLen);
                    }
                    else {
                        byteQueue = concatBytes(byteQueue, result.value);
                    }
                    // read all fully available data frames
                    while (byteQueue.length >= 5 && byteQueue[0] === GrpcWebFrame.DATA) {
                        let msgLen = 0;
                        for (let i = 1; i < 5; i++)
                            msgLen = (msgLen << 8) + byteQueue[i];
                        if (byteQueue.length - 5 >= msgLen) {
                            // we have the entire message
                            onFrame(GrpcWebFrame.DATA, byteQueue.subarray(5, 5 + msgLen));
                            byteQueue = byteQueue.subarray(5 + msgLen);
                        }
                        else
                            break; //  wait for more data
                    }
                }
                // exit, but emit trailer if exists
                if (result.done) {
                    if (byteQueue.length === 0)
                        break;
                    if (byteQueue[0] !== GrpcWebFrame.TRAILER || byteQueue.length < 5)
                        throw new RpcError("premature EOF", GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                    onFrame(GrpcWebFrame.TRAILER, byteQueue.subarray(5));
                    break;
                }
            }
        });
    }
    // internal
    const isReadableStream = (s) => {
        return typeof s.getReader == "function";
    };
    // internal
    function concatBytes(a, b) {
        let n = new Uint8Array(a.length + b.length);
        n.set(a);
        n.set(b, a.length);
        return n;
    }
    // determines format from response "content-type" value.
    // throws if value is unknown or missing.
    function parseFormat(contentType) {
        // > the sender *should* always specify the message format, e.g. +proto, +json
        //
        // > the receiver should assume the default is "+proto" when the message format is
        // > missing in Content-Type (as "application/grpc-web")
        //
        // see https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md
        switch (contentType) {
            case "application/grpc-web-text":
            case "application/grpc-web-text+proto":
                return "text";
            case "application/grpc-web":
            case "application/grpc-web+proto":
                return "binary";
            case undefined:
            case null:
                throw new RpcError("missing response content type", GrpcStatusCode[GrpcStatusCode.INTERNAL]);
            default:
                throw new RpcError("unexpected response content type: " + contentType, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
        }
    }
    // returns error code on parse failure
    function parseStatus(headers) {
        let code, message;
        let m = headers['grpc-message'];
        if (m !== undefined) {
            if (Array.isArray(m))
                return [GrpcStatusCode.INTERNAL, "invalid grpc-web message"];
            message = m;
        }
        let s = headers['grpc-status'];
        if (s !== undefined) {
            if (Array.isArray(s))
                return [GrpcStatusCode.INTERNAL, "invalid grpc-web status"];
            code = parseInt(s, 10);
            if (GrpcStatusCode[code] === undefined)
                return [GrpcStatusCode.INTERNAL, "invalid grpc-web status"];
        }
        return [code, message];
    }
    // skips grpc-web headers
    function parseMetadata(headers) {
        let meta = {};
        for (let [k, v] of Object.entries(headers))
            switch (k) {
                case 'grpc-message':
                case 'grpc-status':
                case 'content-type':
                    break;
                default:
                    meta[k] = v;
            }
        return meta;
    }
    // parse trailer data (ASCII) to our headers rep
    function parseTrailer(trailerData) {
        let headers = {};
        for (let chunk of String.fromCharCode.apply(String, trailerData).trim().split("\r\n")) {
            if (chunk == "")
                continue;
            let [key, ...val] = chunk.split(":");
            const value = val.join(":").trim();
            key = key.trim();
            let e = headers[key];
            if (typeof e == "string")
                headers[key] = [e, value];
            else if (Array.isArray(e))
                e.push(value);
            else
                headers[key] = value;
        }
        return headers;
    }
    // fetch API to our headers rep
    function fetchHeadersToHttp(fetchHeaders) {
        let headers = {};
        fetchHeaders.forEach((value, key) => {
            let e = headers[key];
            if (typeof e == "string")
                headers[key] = [e, value];
            else if (Array.isArray(e))
                e.push(value);
            else
                headers[key] = value;
        });
        return headers;
    }
    // internal
    function httpStatusToGrpc(httpStatus) {
        switch (httpStatus) {
            case 200:
                return GrpcStatusCode.OK;
            case 400:
                return GrpcStatusCode.INVALID_ARGUMENT;
            case 401:
                return GrpcStatusCode.UNAUTHENTICATED;
            case 403:
                return GrpcStatusCode.PERMISSION_DENIED;
            case 404:
                return GrpcStatusCode.NOT_FOUND;
            case 409:
                return GrpcStatusCode.ABORTED;
            case 412:
                return GrpcStatusCode.FAILED_PRECONDITION;
            case 429:
                return GrpcStatusCode.RESOURCE_EXHAUSTED;
            case 499:
                return GrpcStatusCode.CANCELLED;
            case 500:
                return GrpcStatusCode.UNKNOWN;
            case 501:
                return GrpcStatusCode.UNIMPLEMENTED;
            case 503:
                return GrpcStatusCode.UNAVAILABLE;
            case 504:
                return GrpcStatusCode.DEADLINE_EXCEEDED;
            default:
                return GrpcStatusCode.UNKNOWN;
        }
    }

    /**
     * Implements the grpc-web protocol, supporting text format or binary
     * format on the wire. Uses the fetch API to do the HTTP requests.
     *
     * Does not support client streaming or duplex calls because grpc-web
     * does not support them.
     */
    class GrpcWebFetchTransport {
        constructor(defaultOptions) {
            this.defaultOptions = defaultOptions;
        }
        mergeOptions(options) {
            return mergeRpcOptions(this.defaultOptions, options);
        }
        /**
         * Create an URI for a gRPC web call.
         *
         * Takes the `baseUrl` option and appends:
         * - slash "/"
         * - package name
         * - dot "."
         * - service name
         * - slash "/"
         * - method name
         *
         * If the service was declared without a package, the package name and dot
         * are omitted.
         *
         * All names are used exactly like declared in .proto.
         */
        makeUrl(method, options) {
            let base = options.baseUrl;
            if (base.endsWith('/'))
                base = base.substring(0, base.length - 1);
            return `${base}/${method.service.typeName}/${method.name}`;
        }
        clientStreaming(method /*, options: RpcOptions*/) {
            const e = new RpcError('Client streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);
            e.methodName = method.name;
            e.serviceName = method.service.typeName;
            throw e;
        }
        duplex(method /*, options: RpcOptions*/) {
            const e = new RpcError('Duplex streaming is not supported by grpc-web', GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]);
            e.methodName = method.name;
            e.serviceName = method.service.typeName;
            throw e;
        }
        serverStreaming(method, input, options) {
            var _a, _b, _c, _d;
            let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), responseStream = new RpcOutputStreamController(), responseEmptyBody = true, maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();
            globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`
             }))
                .then(fetchResponse => {
                let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);
                defHeader.resolve(meta);
                if (code != null && code !== GrpcStatusCode.OK)
                    throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);
                if (code != null)
                    maybeStatus = {
                        code: GrpcStatusCode[code],
                        detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]
                    };
                return fetchResponse;
            })
                .then(fetchResponse => {
                if (!fetchResponse.body)
                    throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {
                    switch (type) {
                        case GrpcWebFrame.DATA:
                            responseStream.notifyMessage(method.O.fromBinary(data, opt.binaryOptions));
                            responseEmptyBody = false;
                            break;
                        case GrpcWebFrame.TRAILER:
                            let code, detail;
                            [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);
                            maybeStatus = {
                                code: GrpcStatusCode[code],
                                detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]
                            };
                            break;
                    }
                });
            })
                .then(() => {
                if (!maybeTrailer && !responseEmptyBody)
                    throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                // istanbul ignore if - this should be impossible and only here to satisfy TypeScript
                if (!maybeStatus)
                    throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                if (maybeStatus.code !== 'OK')
                    throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                responseStream.notifyComplete();
                defStatus.resolve(maybeStatus);
                defTrailer.resolve(maybeTrailer || {});
            })
                .catch(reason => {
                let error;
                if (reason instanceof RpcError)
                    error = reason;
                else if (reason instanceof Error && reason.name === 'AbortError')
                    // aborted
                    error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);
                else
                    // RpcErrors are thrown by us, everything else is an internal error
                    error = new RpcError(reason instanceof Error ? reason.message : "" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                error.methodName = method.name;
                error.serviceName = method.service.typeName;
                defHeader.rejectPending(error);
                responseStream.notifyError(error);
                defStatus.rejectPending(error);
                defTrailer.rejectPending(error);
            });
            return new ServerStreamingCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, responseStream, defStatus.promise, defTrailer.promise);
        }
        unary(method, input, options) {
            var _a, _b, _c, _d;
            let opt = options, format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text', fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {}, url = this.makeUrl(method, opt), inputBytes = method.I.toBinary(input, opt.binaryOptions), defHeader = new Deferred(), maybeMessage, defMessage = new Deferred(), maybeStatus, defStatus = new Deferred(), maybeTrailer, defTrailer = new Deferred();
            globalThis.fetch(url, Object.assign(Object.assign({}, fetchInit), { method: 'POST', headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta), body: createGrpcWebRequestBody(inputBytes, format), signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null // node-fetch@3.0.0-beta.9 rejects `undefined`
             }))
                .then(fetchResponse => {
                let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);
                defHeader.resolve(meta);
                if (code != null && code !== GrpcStatusCode.OK)
                    throw new RpcError(detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code], GrpcStatusCode[code], meta);
                if (code != null)
                    maybeStatus = {
                        code: GrpcStatusCode[code],
                        detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]
                    };
                return fetchResponse;
            })
                .then(fetchResponse => {
                if (!fetchResponse.body)
                    throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                return readGrpcWebResponseBody(fetchResponse.body, fetchResponse.headers.get('content-type'), (type, data) => {
                    switch (type) {
                        case GrpcWebFrame.DATA:
                            if (maybeMessage)
                                throw new RpcError(`unary call received 2nd message`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                            maybeMessage = method.O.fromBinary(data, opt.binaryOptions);
                            break;
                        case GrpcWebFrame.TRAILER:
                            let code, detail;
                            [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);
                            maybeStatus = {
                                code: GrpcStatusCode[code],
                                detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code]
                            };
                            break;
                    }
                });
            })
                .then(() => {
                if (!maybeTrailer && maybeMessage)
                    throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                // istanbul ignore if - this should be impossible and only here to satisfy TypeScript
                if (!maybeStatus)
                    throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                if (!maybeMessage && maybeStatus.code === 'OK')
                    throw new RpcError('expected error status', GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                if (!maybeMessage)
                    throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                defMessage.resolve(maybeMessage);
                if (maybeStatus.code !== 'OK')
                    throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                defStatus.resolve(maybeStatus);
                defTrailer.resolve(maybeTrailer || {});
            })
                .catch(reason => {
                let error;
                if (reason instanceof RpcError)
                    error = reason;
                else if (reason instanceof Error && reason.name === 'AbortError')
                    // aborted
                    error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);
                else
                    // RpcErrors are thrown by us, everything else is an internal error
                    error = new RpcError(reason instanceof Error ? reason.message : "" + reason, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                error.methodName = method.name;
                error.serviceName = method.service.typeName;
                defHeader.rejectPending(error);
                defMessage.rejectPending(error);
                defStatus.rejectPending(error);
                defTrailer.rejectPending(error);
            });
            return new UnaryCall(method, (_d = opt.meta) !== null && _d !== void 0 ? _d : {}, input, defHeader.promise, defMessage.promise, defStatus.promise, defTrailer.promise);
        }
    }

    const createWebFetchTransport = ({ apiUrl, authTokenProvider, useDevTools, }) => {
        return new GrpcWebFetchTransport({
            baseUrl: apiUrl,
            // interceptors: [authTokenProvider ? createAuthInterceptor(authTokenProvider) : {}],
        });
    };

    // @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_number,server_grpc1
    // @generated from protobuf file "normalgw/hpl/v1/command.proto" (package "normalgw.hpl.v1", syntax proto3)
    // tslint:disable
    /**
     * @generated from protobuf enum normalgw.hpl.v1.StartCommandReply.CommandError
     */
    var StartCommandReply_CommandError;
    (function (StartCommandReply_CommandError) {
        /**
         * @generated from protobuf enum value: SUCCESS = 0;
         */
        StartCommandReply_CommandError[StartCommandReply_CommandError["SUCCESS"] = 0] = "SUCCESS";
    })(StartCommandReply_CommandError || (StartCommandReply_CommandError = {}));
    /**
     * @generated from protobuf enum normalgw.hpl.v1.ObserveRawCommandActionsReply.ActionType
     */
    var ObserveRawCommandActionsReply_ActionType;
    (function (ObserveRawCommandActionsReply_ActionType) {
        /**
         * @generated from protobuf enum value: NONE = 0;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["NONE"] = 0] = "NONE";
        /**
         * @generated from protobuf enum value: WRITE = 1;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["WRITE"] = 1] = "WRITE";
        /**
         * @generated from protobuf enum value: CLEAR_WRITE = 2;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["CLEAR_WRITE"] = 2] = "CLEAR_WRITE";
        /**
         * @generated from protobuf enum value: CLEAR_WRITEBACK_READ = 3;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["CLEAR_WRITEBACK_READ"] = 3] = "CLEAR_WRITEBACK_READ";
        /**
         * @generated from protobuf enum value: CLEAR_WRITEBACK_WRITE = 4;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["CLEAR_WRITEBACK_WRITE"] = 4] = "CLEAR_WRITEBACK_WRITE";
        /**
         * the command ended with either success or failure.  Error is set
         * if it's an error
         *
         * @generated from protobuf enum value: END_COMPLETE = 5;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["END_COMPLETE"] = 5] = "END_COMPLETE";
        /**
         * value is the new expiration time
         *
         * @generated from protobuf enum value: EXTEND = 6;
         */
        ObserveRawCommandActionsReply_ActionType[ObserveRawCommandActionsReply_ActionType["EXTEND"] = 6] = "EXTEND";
    })(ObserveRawCommandActionsReply_ActionType || (ObserveRawCommandActionsReply_ActionType = {}));
    // @generated message type with reflection information, may provide speed optimized methods
    class PointCommand$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.PointCommand", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "value", kind: "message", T: () => Value },
                { no: 4, name: "result", kind: "message", T: () => PointCommandError }
            ]);
        }
        create(value) {
            const message = { uuid: "", layer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string layer */ 2:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.Value value */ 3:
                        message.value = Value.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    case /* normalgw.hpl.v1.PointCommandError result */ 4:
                        message.result = PointCommandError.internalBinaryRead(reader, reader.uint32(), options, message.result);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string layer = 2; */
            if (message.layer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.Value value = 3; */
            if (message.value)
                Value.internalBinaryWrite(message.value, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* normalgw.hpl.v1.PointCommandError result = 4; */
            if (message.result)
                PointCommandError.internalBinaryWrite(message.result, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.PointCommand
     */
    const PointCommand = new PointCommand$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class SavedOverride$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.SavedOverride", [
                { no: 1, name: "txid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "value", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { txid: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint64 txid */ 1:
                        message.txid = reader.uint64().toNumber();
                        break;
                    case /* google.protobuf.Any value */ 2:
                        message.value = Any.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint64 txid = 1; */
            if (message.txid !== 0)
                writer.tag(1, WireType.Varint).uint64(message.txid);
            /* google.protobuf.Any value = 2; */
            if (message.value)
                Any.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.SavedOverride
     */
    new SavedOverride$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GenericError$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GenericError", [
                { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { message: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string message */ 1:
                        message.message = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string message = 1; */
            if (message.message !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.message);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GenericError
     */
    new GenericError$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class PointCommandError$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.PointCommandError", [
                { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "error", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { uuid: "", layer: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string uuid */ 1:
                        message.uuid = reader.string();
                        break;
                    case /* string layer */ 2:
                        message.layer = reader.string();
                        break;
                    case /* google.protobuf.Any error */ 3:
                        message.error = Any.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string uuid = 1; */
            if (message.uuid !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.uuid);
            /* string layer = 2; */
            if (message.layer !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.layer);
            /* google.protobuf.Any error = 3; */
            if (message.error)
                Any.internalBinaryWrite(message.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.PointCommandError
     */
    const PointCommandError = new PointCommandError$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class Command$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.Command", [
                { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "expiration", kind: "message", T: () => Timestamp },
                { no: 4, name: "duration", kind: "message", T: () => Duration },
                { no: 5, name: "writes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PointCommand },
                { no: 6, name: "system_priority", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { id: 0, name: "", writes: [], systemPriority: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint64 id */ 1:
                        message.id = reader.uint64().toNumber();
                        break;
                    case /* string name */ 2:
                        message.name = reader.string();
                        break;
                    case /* google.protobuf.Timestamp expiration */ 3:
                        message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                        break;
                    case /* google.protobuf.Duration duration */ 4:
                        message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                        break;
                    case /* repeated normalgw.hpl.v1.PointCommand writes */ 5:
                        message.writes.push(PointCommand.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* uint64 system_priority */ 6:
                        message.systemPriority = reader.uint64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint64 id = 1; */
            if (message.id !== 0)
                writer.tag(1, WireType.Varint).uint64(message.id);
            /* string name = 2; */
            if (message.name !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.name);
            /* google.protobuf.Timestamp expiration = 3; */
            if (message.expiration)
                Timestamp.internalBinaryWrite(message.expiration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Duration duration = 4; */
            if (message.duration)
                Duration.internalBinaryWrite(message.duration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
            /* repeated normalgw.hpl.v1.PointCommand writes = 5; */
            for (let i = 0; i < message.writes.length; i++)
                PointCommand.internalBinaryWrite(message.writes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
            /* uint64 system_priority = 6; */
            if (message.systemPriority !== 0)
                writer.tag(6, WireType.Varint).uint64(message.systemPriority);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.Command
     */
    const Command = new Command$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StartCommandRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.StartCommandRequest", [
                { no: 1, name: "command", kind: "message", T: () => Command },
                { no: 2, name: "truncate_floats", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 3, name: "cancel_on_conflict", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 4, name: "cancel_on_error", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
            ]);
        }
        create(value) {
            const message = { truncateFloats: false, cancelOnConflict: false, cancelOnError: false };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* normalgw.hpl.v1.Command command */ 1:
                        message.command = Command.internalBinaryRead(reader, reader.uint32(), options, message.command);
                        break;
                    case /* bool truncate_floats */ 2:
                        message.truncateFloats = reader.bool();
                        break;
                    case /* bool cancel_on_conflict */ 3:
                        message.cancelOnConflict = reader.bool();
                        break;
                    case /* bool cancel_on_error */ 4:
                        message.cancelOnError = reader.bool();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* normalgw.hpl.v1.Command command = 1; */
            if (message.command)
                Command.internalBinaryWrite(message.command, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* bool truncate_floats = 2; */
            if (message.truncateFloats !== false)
                writer.tag(2, WireType.Varint).bool(message.truncateFloats);
            /* bool cancel_on_conflict = 3; */
            if (message.cancelOnConflict !== false)
                writer.tag(3, WireType.Varint).bool(message.cancelOnConflict);
            /* bool cancel_on_error = 4; */
            if (message.cancelOnError !== false)
                writer.tag(4, WireType.Varint).bool(message.cancelOnError);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.StartCommandRequest
     */
    const StartCommandRequest = new StartCommandRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class StartCommandReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.StartCommandReply", [
                { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PointCommandError },
                { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
            ]);
        }
        create(value) {
            const message = { id: 0, errors: [], message: "" };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint64 id */ 1:
                        message.id = reader.uint64().toNumber();
                        break;
                    case /* repeated normalgw.hpl.v1.PointCommandError errors */ 2:
                        message.errors.push(PointCommandError.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* string message */ 3:
                        message.message = reader.string();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint64 id = 1; */
            if (message.id !== 0)
                writer.tag(1, WireType.Varint).uint64(message.id);
            /* repeated normalgw.hpl.v1.PointCommandError errors = 2; */
            for (let i = 0; i < message.errors.length; i++)
                PointCommandError.internalBinaryWrite(message.errors[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            /* string message = 3; */
            if (message.message !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.message);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.StartCommandReply
     */
    const StartCommandReply = new StartCommandReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetCommandsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetCommandsRequest", [
                { no: 1, name: "page_offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { pageOffset: 0, pageSize: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* int64 page_offset */ 1:
                        message.pageOffset = reader.int64().toNumber();
                        break;
                    case /* int64 page_size */ 2:
                        message.pageSize = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* int64 page_offset = 1; */
            if (message.pageOffset !== 0)
                writer.tag(1, WireType.Varint).int64(message.pageOffset);
            /* int64 page_size = 2; */
            if (message.pageSize !== 0)
                writer.tag(2, WireType.Varint).int64(message.pageSize);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetCommandsRequest
     */
    const GetCommandsRequest = new GetCommandsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class GetCommandsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.GetCommandsReply", [
                { no: 1, name: "commands", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Command },
                { no: 2, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { commands: [], totalCount: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* repeated normalgw.hpl.v1.Command commands */ 1:
                        message.commands.push(Command.internalBinaryRead(reader, reader.uint32(), options));
                        break;
                    case /* int64 total_count */ 2:
                        message.totalCount = reader.int64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* repeated normalgw.hpl.v1.Command commands = 1; */
            for (let i = 0; i < message.commands.length; i++)
                Command.internalBinaryWrite(message.commands[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* int64 total_count = 2; */
            if (message.totalCount !== 0)
                writer.tag(2, WireType.Varint).int64(message.totalCount);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.GetCommandsReply
     */
    const GetCommandsReply = new GetCommandsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CancelCommandRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CancelCommandRequest", [
                { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { id: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint64 id */ 1:
                        message.id = reader.uint64().toNumber();
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint64 id = 1; */
            if (message.id !== 0)
                writer.tag(1, WireType.Varint).uint64(message.id);
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CancelCommandRequest
     */
    const CancelCommandRequest = new CancelCommandRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class CancelCommandReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.CancelCommandReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.CancelCommandReply
     */
    const CancelCommandReply = new CancelCommandReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveRawCommandActionsRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveRawCommandActionsRequest", [
                { no: 1, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 2, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 4, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
                { no: 5, name: "wait", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
                { no: 6, name: "command_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
            ]);
        }
        create(value) {
            const message = { layer: "", uuid: "", version: "", limit: 0, wait: false, commandIds: [] };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* string layer */ 1:
                        message.layer = reader.string();
                        break;
                    case /* string uuid */ 2:
                        message.uuid = reader.string();
                        break;
                    case /* string version */ 3:
                        message.version = reader.string();
                        break;
                    case /* uint32 limit */ 4:
                        message.limit = reader.uint32();
                        break;
                    case /* bool wait */ 5:
                        message.wait = reader.bool();
                        break;
                    case /* repeated uint64 command_ids */ 6:
                        if (wireType === WireType.LengthDelimited)
                            for (let e = reader.int32() + reader.pos; reader.pos < e;)
                                message.commandIds.push(reader.uint64().toNumber());
                        else
                            message.commandIds.push(reader.uint64().toNumber());
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* string layer = 1; */
            if (message.layer !== "")
                writer.tag(1, WireType.LengthDelimited).string(message.layer);
            /* string uuid = 2; */
            if (message.uuid !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.uuid);
            /* string version = 3; */
            if (message.version !== "")
                writer.tag(3, WireType.LengthDelimited).string(message.version);
            /* uint32 limit = 4; */
            if (message.limit !== 0)
                writer.tag(4, WireType.Varint).uint32(message.limit);
            /* bool wait = 5; */
            if (message.wait !== false)
                writer.tag(5, WireType.Varint).bool(message.wait);
            /* repeated uint64 command_ids = 6; */
            if (message.commandIds.length) {
                writer.tag(6, WireType.LengthDelimited).fork();
                for (let i = 0; i < message.commandIds.length; i++)
                    writer.uint64(message.commandIds[i]);
                writer.join();
            }
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveRawCommandActionsRequest
     */
    const ObserveRawCommandActionsRequest = new ObserveRawCommandActionsRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ObserveRawCommandActionsReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ObserveRawCommandActionsReply", [
                { no: 1, name: "ts", kind: "message", T: () => Timestamp },
                { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 3, name: "command_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 4, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 5, name: "layer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
                { no: 6, name: "action", kind: "enum", T: () => ["normalgw.hpl.v1.ObserveRawCommandActionsReply.ActionType", ObserveRawCommandActionsReply_ActionType] },
                { no: 7, name: "value", kind: "message", T: () => Any },
                { no: 8, name: "error", kind: "message", T: () => Any }
            ]);
        }
        create(value) {
            const message = { version: "", commandId: 0, uuid: "", layer: "", action: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* google.protobuf.Timestamp ts */ 1:
                        message.ts = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ts);
                        break;
                    case /* string version */ 2:
                        message.version = reader.string();
                        break;
                    case /* uint64 command_id */ 3:
                        message.commandId = reader.uint64().toNumber();
                        break;
                    case /* string uuid */ 4:
                        message.uuid = reader.string();
                        break;
                    case /* string layer */ 5:
                        message.layer = reader.string();
                        break;
                    case /* normalgw.hpl.v1.ObserveRawCommandActionsReply.ActionType action */ 6:
                        message.action = reader.int32();
                        break;
                    case /* google.protobuf.Any value */ 7:
                        message.value = Any.internalBinaryRead(reader, reader.uint32(), options, message.value);
                        break;
                    case /* google.protobuf.Any error */ 8:
                        message.error = Any.internalBinaryRead(reader, reader.uint32(), options, message.error);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* google.protobuf.Timestamp ts = 1; */
            if (message.ts)
                Timestamp.internalBinaryWrite(message.ts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
            /* string version = 2; */
            if (message.version !== "")
                writer.tag(2, WireType.LengthDelimited).string(message.version);
            /* uint64 command_id = 3; */
            if (message.commandId !== 0)
                writer.tag(3, WireType.Varint).uint64(message.commandId);
            /* string uuid = 4; */
            if (message.uuid !== "")
                writer.tag(4, WireType.LengthDelimited).string(message.uuid);
            /* string layer = 5; */
            if (message.layer !== "")
                writer.tag(5, WireType.LengthDelimited).string(message.layer);
            /* normalgw.hpl.v1.ObserveRawCommandActionsReply.ActionType action = 6; */
            if (message.action !== 0)
                writer.tag(6, WireType.Varint).int32(message.action);
            /* google.protobuf.Any value = 7; */
            if (message.value)
                Any.internalBinaryWrite(message.value, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
            /* google.protobuf.Any error = 8; */
            if (message.error)
                Any.internalBinaryWrite(message.error, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ObserveRawCommandActionsReply
     */
    const ObserveRawCommandActionsReply = new ObserveRawCommandActionsReply$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ExtendCommandRequest$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ExtendCommandRequest", [
                { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
                { no: 2, name: "new_expiration", kind: "message", T: () => Timestamp }
            ]);
        }
        create(value) {
            const message = { id: 0 };
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
            while (reader.pos < end) {
                let [fieldNo, wireType] = reader.tag();
                switch (fieldNo) {
                    case /* uint64 id */ 1:
                        message.id = reader.uint64().toNumber();
                        break;
                    case /* google.protobuf.Timestamp new_expiration */ 2:
                        message.newExpiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.newExpiration);
                        break;
                    default:
                        let u = options.readUnknownField;
                        if (u === "throw")
                            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                        let d = reader.skip(wireType);
                        if (u !== false)
                            (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
                }
            }
            return message;
        }
        internalBinaryWrite(message, writer, options) {
            /* uint64 id = 1; */
            if (message.id !== 0)
                writer.tag(1, WireType.Varint).uint64(message.id);
            /* google.protobuf.Timestamp new_expiration = 2; */
            if (message.newExpiration)
                Timestamp.internalBinaryWrite(message.newExpiration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ExtendCommandRequest
     */
    const ExtendCommandRequest = new ExtendCommandRequest$Type();
    // @generated message type with reflection information, may provide speed optimized methods
    class ExtendCommandReply$Type extends MessageType {
        constructor() {
            super("normalgw.hpl.v1.ExtendCommandReply", []);
        }
        create(value) {
            const message = {};
            globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
            if (value !== undefined)
                reflectionMergePartial(this, message, value);
            return message;
        }
        internalBinaryRead(reader, length, options, target) {
            return target !== null && target !== void 0 ? target : this.create();
        }
        internalBinaryWrite(message, writer, options) {
            let u = options.writeUnknownFields;
            if (u !== false)
                (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
            return writer;
        }
    }
    /**
     * @generated MessageType for protobuf message normalgw.hpl.v1.ExtendCommandReply
     */
    const ExtendCommandReply = new ExtendCommandReply$Type();
    /**
     * @generated ServiceType for protobuf service normalgw.hpl.v1.CommandManager
     */
    new ServiceType("normalgw.hpl.v1.CommandManager", [
        { name: "StartCommand", options: { "google.api.http": { post: "/api/v1/command", body: "*" } }, I: StartCommandRequest, O: StartCommandReply },
        { name: "GetCommands", options: { "google.api.http": { get: "/api/v1/command" }, "normalgw.annotations.auth": { readonly: true } }, I: GetCommandsRequest, O: GetCommandsReply },
        { name: "CancelCommand", options: { "google.api.http": { delete: "/api/v1/command/{id}" } }, I: CancelCommandRequest, O: CancelCommandReply },
        { name: "ExtendCommand", options: { "google.api.http": { post: "/api/v1/command/{id}", body: "*" } }, I: ExtendCommandRequest, O: ExtendCommandReply },
        { name: "ObserveRawCommandActions", serverStreaming: true, options: { "google.api.http": { get: "/api/v1/command/updates/actions" }, "normalgw.annotations.auth": { readonly: true } }, I: ObserveRawCommandActionsRequest, O: ObserveRawCommandActionsReply }
    ]);

    const GROUP_SEPARATOR = '|';
    class NormalClientSdk {
        getGroupKeyFromPoint(point, keys) {
            const groupKeys = keys.map((key) => lodashExports.get(point, `attrs.${key}`));
            if (groupKeys.some((k) => !k))
                return '';
            return groupKeys.join(GROUP_SEPARATOR);
        }
        constructor(baseUrl) {
            const transport = createWebFetchTransport({ apiUrl: baseUrl });
            this.pointClient = new PointManagerClient(transport);
            this.applicationClient = new ApplicationServiceClient(transport);
        }
        getApplicationInfo(applicationId) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const application = yield this.applicationClient.getApplications(GetApplicationsRequest.create({ name: applicationId }));
                if (application.response.totalCount === 1) {
                    return application.response.applications[0];
                }
                return null;
            });
        }
        getHookPoints({ applicationId, hookId, additionalQuery, }) {
            var _a;
            return __awaiter$3(this, void 0, void 0, function* () {
                const app = yield this.getApplicationInfo(applicationId);
                const hook = app === null || app === void 0 ? void 0 : app.hooks.find((h) => h.id === hookId);
                if (!hook)
                    throw new Error(`Hook id: ${hookId} not found.`);
                if (!hook.points || !((_a = hook.points) === null || _a === void 0 ? void 0 : _a.query))
                    return [];
                const { annotations, grouping, query } = hook.points;
                const res = yield this.pointClient.getPoints(GetPointsRequest.create({
                    pageSize: 1000,
                    pageOffset: 0,
                    annotations,
                    layer: 'default',
                    structuredQuery: additionalQuery ? Query.create({ and: [query, additionalQuery] }) : query,
                }));
                return res.response.points;
            });
        }
        getPoints(query) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const res = yield this.pointClient.getPoints(GetPointsRequest.create({ pageSize: 1000, pageOffset: 0, layer: 'default', structuredQuery: query }));
                return res.response.points;
            });
        }
        getData(uuids, from, to) {
            return __awaiter$3(this, void 0, void 0, function* () {
                let window = 300;
                if (to.getTime() - from.getTime() > 60 * 60 * 8 * 1000) {
                    window = 1500;
                    console.log(1500);
                }
                const fromSeconds = Math.floor(from.getTime() / 1000);
                const toSeconds = Math.floor(to.getTime() / 1000);
                const res = yield this.pointClient.getData(GetDataRequest.create({
                    uuids,
                    from: { seconds: fromSeconds },
                    to: { seconds: toSeconds },
                    method: ResampleOptions_ResampleMethod.NONE,
                    window: { seconds: window },
                    reverse: true,
                }));
                return res.response.data;
            });
        }
        groupPoints(points, groups) {
            if (!groups.length)
                return new Map().set('', points);
            return points.reduce((acc, curr) => {
                const groupKey = this.getGroupKeyFromPoint(curr, groups);
                const group = acc.get(groupKey);
                if (group) {
                    group.push(curr);
                }
                else {
                    acc.set(groupKey, [curr]);
                }
                return acc;
            }, new Map());
        }
        updatePoints(points) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const result = yield this.pointClient.updatePoints({ points: points.map(({ attrs, uuid }) => Point.create({ attrs, uuid })) });
                return result.response.results;
            });
        }
    }

    return NormalClientSdk;

}));
